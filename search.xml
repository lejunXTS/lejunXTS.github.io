<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pytorch一键导出环境</title>
      <link href="/posts/308b9800.html"/>
      <url>/posts/308b9800.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>requirements.txt 文件是一个文本文件，用于列出你的Python项目所依赖的软件包及其版本。</p><p><strong>生成requirements.txt的方式</strong></p><ol><li>直接使用pip freeze命令生成requirements.txt文件：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>然后你会发现requirements.txt文件里有好多好多的包，因为他是把你环境里所有的包都列出来了，不管他们对你的项目有没有影响</p><p>所以这个方法更适合于为该项目创建了的单虚拟环境下运行</p><p>安装requirements.txt 里面依赖的包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>pipreqs</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装pipreqs</span></span><br><span class="line">pip install pipreqs</span><br><span class="line"><span class="comment"># 生成 requirements.txt</span></span><br><span class="line">pipreqs ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">pipreqs . --encoding=utf8 --force<span class="comment">#在当前目录下生成</span></span><br></pre></td></tr></table></figure><p>–encoding&#x3D;utf8 为使用utf8编码</p><p>–force 强制执行，当生成目录下的requirements.txt存在时覆盖</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java</title>
      <link href="/posts/7f1ae6d2.html"/>
      <url>/posts/7f1ae6d2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>目前市面上的软件主要可分为两种：</p><p>BS:(Browser&#x2F;Server,浏览器&#x2F;服务器架构模式)。<br>CS:(Client&#x2F;Server,客户端&#x2F;服务器架构模式)</p><ul><li>对比</li></ul><p>C&#x2F;S架构主要特点是交互性强，具有安全访问模式，网络流量低，响应速度快，因为客户端负责大多数业务逻辑和UI演示，所以也被称为胖客户端，C&#x2F;S结构的<br>软件需要针对不同的操作系统开发不同版本的软件。</p><p>随着互联网的兴起，CS架构不适合Web，最大的原因是Web应用程序的修改和升级非常迅速，而CS架构需要每个客户端逐个升级桌面App，因此，Browser&#x2F;Server模式开始流行，简称BS架构。</p><p>B&#x2F;S架构的主要特点是分散性高、维护方便、开发简单、共享性高、总拥有成本低。</p><ul><li>BS架构原理</li></ul><p>在BS架构下，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。<br>浏览器只需要请求服务器，获取Web页面，并把Web页面展示给用户即可。</p><h1 id="java环境安装"><a href="#java环境安装" class="headerlink" title="java环境安装"></a>java环境安装</h1><p>JDK</p><p>IDEA</p><p>Maven</p><p>Maven 是一个项目管理工具，可以对 Java 项目进行自动化的构建和依赖管理</p><p>Maven的作用可以分成三类：</p><p>  项目构建：提供标准的，跨平台的自动化构建项目的方式</p><p>  依赖管理：方便快捷的管理项目依赖的资源（jar包），避免资源间的版本冲突<br>  等问题</p><p>  统一开发结构：提供标准的，统一的项目开发结构</p><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>Spring Boot是由Pivotal团队提供的基于Spring的全新框架，旨在简化Spring<br>应用的初始搭建和开发过程。</p><p>Spring Boot是所有基于Spring开发项目的起点。</p><p>Spring Boot就是尽可能地简化应用开发的门槛，让应用开发、测试、部署变得<br>更加简单。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>遵循“约定优于配置”的原则，只需要很少的配置或使用默认的配置。</p><p>能够使用内嵌的Tomcat、Jetty服务器，不需要部署war文件。</p><p>提供定制化的启动器Starters，简化Maven配置，开箱即用。</p><p>纯Java配置，没有代码生成，也不需要XML配置。</p><p>提供了生产级的服务监控方案，如安全监控、应用监控、健康检测等。</p><h2 id="开发环境热部署"><a href="#开发环境热部署" class="headerlink" title="开发环境热部署"></a>开发环境热部署</h2><p>在实际的项目开发调试过程中会频繁地修改后台类文件，导致需要重新编译、<br>重新启动，整个过程非常麻烦，影响开发效率。</p><p>Spring Boot提供了spring-boot-devtools组件，使得无须手动重启Spring<br>Boot应用即可重新编译、启动项目，大大缩短编译启动的时间。</p><p>devtools会监听classpath下的文件变动，触发Restart类加载器重新加载该类，<br>从而实现类文件和属性文件的热部署。</p><p>并不是所有的更改都需要重启应用（如静态资源、视图模板），可以通过设置<br>spring.devtools.restart.exclude属性来指定一些文件或目录的修改不用重启应<br>用</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>Spring Boot将传统Web开发的mvc、json、tomcat等框架整合，提供了<br>spring-boot-starter-web组件，简化了Web应用配置。</p><p>创建SpringBoot项目勾选Spring Web选项后，会自动将spring-boot-starter- web组件加入到项目中。</p><p>spring-boot-starter-web启动器主要包括web、webmvc、json、tomcat等<br>基础依赖组件，作用是提供Web开发场景所需的所有底层依赖。</p><p>webmvc为Web开发的基础框架，json为JSON数据解析组件，tomcat为自带<br>的容器依赖。</p><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><p>Spring Boot提供了@Controller和@RestController两种注解来标识此类负责<br>接收和处理HTTP请求。</p><p>如果请求的是页面和数据，使用@Controller注解即可；如果只是请求数据，<br>则可以使用@RestController注解。</p><p>因为现在一般是前后端分离的项目，所以使用@RestController注解。</p><h2 id="路由映射"><a href="#路由映射" class="headerlink" title="路由映射"></a>路由映射</h2><p>@RequestMapping注解主要负责URL的路由映射。它可以添加在Controller<br>类或者具体的方法上。</p><p>如果添加在Controller类上，则这个Controller中的所有路由映射都将会加上此<br>映射规则，如果添加在方法上，则只对当前方法生效。</p><p>@RequestMapping注解包含很多属性参数来定义HTTP的请求映射规则。常<br>用的属性参数如下：</p><p>value: 请求URL的路径，支持URL模板、正则表达式</p><p>method: HTTP请求方法</p><p>consumes: 请求的媒体类型（Content-Type），如application&#x2F;json</p><p>produces: 响应的媒体类型</p><p>params，headers: 请求的参数及请求头的值</p><h2 id="URL映射"><a href="#URL映射" class="headerlink" title="URL映射"></a>URL映射</h2><p>@RequestMapping注解主要负责URL的路由映射。它可以添加在Controller<br>类或者具体的方法上。</p><p>如果添加在Controller类上，则这个Controller中的所有路由映射都将会加上此<br>映射规则，如果添加在方法上，则只对当前方法生效。</p><p>@RequestMapping注解包含很多属性参数来定义HTTP的请求映射规则。常<br>用的属性参数如下：</p><p>value: 请求URL的路径，支持URL模板、正则表达式</p><p>method: HTTP请求方法</p><p>consumes: 请求的媒体类型（Content-Type），如application&#x2F;json</p><p>produces: 响应的媒体类型</p><p>params，headers: 请求的参数及请求头的值</p><h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h2><p>使用IDEA创建Spring Boot项目，会默认创建出classpath:&#x2F;static&#x2F;目录，静态<br>资源一般放在这个目录下即可。</p><p>如果默认的静态资源过滤策略不能满足开发需求，也可以自定义静态资源过滤<br>策略。</p><p>在application.properties中直接定义过滤规则和静态资源位置：<br>过滤规则为&#x2F;static&#x2F;**，静态资源位置为classpath:&#x2F;static&#x2F;</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>后端项目3</title>
      <link href="/posts/593dfc4f.html"/>
      <url>/posts/593dfc4f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端项目2</title>
      <link href="/posts/2e3accd9.html"/>
      <url>/posts/2e3accd9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/posts/b7339d63.html"/>
      <url>/posts/b7339d63.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><a href="https://www.bilibili.com/video/BV1FE411P7B3/?p=2&spm_id_from=pageDriver&vd_source=1c8b0af391894cdb44e3942161a1de4f">学习视频链接</a></p><p><a href="https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ">文章链接</a></p><h1 id="常用总结"><a href="#常用总结" class="headerlink" title="常用总结"></a>常用总结</h1><p>创建仓库</p><p>如果为配置过SSH免秘钥，先进行配置</p><p><strong>上传代码</strong></p><ol><li>初始化本地仓库</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>执行这条命令后本地项目目录会有一个隐藏的.git文件夹</p><ol start="2"><li>将所有代码添加到本地仓库</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><ol start="3"><li>提交代码到本地仓库</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;你想要显示的信息&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>将本地仓库关联到远程仓库上</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:****/****.git</span><br></pre></td></tr></table></figure><p>ssh地址</p><ol start="5"><li>如果远程远程仓库有文件，需要先pull到本地</li></ol><p>如果远程仓库有文件，会出现error</p><p>更新被拒绝，因为远程仓库包含本地尚不存在的提交</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin main</span><br></pre></td></tr></table></figure><ol start="6"><li>将本地提交的文件上传到远程仓库上</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure><p>mian是分支名，如果出现error: 源引用规格 main 没有匹配 无法推送</p><p>可以先查看远程分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><p>查看本地分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>修改分支名称：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git brach -m &lt;name&gt;</span><br></pre></td></tr></table></figure><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术</p><p>实现跨区域多人协同开发</p><p>追踪和记载一个或者多个文件的历史记录</p><p>组织和保护你的源代码和文档</p><p>统计工作量</p><p>并行开发、提高开发效率</p><p>跟踪记录整个软件的开发过程</p><p>减轻开发人员的负担，节省时间，同时降低人为错误</p><p>简单说就是用于管理多人协同开发项目的技术</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题</p><h1 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h1><p>主流的版本控制器有如下这些：</p><p>Git</p><p>SVN（Subversion）</p><p>CVS（Concurrent Versions System）</p><p>VSS（Micorosoft Visual SourceSafe）</p><p>TFS（Team Foundation Server）</p><p>Visual Studio Online</p><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p><h1 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h1><h2 id="本地版本控制"><a href="#本地版本控制" class="headerlink" title="本地版本控制"></a>本地版本控制</h2><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><h2 id="集中版本控制-SVN"><a href="#集中版本控制-SVN" class="headerlink" title="集中版本控制  SVN"></a>集中版本控制  SVN</h2><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作</p><p>而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p><h2 id="分布式版本控制-Git"><a href="#分布式版本控制-Git" class="headerlink" title="分布式版本控制 Git"></a>分布式版本控制 Git</h2><p>每个人都拥有全部的代码</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况</p><h1 id="Git与SVN的主要区别"><a href="#Git与SVN的主要区别" class="headerlink" title="Git与SVN的主要区别"></a>Git与SVN的主要区别</h1><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件</p><p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p><h1 id="Git的历史"><a href="#Git的历史" class="headerlink" title="Git的历史"></a>Git的历史</h1><p>Linux和Git之父李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰</p><h1 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h1><p>git官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多</p><p>Git CMD：Windows风格的命令行</p><p>Git GUI：图形界面的Git</p><h1 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h1><p>所有的配置文件，都保存在本地</p><p>查看配置 git config -l</p><p>查看不同级别的配置文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看系统config</span></span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line"><span class="comment">#查看当前用户（global）配置</span></span><br><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure><p><strong>Git相关的配置文件：</strong></p><p>1）、Git\etc\gitconfig  ：Git 安装目录下的 gitconfig     –system 系统级</p><p>2）、C:\Users\Administrator\ .gitconfig    只适用于当前登录用户的配置  –global 全局</p><p><strong>设置用户名与邮箱（用户标识，必要）</strong></p><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;******&quot;</span>  <span class="comment">#名称</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;*******@qq.com&quot;</span>   <span class="comment">#邮箱</span></span><br></pre></td></tr></table></figure><p>只需要做一次这个设置，如果传递了–global 选项，Git将总是会使用该信息来处理系统中所做的一切操作</p><p>–global为全局配置， 不加为某个项目的特定配置。</p><h1 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a>Git基本理论</h1><h2 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="/posts/b7339d63/1.png"></p><ul><li><p>Workspace：工作区，就是你平时存放项目代码的地方</p></li><li><p>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p></li><li><p>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p></li><li><p>Remote：远程仓库，托管代码的服务器</p></li></ul><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img src="/posts/b7339d63/2.png"></p><ul><li><p>Directory：使用Git管理的一个目录，也就是一个仓库，包含工作空间和Git的管理空间</p></li><li><p>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间</p></li><li><p>.git：存放Git管理信息的目录，初始化仓库的时候自动创建</p></li><li><p>Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，可以把所有的更新放在暂存区</p></li><li><p>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）</p></li><li><p>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态</p></li></ul><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件</p><p>２、将需要进行版本管理的文件放入暂存区域</p><p>３、将暂存区域的文件提交到git仓库</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p><img src="/posts/b7339d63/3.png"></p><h1 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h1><h2 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h2><p>工作目录WorkSpace就是Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><p><img src="/posts/b7339d63/4.png"></p><h2 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p>创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h1 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h1><h2 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><p>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p><p>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p><p>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</p><p>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</p><h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p>通过如下命令可以查看到文件的状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line">git add .                  <span class="comment">#添加所有文件到暂存区</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;消息内容&quot;</span>    <span class="comment">#提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br></pre></td></tr></table></figure><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p><p>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</p><p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p><p>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p><p>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt        <span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class="line">!lib.txt     <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全栈即时通讯心得</title>
      <link href="/posts/ce15e2e9.html"/>
      <url>/posts/ce15e2e9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webserver</title>
      <link href="/posts/571cb353.html"/>
      <url>/posts/571cb353.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ol><li><p>TCP</p></li><li><p>http协议</p></li><li><p>Linux网络编程</p></li></ol><h2 id="WebServer简介和功能梳理"><a href="#WebServer简介和功能梳理" class="headerlink" title="WebServer简介和功能梳理"></a>WebServer简介和功能梳理</h2><p>WebServer，或者网络服务器，是一种专门用来处理互联网或内部网络中请求的服务器。</p><p>简单来说，当你在浏览器中输入一个网址时，背后就是WebServer在工作，它负责接收你的请求，处理这个请求，然后把网页的内容发送回你的电脑或手机上。</p><p>以Nginx为例，这是一种非常流行的WebServer软件。它之所以广泛使用，主要是因为它处理高并发请求非常高效，即能同时处理成千上万个网络请求。</p><p>Nginx常用于提供静态资源如图片、CSS样式文件和JavaScript文件，也可以作为代理服务器，转发对动态资源的请求到其他服务器（这个过程类似于网关）。</p><p>WebServer的功能非常强大，它不仅能处理网页内容的分发，还可以进行安全控制、请求转发、负载均衡等。</p><p><strong>在这些处理过程中，涉及到的机制包括：</strong></p><p>HTTP协议处理：这是Web服务器处理的核心，用于理解和响应浏览器或其他客户端发来的HTTP请求。</p><p>内容缓存：为了提高响应速度，Web服务器可以缓存频繁请求的内容，这样在下一次同样的请求到来时可以直接响应，不需要重新生成。</p><p>负载均衡：当服务器的请求量非常大时，Web服务器可以将请求分发到多台服务器上，这样可以避免单一服务器过载，提高整体处理能力。</p><p>安全功能：例如SSL加密，保证数据传输的安全性。</p><p>总的来说，WebServer是网络应用中不可或缺的一部分，它使得网络信息的获取变得快速和高效。</p><h2 id="实现一个简单的WebServer"><a href="#实现一个简单的WebServer" class="headerlink" title="实现一个简单的WebServer"></a>实现一个简单的WebServer</h2><p>WebServer最核心的功能就是<strong>HTTP协议处理</strong>，只要能进行HTTP协议处理，就是一个WebServer。</p><p>最终目标是实现一个能高效处理HTTP协议的WebServer，其应可以同时处理大量的并发请求，并尽量减少对系统资源的消耗。</p><p>先从一个最简单的WebServer开始，后续再逐步扩展，逐渐实现一个高效的、可配置的WebServer。</p><p>简单来说，要先实现一个单线程的、只支持处理一个连接的WebServer，这个WebServer 能处理基于HTTP&#x2F;1.0的简单请求。</p><p>具体来说： </p><pre><code>这个WebServer应该至少能管理一个网站，一个网站可能有多个网页组成，所以管理的对象应该是一个文件夹。  这个WebServer应该至少监听一个固定的端口，用来接受客户端连接。 这个WebServer应该至少支持HTTP/1.0的大部分请求方法。（HTTP/1.0 支持的请求方法包括GET、POST、PUT、DELETE、TRACE。这个WebServer应该能够返回标准的HTTP响应，告知客户端处理的结果。 </code></pre><h2 id="扩充"><a href="#扩充" class="headerlink" title="扩充"></a>扩充</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>其实多线程&#x2F;多进程无非就是pthread_creater&#x2F;fork而已,但是需要考虑的东西也就更多了,例如临界区&#x2F;竞态条件race condition, 考虑到这个, 又要用一些进程间的通信原语去解决问题,例如mutex cond&#x2F;pipe sig shm, 然后使用这些又需要注意很多地方 死锁&#x2F;临界区，一些内存已经不存在而在其他线程中要被使用</p><p>所有线程共享其所属进程的资源，如内存空间、文件描述符和系统资源，这些资源都是由进程统一管理和调度的</p><p>每个线程也有一些专属的资源</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>参考：<a href="https://www.zhihu.com/column/c_1774157245946933248">https://www.zhihu.com/column/c_1774157245946933248</a></p><p>简单的方案已经用简单的计时器解决了超时控制的问题，但是终究各管各的，而且未来我们的 WebServer 还要扩展更多的功能，可能也要用到计时功能。</p><p>一个一个去实现单独的计时器的做法也许可行，但是看起来毕竟很简陋。</p><p>我们要打造一个独立于工作线程、稳定、专业计时的工具，主线程还有其他工作要办，于是我们可以建立一个专门的计时线程。</p><p>建立计时线程，首先要分析其应当实现的功能。不是所有的线程都需要计时信息，所以计时器不能给所有线程都发通知，这很浪费不可取。因此计时线程要记录，记录要给哪些线程发通知。</p><p>需要计时器的通知信息的线程可能会增多，可能会减少，所以要允许它们 既可以订阅，也可以取消订阅。</p><p>计时线程并不知道到底会有多少个线程将来要订阅它的通知，所以它还要具备良好的可扩展性，能支持大量的线程订阅其信息。计时线程作为发布者通知到订阅者，一个计时周期已经到了。</p><p>因此，<strong>双向链表</strong>就以其高效的插入、删除操作和可扩展性成为我们建立计时线程理想的数据结构。</p><p><strong>小根堆</strong></p><p>小根堆（Min-Heap）是一种特殊的完全二叉树，其每个节点的值都不大于其子节点的值。这种属性确保了树的根节点始终是所有元素中的最小值，这就是小根堆的最大优势：能够快速（在常数时间，即O(1)的时间复杂度内）访问到最小元素。</p><p>小根堆的主要操作：</p><p>插入操作（Insert） - 将新元素添加到堆的末端，然后通过一系列的向上调整（自下而上的调整，也称为上浮操作）保持小根堆的性质。这个操作的时间复杂度是O(log n)，其中n是堆中元素的数量。 </p><p>删除最小元素（Extract Min） - 删除根节点（即最小元素），通常通过将最后一个元素移动到根位置，然后进行自上而下的调整（下沉操作）来恢复堆的性质。这个操作的时间复杂度也是O(log n)。 </p><p>构建小根堆（Build Min Heap） - 将一个无序数组转化为小根堆的过程。可以通过从最后一个非叶子节点开始，逐个执行下沉操作来实现。这个过程的时间复杂度是O(n)。 </p><p>小根堆的应用：优先队列 - 小根堆常用于实现优先队列，其中队列的最高优先级对应于最小元素。这使得任务调度、事件管理等应用中，可以快速地处理最紧急的任务或事件。</p><p>堆排序 - 利用堆结构进行的一种有效的排序方法，特别是在需要不断调整数据集中最小或最大值时非常高效。</p><p>小根堆的真正优势在于它能够提供快速的访问到最小元素的能力，这对于很多需要频繁查询最小值的场景非常关键。同时，它还支持相对高效的插入和删除最小值的操作，使得大量的且动态变化的数据集的管理变得更加高效。</p><p>使用小根堆作为连接池的排序结构</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>线程池是一种通过预创建线程的方式，来管理和优化多线程程序性能的技术。</p><p>在多线程编程中，频繁地创建和销毁线程会带来较大的性能开销，因为每个线程的创建和销毁都涉及到操作系统的资源分配和回收。</p><p>线程池通过创建一定数量的线程，并将它们保持在待命状态，可以快速响应新的任务请求。</p><p>当一个任务到来时，线程池会从中选择一个空闲的线程去执行任务，执行完毕后，这个线程不会被销毁，而是返回到线程池中，等待执行下一个任务。</p><p>这种方式减少了线程创建和销毁的次数，提高了响应速度，降低了资源消耗。</p><p>线程池通常包含以下几个主要组件： </p><p>工作队列：用于存放待处理的任务。 </p><p>工作线程：线程池中的线程，负责执行工作队列中的任务。  </p><p>线程池管理器：负责管理线程池的创建、任务分配、线程同步和销毁等。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>查看服务器是否在监听</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -tuln | grep 8888</span><br></pre></td></tr></table></figure><p>查看具体哪个进程占用了端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo lsof -i :8080</span><br></pre></td></tr></table></figure><h1 id="一些错误"><a href="#一些错误" class="headerlink" title="一些错误"></a>一些错误</h1><p><strong>错误代码说明</strong></p><p>400 Bad Request：客户端发送的请求有语法错误或格式不正确。确保请求符合 HTTP 协议标准</p><p>404 Not Found：服务器无法找到请求的资源。检查服务器路径和资源文件是否正确</p><h1 id="构建脚本"><a href="#构建脚本" class="headerlink" title="构建脚本"></a>构建脚本</h1><p>这个构建过程是将源代码编译成可执行文件的步骤，通常包括配置构建环境、生成构建文件、编译源代码和链接生成最终的可执行文件或库。以下是对这个特定构建过程的详细解释：</p><h2 id="1-设置变量"><a href="#1-设置变量" class="headerlink" title="1. 设置变量"></a>1. 设置变量</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">+ <span class="built_in">pwd</span></span><br><span class="line">+ SOURCE_DIR=/home/asus/ly/cpp/WebServer</span><br><span class="line">+ BUILD_DIR=../build</span><br><span class="line">+ BUILD_TYPE=Debug</span><br></pre></td></tr></table></figure><ul><li><code>pwd</code>：打印当前工作目录。</li><li><code>SOURCE_DIR</code>：源代码目录，位于 <code>/home/asus/ly/cpp/WebServer</code>。</li><li><code>BUILD_DIR</code>：构建目录，设置为相对于源代码目录的 <code>../build</code>。</li><li><code>BUILD_TYPE</code>：构建类型，设置为 <code>Debug</code>，意味着生成的可执行文件包含调试信息，有助于调试。</li></ul><h2 id="2-创建并切换到构建目录"><a href="#2-创建并切换到构建目录" class="headerlink" title="2. 创建并切换到构建目录"></a>2. 创建并切换到构建目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">+ <span class="built_in">mkdir</span> -p ../build/Debug</span><br><span class="line">+ <span class="built_in">cd</span> ../build/Debug</span><br></pre></td></tr></table></figure><ul><li><code>mkdir -p ../build/Debug</code>：创建构建目录及其父目录（如果不存在）。</li><li><code>cd ../build/Debug</code>：切换到构建目录。</li></ul><h2 id="3-生成构建文件"><a href="#3-生成构建文件" class="headerlink" title="3. 生成构建文件"></a>3. 生成构建文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">+ cmake -DCMAKE_BUILD_TYPE=Debug /home/asus/ly/cpp/WebServer</span><br></pre></td></tr></table></figure><ul><li>使用 <code>cmake</code> 命令生成构建文件。</li><li><code>-DCMAKE_BUILD_TYPE=Debug</code>：指定构建类型为 <code>Debug</code>。</li><li><code>/home/asus/ly/cpp/WebServer</code>：源代码目录。</li></ul><p>CMake 将读取源代码目录中的 <code>CMakeLists.txt</code> 文件，根据配置生成适合目标平台的构建文件（例如 Makefile）。</p><h2 id="4-编译源代码"><a href="#4-编译源代码" class="headerlink" title="4. 编译源代码"></a>4. 编译源代码</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">+ make</span><br></pre></td></tr></table></figure><ul><li><code>make</code>：根据 CMake 生成的构建文件，编译源代码。</li></ul><h2 id="编译输出"><a href="#编译输出" class="headerlink" title="编译输出"></a>编译输出</h2><h3 id="CMake-配置"><a href="#CMake-配置" class="headerlink" title="CMake 配置"></a>CMake 配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-- The CXX compiler identification is GNU 11.3.0</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">...</span><br><span class="line">-- Build files have been written to: /home/asus/ly/cpp/build/Debug</span><br></pre></td></tr></table></figure><ul><li>CMake 识别出使用的 C++ 编译器是 GNU 11.3.0。</li><li>检测并确认编译器的功能和特性。</li><li>生成构建文件并写入构建目录。</li></ul><h3 id="编译和链接"><a href="#编译和链接" class="headerlink" title="编译和链接"></a>编译和链接</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[  4%] Building CXX object WebServer/base/CMakeFiles/libserver_base.dir/AsyncLogging.cpp.o</span><br><span class="line">...</span><br><span class="line">[100%] Built target HTTPClient</span><br></pre></td></tr></table></figure><ul><li><code>make</code> 逐步编译各个源文件，并显示编译进度。</li><li>每一行输出表示正在编译一个源文件，例如 <code>AsyncLogging.cpp</code>，生成对应的目标文件（<code>.o</code> 文件）。</li><li>目标文件链接成静态库 <code>libserver_base.a</code> 或可执行文件 <code>WebServer</code> 和 <code>HTTPClient</code>。</li></ul><h3 id="警告信息"><a href="#警告信息" class="headerlink" title="警告信息"></a>警告信息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">In file included from /home/asus/ly/cpp/WebServer/WebServer/Channel.cpp:3:</span><br><span class="line">...</span><br><span class="line">warning: ‘Channel::lastEvents_’ will be initialized after [-Wreorder]</span><br></pre></td></tr></table></figure><ul><li>编译过程中出现了变量初始化顺序的警告，提示代码中的变量初始化顺序与类中声明的顺序不一致。</li><li>尽管这些警告不会阻止编译成功，但修复这些警告有助于提高代码质量和稳定性。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个构建过程是典型的 CMake 和 Make 编译流程，主要步骤包括：</p><ol><li>设置环境变量和构建目录。</li><li>使用 CMake 生成构建系统（如 Makefile）。</li><li>使用 Make 编译和链接源代码，生成可执行文件或库。</li></ol><p>这个流程自动化了编译过程，确保代码可以在不同平台上进行一致的构建。</p><h1 id="总体结构分析"><a href="#总体结构分析" class="headerlink" title="总体结构分析"></a>总体结构分析</h1><p><img src="https://github.com/lejunXTS/blogimage/blob/main/webserver.png"></p><h1 id="服务端具体功能分析"><a href="#服务端具体功能分析" class="headerlink" title="服务端具体功能分析"></a>服务端具体功能分析</h1><p><strong>主函数</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建事件循环对象mainLoop，然后创建服务器对象myHTTPServer，传入事件循环、线程数和端口号。</span></span><br><span class="line"><span class="comment">//调用myHTTPServer.start()启动服务器，然后调用mainLoop.loop()进入事件循环。</span></span><br><span class="line">  EventLoop mainLoop;</span><br><span class="line">  <span class="function">Server <span class="title">myHTTPServer</span><span class="params">(&amp;mainLoop, threadNum, port)</span></span>;</span><br><span class="line">  myHTTPServer.<span class="built_in">start</span>();</span><br><span class="line">  mainLoop.<span class="built_in">loop</span>();</span><br></pre></td></tr></table></figure><h2 id="并发模型"><a href="#并发模型" class="headerlink" title="并发模型"></a>并发模型</h2><h3 id="EventLoop类分析与总结"><a href="#EventLoop类分析与总结" class="headerlink" title="EventLoop类分析与总结"></a>EventLoop类分析与总结</h3><p><code>EventLoop</code> 类是一个核心组件，用于实现基于事件驱动的编程模型。它通过 epoll 提供的高效 I&#x2F;O 多路复用机制管理事件循环。</p><h4 id="具体功能和作用"><a href="#具体功能和作用" class="headerlink" title="具体功能和作用"></a>具体功能和作用</h4><h4 id="事件循环管理"><a href="#事件循环管理" class="headerlink" title="事件循环管理"></a>事件循环管理</h4><ul><li><code>loop()</code> 方法启动事件循环，不断监听和处理 I&#x2F;O 事件，直到 <code>quit()</code> 方法被调用。</li><li><code>quit()</code> 方法用于退出事件循环。</li></ul><h4 id="事件通知机制"><a href="#事件通知机制" class="headerlink" title="事件通知机制"></a>事件通知机制</h4><ul><li>使用 <code>eventfd</code> 创建的文件描述符 <code>wakeupFd_</code>，配合 epoll，实现线程间的事件通知。</li><li><code>wakeup()</code> 方法向 <code>wakeupFd_</code> 写入数据，以唤醒阻塞的事件循环。</li><li><code>handleRead()</code> 方法从 <code>wakeupFd_</code> 读取数据，处理唤醒事件。</li></ul><h4 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h4><ul><li>支持异步任务的调度和执行，通过 <code>runInLoop()</code> 和 <code>queueInLoop()</code> 方法实现。</li><li><code>runInLoop()</code> 方法在事件循环线程中直接执行任务，如果在其他线程调用，则将任务放入队列。</li><li><code>queueInLoop()</code> 方法将任务添加到待处理队列，并在需要时唤醒事件循环。</li><li><code>doPendingFunctors()</code> 方法在每次循环迭代中处理所有待执行的任务。</li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><code>EventLoop</code> 类通过事件循环、高效的 I&#x2F;O 多路复用和线程间通知机制，实现了一个高性能、线程安全的事件驱动模型。</p><h3 id="Channel类分析"><a href="#Channel类分析" class="headerlink" title="Channel类分析"></a>Channel类分析</h3><p><code>Channel</code> 类是一个重要的封装类，用于将文件描述符与其对应的事件处理器绑定在一起。它的主要作用是：</p><ol><li><p><strong>管理文件描述符的事件</strong>：如读事件、写事件和连接事件。</p></li><li><p><strong>绑定事件处理函数</strong>：为每个文件描述符注册相应的事件处理函数。</p></li><li><p><strong>与<code>EventLoop</code>协同工作</strong>：在事件发生时，调用相应的处理函数。</p></li></ol><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p><code>Channel</code> 类在项目中主要负责文件描述符的事件管理和处理。它将文件描述符与事件处理函数关联起来，并在事件发生时调用相应的处理函数。<code>Channel</code> 类与<code>EventLoop</code>和<code>Epoll</code>协同工作，形成事件驱动的框架。<code>EventLoop</code> 负责事件循环和事件调度，<code>Epoll</code> 负责高效地监视文件描述符上的事件，而<code>Channel</code> 则负责将文件描述符与事件处理函数绑定，并在事件发生时调用处理函数。</p><p><code>EPOLLIN</code> 表示读事件，即有数据可读；<code>EPOLLET</code> 表示边缘触发模式。边缘触发模式可以减少不必要的事件通知，提高性能。在高并发服务器中，边缘触发模式可以减少系统调用次数，提升效率。</p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><code>Channel</code> 类是事件驱动框架中的核心组件之一，它将文件描述符与事件处理函数绑定，并在事件发生时调用相应的处理函数。通过与<code>EventLoop</code>和<code>Epoll</code>协同工作，<code>Channel</code> 实现了高效的事件管理和处理。</p><h3 id="Epoll类分析-poller"><a href="#Epoll类分析-poller" class="headerlink" title="Epoll类分析(poller)"></a>Epoll类分析(poller)</h3><p><code>Epoll</code> 类是基于 Linux epoll 接口实现的 I&#x2F;O 多路复用管理器。</p><p>它的主要功能是管理多个文件描述符上的 I&#x2F;O 事件，并将这些事件分发给相应的处理函数。通过使用 <code>epoll</code> 提供的高效事件通知机制，<code>Epoll</code> 类可以在高并发场景下有效地管理和调度大量 I&#x2F;O 请求。</p><h4 id="具体功能"><a href="#具体功能" class="headerlink" title="具体功能"></a>具体功能</h4><ol><li><p><strong>文件描述符管理</strong>：</p><ul><li><code>epoll_add(SP_Channel request, int timeout)</code>：将新的文件描述符添加到 <code>epoll</code> 监视列表中，并设置超时时间。</li><li><code>epoll_mod(SP_Channel request, int timeout)</code>：修改已存在的文件描述符的事件类型。</li><li><code>epoll_del(SP_Channel request)</code>：从 <code>epoll</code> 监视列表中删除文件描述符。</li></ul></li><li><p><strong>事件循环</strong>：</p><ul><li><code>poll()</code>：等待文件描述符上有事件发生，返回有事件的描述符列表。</li></ul></li><li><p><strong>事件处理</strong>：</p><ul><li><code>getEventsRequest(int events_num)</code>：根据事件数量，将发生事件的描述符转换为 <code>Channel</code> 对象，并返回待处理的请求数据。</li></ul></li><li><p><strong>定时器管理</strong>：</p><ul><li><code>add_timer(SP_Channel request_data, int timeout)</code>：为文件描述符设置定时器，超时后自动处理。</li><li><code>handleExpired()</code>：处理所有过期的定时器事件。</li></ul></li></ol><h4 id="Epoll类在EventLoop中的作用"><a href="#Epoll类在EventLoop中的作用" class="headerlink" title="Epoll类在EventLoop中的作用"></a>Epoll类在EventLoop中的作用</h4><p><code>Epoll</code> 类在 <code>EventLoop</code> 中主要承担以下角色：</p><ul><li><strong>事件循环管理器</strong>：负责等待和分发 I&#x2F;O 事件。</li><li><strong>事件分发器</strong>：将 <code>epoll</code> 返回的事件分发给相应的 <code>Channel</code> 进行处理。</li><li><strong>定时器管理</strong>：处理超时事件，确保事件及时处理。</li></ul><p><code>EventLoop</code> 使用 <code>Epoll</code> 类实例 <code>poller_</code> 管理 I&#x2F;O 事件。<code>addToPoller()</code>、<code>updatePoller()</code> 和 <code>removeFromPoller()</code> 方法分别用于向 epoll 中添加、更新和移除事件。<code>loop()</code> 方法中调用 <code>poller_-&gt;poll()</code> 获取触发的事件并处理，每个事件通过相应的 <code>Channel</code> 对象调用其绑定的事件处理函数。</p><h2 id="定时器（Timer类分析，如上）"><a href="#定时器（Timer类分析，如上）" class="headerlink" title="定时器（Timer类分析，如上）"></a>定时器（Timer类分析，如上）</h2><p><code>TimerNode</code> 和 <code>TimerManager</code> 类共同实现了一个定时器机制，用于管理 HTTP 请求的超时处理。</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol><li><p><strong>管理HTTP请求的生命周期</strong>：通过定时器管理 HTTP 请求的有效期，当请求超时未处理时自动清理。</p></li><li><p><strong>延迟删除机制</strong>：通过延迟删除机制优化性能，避免频繁创建和销毁 HTTP 请求对象。</p></li><li><p><strong>高效的时间管理</strong>：使用优先队列（小根堆）管理定时器节点，确保高效处理定时事件。</p></li></ol><h2 id="线程池-1"><a href="#线程池-1" class="headerlink" title="线程池"></a>线程池</h2><p>线程池的主要目的是提高并发性和效率，通过使用多个线程来执行任务，而不是依赖单个线程来处理所有任务。</p><p>线程池实现了基本的线程管理和任务队列管理功能，能够创建、添加任务、销毁和执行任务。通过使用互斥锁和条件变量，确保线程之间的同步和任务的安全分发。</p><h3 id="EventLoopThreadPool类分析"><a href="#EventLoopThreadPool类分析" class="headerlink" title="EventLoopThreadPool类分析"></a>EventLoopThreadPool类分析</h3><p>事件循环线程池 (<code>EventLoopThreadPool</code>)，用于管理和分配多个事件循环线程 (<code>EventLoopThread</code>)。它的主要功能是创建、启动和管理这些事件循环线程，以实现负载均衡和高效的事件处理。</p><p>管理一组线程，以便在并发执行任务时提高效率。线程池的设计可以避免频繁创建和销毁线程的开销，并且可以通过复用线程来处理多个任务。</p><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><ol><li><strong>提高并发处理能力</strong>：线程池能够管理多个线程并行执行任务，提高系统的并发处理能力。</li><li><strong>减少线程创建和销毁的开销</strong>：通过复用线程，减少了频繁创建和销毁线程的开销。</li><li><strong>任务队列管理</strong>：任务可以按需添加到队列中，线程池中的线程会自动从队列中获取任务并执行，简化了任务的调度和管理。</li><li><strong>线程安全</strong>：使用互斥锁和条件变量确保任务队列操作的线程安全，避免竞争条件。</li></ol><h4 id="启动线程池"><a href="#启动线程池" class="headerlink" title="启动线程池"></a>启动线程池</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EventLoopThreadPool::start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  baseLoop_-&gt;<span class="built_in">assertInLoopThread</span>(); <span class="comment">// 确认该函数在主线程中调用</span></span><br><span class="line">  started_ = <span class="literal">true</span>; <span class="comment">// 标记线程池已启动</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numThreads_; ++i) &#123;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;EventLoopThread&gt; <span class="title">t</span><span class="params">(<span class="keyword">new</span> EventLoopThread())</span></span>; <span class="comment">// 创建新的 EventLoopThread 对象</span></span><br><span class="line">    threads_.<span class="built_in">push_back</span>(t); <span class="comment">// 将线程对象存储到 threads_ 中</span></span><br><span class="line">    loops_.<span class="built_in">push_back</span>(t-&gt;<span class="built_in">startLoop</span>()); <span class="comment">// 启动线程并获取其 EventLoop 对象，将其存储到 loops_ 中</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>确保在主线程中调用。</li><li>标记线程池已启动。</li><li>创建指定数量的 <code>EventLoopThread</code> 线程，启动每个线程并将其 <code>EventLoop</code> 对象存储在 <code>loops_</code> 数组中。</li></ul><h4 id="轮询的方式（round-robin）"><a href="#轮询的方式（round-robin）" class="headerlink" title="轮询的方式（round-robin）"></a>轮询的方式（round-robin）</h4><p>轮询（Round-Robin）是一种常见的调度算法，用于均匀地分配任务或资源。</p><h5 id="轮询的优势"><a href="#轮询的优势" class="headerlink" title="轮询的优势"></a>轮询的优势</h5><ul><li><strong>负载均衡</strong>：通过轮询方式可以确保任务均匀分配到每个线程，避免某个线程过载。</li><li><strong>简单实现</strong>：轮询算法简单且容易实现，不需要复杂的逻辑。</li><li><strong>公平性</strong>：每个 <code>EventLoop</code> 都有平等的机会处理任务，确保资源利用均衡。</li></ul><p>轮询调度是一种简单的调度算法，通过循环方式均匀地分配任务或资源，确保每个任务或资源有平等的机会被处理。在 <code>getNextLoop()</code> 方法中，它用于依次选择 <code>EventLoop</code>，以实现负载均衡。</p><p>使用轮询调度可以确保任务均匀分配到每个 <code>EventLoop</code>，避免某个线程过载，保持系统负载均衡和资源利用均衡。</p><p><code>getNextLoop()</code> 方法通过维护一个索引 <code>next_</code>，每次调用时返回 <code>loops_</code> 中的当前 <code>EventLoop</code>，并更新 <code>next_</code> 指向下一个 <code>EventLoop</code>。当 <code>next_</code> 达到 <code>numThreads_</code> 时，重置为 <code>0</code>，从而实现循环。</p><p>优势是简单易实现，确保任务均匀分配；劣势是在负载不均的情况下，可能无法最优化性能，因为它不考虑每个任务的实际负载和处理时间。</p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>这个 <code>EventLoopThreadPool</code> 类的主要功能是：</p><ol><li>管理多个 <code>EventLoopThread</code> 对象。</li><li>启动这些线程并获取它们对应的 <code>EventLoop</code> 对象。</li><li>通过 <code>getNextLoop</code> 方法实现负载均衡，轮询地返回下一个 <code>EventLoop</code> 对象，用于处理新事件。</li></ol><p>这在多线程事件驱动编程中，可以高效地分发和处理事件，提升系统的并发性能。</p><h3 id="EventLoopThread类分析"><a href="#EventLoopThread类分析" class="headerlink" title="EventLoopThread类分析"></a>EventLoopThread类分析</h3><p><code>EventLoopThread</code> 类管理一个单独的线程，在该线程中运行一个 <code>EventLoop</code> 对象。它提供了启动线程和获取 <code>EventLoop</code> 对象的方法，以便在多线程环境中处理事件。<br>其主要功能是启动一个新的线程，在该线程中运行事件循环，并提供线程安全的机制以确保事件循环正确启动。</p><p><code>EventLoopThread</code> 类的主要功能是：</p><ol><li><p>创建一个新的事件循环线程并在该线程中运行事件循环。</p></li><li><p>提供 <code>startLoop</code> 方法启动线程并获取事件循环对象，确保事件循环正确启动。</p></li><li><p>使用互斥锁和条件变量实现线程同步，确保在事件循环对象 <code>loop_</code> 初始化完成前，调用线程处于等待状态。</p></li><li><p>在析构函数中安全退出事件循环并等待线程结束。</p></li></ol><h2 id="Server类分析与总结"><a href="#Server类分析与总结" class="headerlink" title="Server类分析与总结"></a>Server类分析与总结</h2><p><code>Server</code> 类是一个简单的 HTTP 服务器，它的主要功能是接受新连接并处理请求。</p><h3 id="Server-类的主要功能和作用是："><a href="#Server-类的主要功能和作用是：" class="headerlink" title="Server 类的主要功能和作用是："></a><code>Server</code> 类的主要功能和作用是：</h3><ol><li><p><strong>初始化服务器</strong>：创建监听套接字，设置为非阻塞模式，处理 SIGPIPE 信号。</p></li><li><p><strong>启动服务器</strong>：启动线程池，设置监听 Channel 的事件和处理函数，并将 Channel 添加到事件循环中。</p></li><li><p><strong>处理新连接</strong>：接受新连接，设置新连接的属性，将新连接交给线程池中的某个事件循环进行处理。</p></li></ol><h3 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h3><ol><li><strong>接受新连接</strong>：当有新连接到来时，调用 <code>accept</code> 函数接受连接。</li><li><strong>获取线程池中的下一个事件循环</strong>：从线程池中获取一个事件循环，用于处理该新连接。</li><li><strong>设置新连接属性</strong>：将新连接的文件描述符设置为非阻塞模式，并禁用 Nagle 算法。</li><li><strong>创建 <code>HttpData</code> 对象</strong>：为新连接创建一个 <code>HttpData</code> 对象，并将其与 <code>Channel</code> 关联。</li><li><strong>添加到事件循环</strong>：将 <code>HttpData</code> 对象的 <code>newEvent</code> 方法添加到事件循环的任务队列中，等待异步处理。</li></ol><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>Server&#96; 类是一个简单的 HTTP 服务器，主要负责初始化服务器，启动线程池，接受新连接，并将新连接交给线程池中的某个事件循环进行处理。</p><h2 id="HttpData"><a href="#HttpData" class="headerlink" title="HttpData"></a>HttpData</h2><ol><li><p><strong>封装连接处理逻辑</strong>：<code>HttpData</code> 对象封装了与 HTTP 请求和响应相关的所有逻辑。这样可以将连接处理的各个部分（如读取请求、解析请求、生成响应、发送响应等）组织在一起，使代码更清晰和模块化。</p></li><li><p><strong>管理连接状态</strong>：每个连接都有其状态（如读取请求、发送响应等），<code>HttpData</code> 对象可以维护和管理这些状态。同时，<code>HttpData</code> 对象还可以保存一些与连接相关的资源，如文件描述符、缓冲区等。</p></li><li><p>**关联 <code>Channel</code>**：每个连接都需要一个 <code>Channel</code> 来监控其 I&#x2F;O 事件，<code>HttpData</code> 对象可以持有并管理这个 <code>Channel</code>。通过 <code>Channel</code>，可以方便地注册和处理该连接的读写事件。</p></li><li><p><strong>生命周期管理</strong>：通过智能指针来管理 <code>HttpData</code> 对象，可以方便地控制其生命周期，避免内存泄漏。当连接关闭或超时后，<code>HttpData</code> 对象会自动销毁，释放相关资源。</p></li><li><p><strong>异步任务处理</strong>：在多线程环境中，<code>HttpData</code> 对象可以被安全地传递给其他线程处理。在 <code>Server::handNewConn</code> 中，将 <code>HttpData</code> 对象添加到线程池中的事件循环，可以实现异步处理，从而提高服务器的并发能力。</p></li></ol><h2 id="Nagle-算法"><a href="#Nagle-算法" class="headerlink" title="Nagle 算法"></a>Nagle 算法</h2><p>禁用 Nagle 算法的目的是为了降低网络延迟，提高实时通信的效率。以下是详细解释：</p><h3 id="什么是-Nagle-算法"><a href="#什么是-Nagle-算法" class="headerlink" title="什么是 Nagle 算法"></a>什么是 Nagle 算法</h3><p>Nagle 算法是一种用于优化网络数据传输的算法，主要用于减少小包传输的数量，从而减少网络拥塞。它的工作原理是，将小数据包积累起来，直到有足够多的数据或者收到一个确认包（ACK）后再进行发送。</p><h3 id="禁用-Nagle-算法的原因"><a href="#禁用-Nagle-算法的原因" class="headerlink" title="禁用 Nagle 算法的原因"></a>禁用 Nagle 算法的原因</h3><p>在某些网络应用中，特别是实时性要求高的应用，禁用 Nagle 算法可以带来以下好处：</p><ol><li><p><strong>降低延迟</strong>：</p><ul><li>实时通信应用（如在线游戏、即时通讯、视频会议等）通常需要尽快将数据发送给对方，而不是等待数据积累到一定量再发送。如果启用了 Nagle 算法，数据包可能会被延迟发送，从而增加网络延迟。</li></ul></li><li><p><strong>提高数据传输的实时性</strong>：</p><ul><li>对于需要实时响应的应用，禁用 Nagle 算法可以确保数据包立即发送，提高数据传输的实时性。这样可以使客户端和服务器之间的交互更加迅速，响应更加及时。</li></ul></li><li><p><strong>改善小包传输性能</strong>：</p><ul><li>某些应用场景下，数据包通常较小且频繁发送。在这种情况下，禁用 Nagle 算法可以避免数据包在发送缓冲区中积累，从而提高传输效率和响应速度。</li></ul></li></ol><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>禁用 Nagle 算法通常适用于以下场景：</p><ul><li><strong>在线游戏</strong>：游戏中的动作和状态变化需要尽快传递给服务器和其他玩家，以保持游戏的同步性和流畅性。</li><li><strong>即时通讯</strong>：聊天消息和状态更新需要立即发送和接收，以提供良好的用户体验。</li><li><strong>实时音视频通信</strong>：语音和视频数据需要以最低延迟发送，以保证通信的实时性和清晰度。</li></ul><h2 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h2><p>条件变量（Condition Variable）是用于多线程编程中的一种同步原语，它允许线程在某个条件不满足时进入等待状态，并在条件满足时被唤醒，从而实现线程之间的协调和同步。条件变量通常与互斥锁（Mutex）一起使用，以保证对共享资源的访问是线程安全的。</p><h3 id="条件变量的基本操作"><a href="#条件变量的基本操作" class="headerlink" title="条件变量的基本操作"></a>条件变量的基本操作</h3><p>条件变量主要有以下几个基本操作：</p><ol><li><p><strong>等待操作（Wait）</strong>：</p><ul><li>当某个条件不满足时，线程可以调用条件变量的等待操作进入等待状态。等待操作通常是原子的，即线程在释放互斥锁并进入等待状态的过程是不可中断的。</li><li>例如：<code>pthread_cond_wait(&amp;cond, &amp;mutex);</code></li><li>在调用<code>pthread_cond_wait</code>之前，线程必须持有与条件变量相关联的互斥锁。调用<code>pthread_cond_wait</code>后，线程会释放互斥锁并进入等待状态，直到被唤醒。</li></ul></li><li><p><strong>唤醒操作（Signal&#x2F;Broadcast）</strong>：</p><ul><li>当条件满足时，线程可以调用条件变量的唤醒操作唤醒一个或多个等待该条件的线程。</li><li>例如：<code>pthread_cond_signal(&amp;cond);</code>（唤醒一个等待线程）</li><li>例如：<code>pthread_cond_broadcast(&amp;cond);</code>（唤醒所有等待线程）</li><li>唤醒操作会通知等待在条件变量上的一个或多个线程，通知它们条件已经满足，可以继续执行。</li></ul></li></ol><h4 id="条件变量的使用场景"><a href="#条件变量的使用场景" class="headerlink" title="条件变量的使用场景"></a>条件变量的使用场景</h4><p>条件变量通常用于以下场景：</p><ol><li><p><strong>生产者-消费者模型</strong>：</p><ul><li>在生产者-消费者模型中，生产者线程向缓冲区添加数据，消费者线程从缓冲区取数据。条件变量可以用于实现生产者和消费者之间的同步。</li><li>当缓冲区为空时，消费者线程进入等待状态；当缓冲区不为空时，生产者线程通知等待的消费者线程。</li></ul></li><li><p><strong>任务队列</strong>：</p><ul><li>在线程池或任务队列中，工作线程从任务队列中取任务执行。当任务队列为空时，工作线程进入等待状态；当有新任务添加到队列时，通知等待的工作线程继续执行。</li></ul></li><li><p><strong>事件等待</strong>：</p><ul><li>当某个事件需要等待另一个事件的完成时，可以使用条件变量。例如，一个线程等待另一个线程完成初始化工作后再继续执行。</li></ul></li></ol><h2 id="线程复用（如上，线程池）"><a href="#线程复用（如上，线程池）" class="headerlink" title="线程复用（如上，线程池）"></a>线程复用（如上，线程池）</h2><p>线程池中的线程复用是通过创建一组线程并将它们保持在等待状态，当有任务需要执行时，线程池将任务分配给这些线程来执行。线程完成任务后，不会终止，而是继续等待下一个任务，这样就实现了线程的复用。</p><p>以下是线程池中线程复用的实现机制：</p><h4 id="线程池的核心组成部分"><a href="#线程池的核心组成部分" class="headerlink" title="线程池的核心组成部分"></a>线程池的核心组成部分</h4><ol><li><p><strong>线程池管理器</strong>：</p><ul><li>负责创建和管理线程池中的线程。</li><li>维护一个任务队列，当有新任务提交时，将任务放入队列中。</li></ul></li><li><p><strong>工作线程</strong>：</p><ul><li>线程池中的线程通常称为工作线程。</li><li>工作线程在创建后进入一个循环，不断从任务队列中取任务执行。</li></ul></li><li><p><strong>任务队列</strong>：</p><ul><li>存储需要执行的任务。</li><li>任务队列通常是一个线程安全的队列，使用互斥锁和条件变量来实现线程安全的访问。</li></ul></li></ol><h4 id="线程池中的线程复用过程"><a href="#线程池中的线程复用过程" class="headerlink" title="线程池中的线程复用过程"></a>线程池中的线程复用过程</h4><ol><li><p><strong>线程池初始化</strong>：</p><ul><li>创建指定数量的工作线程，并将它们放入等待状态。</li></ul></li><li><p><strong>提交任务</strong>：</p><ul><li>当有新任务提交时，将任务放入任务队列中，并通知等待的工作线程有新任务可执行。</li></ul></li><li><p><strong>工作线程执行任务</strong>：</p><ul><li>工作线程从任务队列中取任务执行，执行完成后继续等待下一个任务。</li></ul></li><li><p><strong>线程复用</strong>：</p><ul><li>线程完成任务后不退出，而是继续等待任务队列中的新任务，这样实现了线程的复用。</li></ul></li></ol><h1 id="客户端分析-HTTPClient"><a href="#客户端分析-HTTPClient" class="headerlink" title="客户端分析 HTTPClient"></a>客户端分析 HTTPClient</h1><p>一个简单的客户端程序，用于向服务器发送 HTTP 请求并接收响应。</p><ol><li><strong>创建套接字并连接到服务器</strong>：程序使用不同的 HTTP 请求数据与服务器进行通信。</li><li><strong>非阻塞套接字</strong>：通过设置套接字为非阻塞模式，避免读写操作阻塞程序的执行。</li><li><strong>发送 HTTP 请求</strong>：程序分别发送三种不同的 HTTP 请求数据，观察服务器的响应。</li><li><strong>接收服务器响应</strong>：读取服务器返回的数据并打印输出。</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="argc-参数-和-argv-参数"><a href="#argc-参数-和-argv-参数" class="headerlink" title="argc 参数 和 argv 参数"></a>argc 参数 和 argv 参数</h2><p>在C&#x2F;C++程序中，main函数是程序的入口点，int main(int argc, char *argv[]) 是其标准签名之一，其中包含两个参数：argc 和 argv。</p><p>argc 参数<br>argc 是一个整数，表示命令行参数的个数。argc 的值至少为1，因为第一个参数总是程序的名称。</p><p>argv 参数<br>argv 是一个指向字符指针的指针数组（通常解释为字符串数组）。它包含了命令行输入的参数，每个参数是一个C风格的字符串。argv[0] 是程序的名称或路径，而 argv[1] 到 argv[argc-1] 是命令行传递的其他参数。</p><h2 id="选项字符串的语法"><a href="#选项字符串的语法" class="headerlink" title="选项字符串的语法"></a>选项字符串的语法</h2><p>选项字符串中的每个字符表示一个选项。如果一个字符后跟一个冒号（:），则表示该选项需要一个参数。如果没有冒号，则表示该选项不需要参数。</p><p>const char *str &#x3D; “t:l:p:”; 的含义<br>在这句代码中，选项字符串 str 被设置为 “t:l:p:”，这意味着 getopt 函数将会解析三个选项：</p><p>t：需要一个参数。<br>l：需要一个参数。<br>p：需要一个参数。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/posts/32d9f9cf.html"/>
      <url>/posts/32d9f9cf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT——学习</title>
      <link href="/posts/abd0a875.html"/>
      <url>/posts/abd0a875.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><a href="https://www.bilibili.com/video/BV1g4411H78N/?spm_id_from=333.337.search-card.all.click&vd_source=1c8b0af391894cdb44e3942161a1de4f">学习视频链接</a></p><p>完整项目链接：<a href="https://github.com/lejunXTS/coinfilp/tree/master">https://github.com/lejunXTS/coinfilp/tree/master</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="什么是QT"><a href="#什么是QT" class="headerlink" title="什么是QT"></a>什么是QT</h2><p>QT是一个<strong>跨平台</strong>的C++<strong>图像用户界面应用程序框架</strong></p><p>为应用程序开发者提供建立艺术级图形界面所需的所有功能，它是完全面向对象的，很容易扩展，并且允许真正的组件编程</p><h2 id="Qt的发展史"><a href="#Qt的发展史" class="headerlink" title="Qt的发展史"></a>Qt的发展史</h2><p>1991年 Qt最早由奇趣科技开发</p><p>1996年 进入商业领域，它也是目前流行的Linux桌面环境KDE的基础</p><p>2008年 奇趣科技被诺基亚公司收购，Qt称为诺基亚旗下的编程语言</p><p>2012年 Qt又被Digia公司收购</p><p>2014年4月 跨平台的集成开发环境Qt Creator3.1.0发布，同年5月20日配发了Qt5.3正式版，至此Qt实现了对iOS、Android、WP等各平台的全面支持</p><p><strong>当前Qt最新版本为 Qt 6</strong></p><h2 id="支持的平台"><a href="#支持的平台" class="headerlink" title="支持的平台"></a>支持的平台</h2><p>Windows – XP、Vista、Win7、Win8、Win2008、Win10、Win11</p><p>Uinux&#x2F;X11 – Linux、Sun Solaris、HP-UX、Compaq Tru64 UNIX、IBM AIX、SGI IRIX、FreeBSD、BSD&#x2F;OS、和其他很多X11平台</p><p>Macintosh – Mac OS X</p><p>Embedded – 有帧缓冲支持的嵌入式Linux平台，Windows CE</p><h2 id="Qt版本"><a href="#Qt版本" class="headerlink" title="Qt版本"></a>Qt版本</h2><p>Qt按照不同的版本发行，分为商业版和开源版</p><p>商业版:</p><p>为商业软件提供开发，他们提供传统商业软件发行版，并且提供在商业有效期内的免费升级和技术支持服务。</p><p>开源的LGPL版本:</p><p>为了开发自有而设计的开放源码软件，它提供了和商业版本同样的功能，在GNU通用公共许可下，它是免费的。</p><h2 id="QT的优点"><a href="#QT的优点" class="headerlink" title="QT的优点"></a>QT的优点</h2><p>跨平台，几乎支持所有的平台</p><p>接口简单，容易上手</p><p>一定程度上简化了内存回收机制 </p><p>开发效率高，能够快速的构建应用程序</p><p>有很好的社区氛围</p><p>可以进行嵌入式开发</p><h2 id="成功案例"><a href="#成功案例" class="headerlink" title="成功案例"></a>成功案例</h2><p>Linux桌面环境KDE</p><p>WPS Office 办公软件</p><p>Skype 网络电话</p><p>Google Earth 谷歌地图</p><p>VLC多媒体播放器</p><p>VirtualBox虚拟机软件</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>Qt中的构建⼯具有三种：<strong>qmake CMake Qbs</strong></p><p>qmake：qmake是⼀个构建⼯具（build tool），⽤于⾃动⽣成makefile⽂件。qmake⽀持跨平台构建。qmake编辑的是⼀个后缀名为.pro的⽂件。</p><p>CMake：CMake是⼀个跨平台的构建⼯具。CMake本⾝不是⼀个编译器，其实就是⽣成⼀个让编译器能读懂编译流程的⽂件⼯具。让CMake⾃动⽣成构建系统，例如Makefile和Visual Studio项⽬⽂件。CMake是⼀个第三⽅⼯具，有⾃⼰的⽂档。</p><p>Qbs：Qbs（Qt Build Suite：Qt构建套件）同qmake、CMake⼀样都是构建⼯具。Qbs号称是新⼀代的构建⼯具，⽐qmake编译速度更快。Qbs没有绑定Qt版本，它从项⽬⽂件的⾼级项⽬描述中⽣成⼀个正确的依赖表。⽽传统的MakeFile⽣成⼯具如qmake和CMake，其在⽣成MakeFile⽂件后将实际的命令交给Make⼯具去执⾏。</p><p><strong>基类选择</strong></p><p>QWidget（父类）——最简单、最基本的窗体程序，里面可以放置多个控件实现程序功能</p><p>QMainWindow（子类）——主窗口类，一般用于较为复杂的应用程序，除了中央客户区界面，还包括菜单栏、工具栏、状态栏以及多个可停靠的工具对话框等</p><p>QDialog（子类）——基于对话框的程序，对话框一般用于弹窗，也可以用于主界面显示，对话框是从QWidget继承而来，并丰富了一些功能，如模态显示和返回值等</p><p><strong>版本控制系统：</strong></p><p>svn  vss  git</p><h1 id="创建QT项目"><a href="#创建QT项目" class="headerlink" title="创建QT项目"></a>创建QT项目</h1><h2 id="第一个QT项目"><a href="#第一个QT项目" class="headerlink" title="第一个QT项目"></a>第一个QT项目</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span>  <span class="comment">//包含一个应用程序类的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main程序入口  argc 命令行变量的数量  argv 命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//a应用程序对象，在qt中，应用程序对象有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">//窗口对象  myWidget的父类——&gt;QWidget</span></span><br><span class="line">    myWidget w;</span><br><span class="line">    <span class="comment">//调用show方法  窗口对象默认不会显示，必须要调用show方法显示窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="comment">//让应用程序对象进入消息循环</span></span><br><span class="line">    <span class="comment">//让代码阻塞到这行</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/1.png"></p><p>Qt系统提供的标准类名声明头文件没有.h后缀</p><p>Qt一个类对应一个头文件，类名就是头文件名</p><p>QApplication应用程序类：</p><p>管理图形用户界面应用程序的控制流和主要设置。</p><p>是Qt的整个后台管理的命脉它包含主事件循环，在其中来自窗口系统和其它资源的所有事件处理和调度。它也处理应用程序的初始化和结束，并且提供对话管理。</p><p>对于任何一个使用Qt的图形用户界面应用程序，都正好存在一个QApplication对象，而不论这个应用程序在同一时间内是不是有0、1、2或更多个窗口。</p><p>a.exec()<br>程序进入消息循环，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYWIDGET_H <span class="comment">//防止头文件重复包含</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span><span class="comment">//包含QWidget 窗口类</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//Q_OBJECT宏，允许类中使用信号和槽的机制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">myWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);<span class="comment">//构造函数</span></span><br><span class="line">    ~<span class="built_in">myWidget</span>();<span class="comment">//析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYWIDGET_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//命名规范</span></span><br><span class="line"><span class="comment">//类名：首字母大写，单词和单词之间首字母大写（大驼峰）</span></span><br><span class="line"><span class="comment">//函数名 变量名称，首字母小写，单词和单词之间字母大写（小驼峰）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//快捷键</span></span><br><span class="line"><span class="comment">//注释  ctrl+/</span></span><br><span class="line"><span class="comment">//运行  ctrl+r</span></span><br><span class="line"><span class="comment">//编译  ctrl+b</span></span><br><span class="line"><span class="comment">//字体缩放 Ctrl+鼠标滚轮</span></span><br><span class="line"><span class="comment">//查找 Ctrl+f</span></span><br><span class="line"><span class="comment">//整行移动  Ctrl+shift+上或者下</span></span><br><span class="line"><span class="comment">//帮助文档 F1</span></span><br><span class="line"><span class="comment">//自动对齐  Ctrl+i</span></span><br><span class="line"><span class="comment">//同名之间的.h和.cpp切换  F4   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)<span class="comment">//初始化列表</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">myWidget::~<span class="built_in">myWidget</span>() &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>.pro 文件介绍</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//QT包含的模块</span></span><br><span class="line">QT       += core gui</span><br><span class="line"><span class="comment">//大于4版本以上 包含widget模块</span></span><br><span class="line"><span class="built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets</span><br><span class="line"><span class="comment">//这一行指定了C++标准为C++17，用于告诉编译器使用C++17标准编译代码</span></span><br><span class="line">CONFIG += c++<span class="number">17</span></span><br><span class="line"></span><br><span class="line"># You can make your code fail to compile <span class="keyword">if</span> it uses deprecated APIs.</span><br><span class="line"># In order to <span class="keyword">do</span> so, uncomment the following line.</span><br><span class="line">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=<span class="number">0x060000</span>    <span class="meta"># disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"><span class="comment">//源文件</span></span><br><span class="line">SOURCES += \</span><br><span class="line">    main.cpp \</span><br><span class="line">    mywidget.cpp</span><br><span class="line"><span class="comment">//头文件</span></span><br><span class="line">HEADERS += \</span><br><span class="line">    mywidget.h</span><br><span class="line"><span class="comment">//项目的部署规则，根据目标平台将可执行文件安装到不同的目录。</span></span><br><span class="line"># Default rules <span class="keyword">for</span> deployment.</span><br><span class="line">qnx: target.path = /tmp/$$&#123;TARGET&#125;/bin</span><br><span class="line"><span class="keyword">else</span>: unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin</span><br><span class="line">!<span class="built_in">isEmpty</span>(target.path): INSTALLS += target</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按钮控件的常用API"><a href="#按钮控件的常用API" class="headerlink" title="按钮控件的常用API"></a>按钮控件的常用API</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)<span class="comment">//初始化列表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建一个按钮</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    <span class="comment">//btn-&gt;show();//show以顶层方式单出窗口控件</span></span><br><span class="line">    <span class="comment">//让btn对象依赖在myWidget窗口中</span></span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//显示文本</span></span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;the first button&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建第二个按钮  按照控件的大小创建窗口</span></span><br><span class="line">    QPushButton * btn2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;the second button&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动btn2按钮</span></span><br><span class="line">    btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //重置按钮大小</span></span><br><span class="line">    <span class="comment">// btn2-&gt;resize(60,60);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置固定窗口大小</span></span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置窗口标题</span></span><br><span class="line">    <span class="built_in">setWindowTitle</span>(<span class="string">&quot;the first window&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/2.png"></p><h2 id="对象树"><a href="#对象树" class="headerlink" title="对象树"></a>对象树</h2><p>当创建的对象在堆区的时候，如果指定的父类是QObject派生下来的类或者QObject子类派生下来的类，可以不用管理释放的操作，对象会放入到对象树中。</p><p>一定的程度上简化了内存回收机制</p><h2 id="窗口坐标体系"><a href="#窗口坐标体系" class="headerlink" title="窗口坐标体系"></a>窗口坐标体系</h2><p>坐标体系：</p><p>以左上角为原点（0,0），X向右增加，Y向下增加</p><p>对于嵌套窗口，其坐标是相对于父窗口来说的</p><h1 id="信号和槽机制"><a href="#信号和槽机制" class="headerlink" title="信号和槽机制"></a>信号和槽机制</h1><h2 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h2><p>connect（信号的发送者，发送的具体信号，信号的接受者，信号的处理（槽函数））</p><p>信号槽的优点：松散耦合，信号发送端和接收端本身是没有关联的，通过connect连接将两端耦合在一起</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个自己的按钮对象</span></span><br><span class="line">MyPushButton * myBtn = <span class="keyword">new</span> MyPushButton;</span><br><span class="line">myBtn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;my own button&quot;</span>);</span><br><span class="line"></span><br><span class="line">myBtn-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">myBtn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);<span class="comment">//设置到对象树中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//需求——点击我的按钮，关闭窗口</span></span><br><span class="line"><span class="comment">//参数1 信号的发送者 参数二 发送的信号(函数的地址)</span></span><br><span class="line"><span class="comment">//参数3 信号的接受者 参数4 处理的槽函数(函数的地址)</span></span><br><span class="line"><span class="comment">//connect(myBtn, &amp;MyPushButton::clicked, this, &amp;myWidget::close);</span></span><br><span class="line"><span class="built_in">connect</span>(myBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;QWidget::close);</span><br></pre></td></tr></table></figure><h2 id="自定义信号和槽"><a href="#自定义信号和槽" class="headerlink" title="自定义信号和槽"></a>自定义信号和槽</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TEACHER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Teacher</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">//自定义信号  写到signals下</span></span><br><span class="line">    <span class="comment">//返回值是void  只需要声明  不需要实现</span></span><br><span class="line">    <span class="comment">//可以有参数  可以重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hungry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// TEACHER_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STUDENT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Student</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//早起版本槽函数写在public slots下，5.4版本后写在public或者全局下</span></span><br><span class="line">    <span class="comment">//返回值void 需要声明 需要实现</span></span><br><span class="line">    <span class="comment">//可以有参数 可以重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// STUDENT_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Student::<span class="built_in">Student</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::treat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;please eat teacher&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line"></span><br><span class="line">    Teacher * cc;</span><br><span class="line">    Student * ll;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">classIsOver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Teacher 类 老师类</span></span><br><span class="line"><span class="comment">//Student 类 学生类</span></span><br><span class="line"><span class="comment">//下课后，老师会触发一个信号，饿了，学生相应信号，请客吃饭</span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;cc = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;ll = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老师饿了 学生请老师吃饭</span></span><br><span class="line">    <span class="built_in">connect</span>(cc, &amp;Teacher::hungry, ll, &amp;Student::treat);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用下课函数</span></span><br><span class="line">    <span class="built_in">classIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//下课函数 调用后 触发老师饿了的信号</span></span><br><span class="line">    emit cc-&gt;<span class="built_in">hungry</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Widget w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重载</strong></p><p>当自定义信号和槽出现重载，需要利用函数指针明确指向函数的地址</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hungry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hungry</span><span class="params">(QString foodName)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">(QString foodName)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">emit cc-&gt;<span class="built_in">hungry</span>(<span class="string">&quot;sandwich&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//连接带参数的信号和槽</span></span><br><span class="line"><span class="comment">//指针-&gt;地址</span></span><br><span class="line"><span class="comment">//函数指针-&gt;函数地址</span></span><br><span class="line"><span class="built_in">void</span>(Teacher:: *teacherSignal)(QString) = &amp;Teacher::hungry;</span><br><span class="line"><span class="built_in">void</span>(Student:: *studentSlot)(QString) = &amp;Student::treat;</span><br><span class="line"><span class="built_in">connect</span>(cc, teacherSignal, ll, studentSlot);</span><br><span class="line"></span><br><span class="line"><span class="built_in">classIsOver</span>();</span><br></pre></td></tr></table></figure><p><strong>点击一个下课的按钮再触发下课 &amp; 信号连接信号</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;cc = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;ll = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //老师饿了 学生请老师吃饭</span></span><br><span class="line">    <span class="comment">// connect(cc, &amp;Teacher::hungry, ll, &amp;Student::treat);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //调用下课函数</span></span><br><span class="line">    <span class="comment">// classIsOver();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接带参数的信号和槽</span></span><br><span class="line">    <span class="comment">//指针-&gt;地址</span></span><br><span class="line">    <span class="comment">//函数指针-&gt;函数地址</span></span><br><span class="line">    <span class="built_in">void</span>(Teacher:: *teacherSignal)(QString) = &amp;Teacher::hungry;</span><br><span class="line">    <span class="built_in">void</span>(Student:: *studentSlot)(QString) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(cc, teacherSignal, ll, studentSlot);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//classIsOver();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击一个下课的按钮再触发下课</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;class over&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击按钮出发下课</span></span><br><span class="line">    <span class="comment">//connect(btn, &amp;QPushButton::clicked, this, &amp;Widget::classIsOver);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参信号和槽连接</span></span><br><span class="line">    <span class="built_in">void</span>(Teacher:: *teacherSignal2)(<span class="type">void</span>) = &amp;Teacher::hungry;</span><br><span class="line">    <span class="built_in">void</span>(Student:: *studentSlot2)(<span class="type">void</span>) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(cc, teacherSignal2, ll, studentSlot2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//信号连接信号</span></span><br><span class="line">    <span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, cc, teacherSignal2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//断开信号</span></span><br><span class="line">    <span class="comment">//disconnect(cc, teacherSignal2, ll, studentSlot2)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>QString-&gt;char *  先转成QByteArray (.toUtf8())  再转成char * ()</strong></p><ul><li><p>一个信号可以连接多个槽函数</p></li><li><p>多个信号可以连接同一个槽函数</p></li><li><p>信号和槽函数的参数必须类型一一对应</p></li><li><p>信号和槽的参数个数不需要一致，信号的参数个数可以多于槽函数的参数个数</p></li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//QT4版本以前的信号和槽连接方式</span></span><br><span class="line"><span class="comment">//利用QT4信号槽连接无参版本</span></span><br><span class="line"><span class="comment">//QT4版本底层SIGNAL(&quot;hungry&quot;)  SLOT(&quot;treat&quot;)</span></span><br><span class="line"><span class="built_in">connect</span>(cc, <span class="built_in">SIGNAL</span>(<span class="built_in">hungry</span>()), ll, <span class="built_in">SLOT</span>(<span class="built_in">treat</span>()));</span><br><span class="line"><span class="comment">//QT4版本优点：参数直观   缺点：类型不做检测</span></span><br><span class="line"><span class="comment">//QT5以上版本支持QT4版本写法，反之不支持</span></span><br></pre></td></tr></table></figure><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>[]标识符 匿名函数</p><p>&#x3D; 值传递</p><p>&amp; 引用传递</p><p>() 参数  {}实现体</p><p>mutable 修饰值传递变量，可以修改拷贝出的数据，改变不了本体</p><p>返回值 <a href=""></a>-&gt;int{}</p><p>最常用  <a href="">&#x3D;</a>{}</p><p>C++11中的Lambda表达式(这个再找资料看一下)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用lambda表达式实现点击按钮关闭窗口</span></span><br><span class="line">QPushButton * btn2 = <span class="keyword">new</span> QPushButton;</span><br><span class="line">btn2-&gt;<span class="built_in">setText</span>(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">btn2-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(btn2, &amp;QPushButton::clicked, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">    emit cc-&gt;<span class="built_in">hungry</span>(<span class="string">&quot;sandwich&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//btn2-&gt;setText(&quot;aaa&quot;);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>QMainWindow是一个为用户提供主窗口程序的类，包含一个菜单栏（menu bar）、多个工具栏(tool bars)、多个锚接部件(dock widgets)(浮动窗口)、一个状态栏(status bar)及一个中心部件(central widget)，是许多应用程序的基础，如文本编辑器，图片编辑器等。</p><p><img src="/posts/abd0a875/3.png"></p><h2 id="基础-常用操作"><a href="#基础-常用操作" class="headerlink" title="基础&amp;常用操作"></a>基础&amp;常用操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenuBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QToolBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QStatusBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDockWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTextEdit&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单栏--------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单栏 最多只能有一个</span></span><br><span class="line">    <span class="comment">//菜单栏创建</span></span><br><span class="line">    QMenuBar * bar = <span class="built_in">menuBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将菜单栏放入到 窗口中</span></span><br><span class="line">    <span class="built_in">setMenuBar</span>(bar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单</span></span><br><span class="line">    QMenu * fileMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">    QMenu * editMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单项</span></span><br><span class="line">    QAction * newAction = fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">    <span class="comment">//添加分隔符</span></span><br><span class="line">    fileMenu-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    QAction * openAction = fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏--------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏   可以有多个</span></span><br><span class="line">    QToolBar * toolBar = <span class="keyword">new</span> <span class="built_in">QToolBar</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">addToolBar</span>(Qt::LeftToolBarArea, toolBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后期设置只允许左右停靠</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setAllowedAreas</span>(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置浮动</span></span><br><span class="line">    <span class="comment">//toolBar-&gt;setFloatable(false);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置移动（总开关）</span></span><br><span class="line">    <span class="comment">//toolBar-&gt;setMovable(false);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在工具栏中设置内容</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(newAction);</span><br><span class="line">    <span class="comment">//添加分割线</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(openAction);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏中添加控件</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;aa&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    toolBar-&gt;<span class="built_in">addWidget</span>(btn);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态栏--------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态栏    最多有一个</span></span><br><span class="line">    QStatusBar * stBar = <span class="built_in">statusBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置到窗口中</span></span><br><span class="line">    <span class="built_in">setStatusBar</span>(stBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放标签控件</span></span><br><span class="line">    QLabel * label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    stBar-&gt;<span class="built_in">addWidget</span>(label);</span><br><span class="line"></span><br><span class="line">    QLabel * label2 = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;右侧提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    stBar-&gt;<span class="built_in">addPermanentWidget</span>(label2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//锚接部件--------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//锚接部件 （浮动窗口）  可以有多个</span></span><br><span class="line">    QDockWidget * dockWidget = <span class="keyword">new</span> <span class="built_in">QDockWidget</span>(<span class="string">&quot;浮动&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">addDockWidget</span>(Qt::BottomDockWidgetArea, dockWidget);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置后期停靠区域，只允许上下</span></span><br><span class="line">    dockWidget-&gt;<span class="built_in">setAllowedAreas</span>(Qt::TopDockWidgetArea | Qt::BottomDockWidgetArea);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中心部件--------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置中心部件(核心部件)   只能有一个</span></span><br><span class="line">    QTextEdit * edit = <span class="keyword">new</span> <span class="built_in">QTextEdit</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">setCentralWidget</span>(edit);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/4.png"></p><h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><ol><li><p>将图片文件拷贝到项目文件下</p></li><li><p>创建新文件-&gt;QT-&gt;QT resource file-&gt;给资源文件起名</p></li><li><p>res生成res.qrc</p></li><li><p>open in editor 编辑资源</p></li><li><p>添加前缀 添加文件</p></li><li><p>使用”: + 前缀名 + 文件名”</p></li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ui-&gt;actionnew-&gt;setIcon(QIcon(&quot;D:/喜欢/罗小黑&amp;其他/001VEnKKgy1gsu6mbym6vj60t41dan4j02.jpg&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用添加QT资源    &quot;: + 前缀名 + 文件名&quot;</span></span><br><span class="line">    ui-&gt;actionnew-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/image/001VEnKKgy1gsu6mbym6vj60t41dan4j02.jpg&quot;</span>));</span><br><span class="line">    ui-&gt;actionopen-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/image/005y0Ylbly1hhdrfsc6pbj32p51pinpe.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/5.png"></p><h1 id="对话框QDialog"><a href="#对话框QDialog" class="headerlink" title="对话框QDialog"></a>对话框QDialog</h1><h2 id="自定义对话框"><a href="#自定义对话框" class="headerlink" title="自定义对话框"></a>自定义对话框</h2><p>模态与非模态对话框的创建</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击新建按钮，弹出一个对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew,&amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="comment">//对话框 分类</span></span><br><span class="line">        <span class="comment">//模态对话框（不可以对其他窗口进行操作）  非模态对话框（可以对其他窗口进行操作）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //模态创建  阻塞</span></span><br><span class="line">        <span class="comment">// QDialog dlg(this);</span></span><br><span class="line">        <span class="comment">// dlg.resize(300,200);</span></span><br><span class="line">        <span class="comment">// dlg.exec();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// exec()：是 QDialog 类的成员函数，用于以模态（Modal）的方式显示对话框。</span></span><br><span class="line">        <span class="comment">// 模态对话框会阻塞程序的执行，直到用户关闭对话框并返回结果。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// qDebug() &lt;&lt; &quot;模态对话框弹出了&quot;;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//非模态对话框</span></span><br><span class="line">        QDialog * dlg2 = <span class="keyword">new</span> <span class="built_in">QDialog</span>(<span class="keyword">this</span>);</span><br><span class="line">        dlg2-&gt;<span class="built_in">resize</span>(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">        dlg2-&gt;<span class="built_in">show</span>();</span><br><span class="line">        dlg2-&gt;<span class="built_in">setAttribute</span>(Qt::WA_DeleteOnClose);<span class="comment">//55号属性</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;非模态对话框弹出了&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准对话框"><a href="#标准对话框" class="headerlink" title="标准对话框"></a>标准对话框</h2><p>消息对话框</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击新建按钮，弹出一个对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew,&amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="comment">//对话框 分类</span></span><br><span class="line">        <span class="comment">//模态对话框（不可以对其他窗口进行操作）  非模态对话框（可以对其他窗口进行操作）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //模态创建  阻塞</span></span><br><span class="line">        <span class="comment">// QDialog dlg(this);</span></span><br><span class="line">        <span class="comment">// dlg.resize(300,200);</span></span><br><span class="line">        <span class="comment">// dlg.exec();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// exec()：是 QDialog 类的成员函数，用于以模态（Modal）的方式显示对话框。</span></span><br><span class="line">        <span class="comment">// 模态对话框会阻塞程序的执行，直到用户关闭对话框并返回结果。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// qDebug() &lt;&lt; &quot;模态对话框弹出了&quot;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //非模态对话框</span></span><br><span class="line">        <span class="comment">// QDialog * dlg2 = new QDialog(this);</span></span><br><span class="line">        <span class="comment">// dlg2-&gt;resize(300,200);</span></span><br><span class="line">        <span class="comment">// dlg2-&gt;show();</span></span><br><span class="line">        <span class="comment">// dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose);//55号属性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// qDebug() &lt;&lt; &quot;非模态对话框弹出了&quot;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//消息对话框-----------------------------------------</span></span><br><span class="line">        <span class="comment">// //错误对话框</span></span><br><span class="line">        <span class="comment">// QMessageBox::critical(this, &quot;critical&quot;, &quot;error&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //信息对话框</span></span><br><span class="line">        <span class="comment">// QMessageBox::information(this, &quot;info&quot;, &quot;information&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//提问对话框</span></span><br><span class="line">        <span class="comment">//参数1 父亲 参数2 标题 参数3 提示内容 参数4 按键类型 参数5 默认关联回车按键</span></span><br><span class="line">        <span class="comment">//QMessageBox::question(this, &quot;ques&quot;, &quot;question&quot;);</span></span><br><span class="line">        <span class="comment">//QMessageBox::question(this, &quot;ques&quot;, &quot;question&quot;, QMessageBox::Save | QMessageBox::Cancel);</span></span><br><span class="line">        <span class="comment">//QMessageBox::question(this, &quot;ques&quot;, &quot;question&quot;, QMessageBox::Save | QMessageBox::Cancel, QMessageBox::Cancel);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// if (QMessageBox::Save == QMessageBox::question(this, &quot;ques&quot;, &quot;question&quot;, QMessageBox::Save | QMessageBox::Cancel))</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     qDebug() &lt;&lt; &quot;select save&quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// else</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     qDebug() &lt;&lt; &quot;select cancel&quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//警告对话框</span></span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;war&quot;</span>, <span class="string">&quot;waring&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/6.png"></p><p><img src="/posts/abd0a875/7.png"></p><p><img src="/posts/abd0a875/8.png"></p><p><img src="/posts/abd0a875/9.png"></p><p><img src="/posts/abd0a875/10.png"></p><p><strong>其他标准对话框</strong></p><p>QColorDialog：选择颜色</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//颜色对话框</span></span><br><span class="line"><span class="comment">//QColorDialog::getColor(QColor(255,0,0));</span></span><br><span class="line">QColor color = QColorDialog::<span class="built_in">getColor</span>(<span class="built_in">QColor</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;r = &quot;</span> &lt;&lt; color.<span class="built_in">red</span>() &lt;&lt; <span class="string">&quot;g = &quot;</span> &lt;&lt; color.<span class="built_in">green</span>() &lt;&lt; <span class="string">&quot;b = &quot;</span></span><br><span class="line">         &lt;&lt; color.<span class="built_in">blue</span>();</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/11.png"></p><p>QFileDialog：选择文件或者目录</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件对话框</span></span><br><span class="line"><span class="comment">//参数1 父亲 参数2 标题 参数3 默认打开路径 参数4 过滤文件格式</span></span><br><span class="line"><span class="comment">//返回值是选取的路径</span></span><br><span class="line">QString str = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="string">&quot;open file&quot;</span>, <span class="string">&quot;C:\\Users\\****\\Desktop&quot;</span>, <span class="string">&quot;(*.txt)&quot;</span>);</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; str;</span><br></pre></td></tr></table></figure><p>QFontDialog：选择字体</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字体对话框</span></span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line">QFont font = QFontDialog::<span class="built_in">getFont</span>(&amp;flag, <span class="built_in">QFont</span>(<span class="string">&quot;华文彩云&quot;</span>, <span class="number">36</span>));</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;字体：&quot;</span> &lt;&lt; font.<span class="built_in">family</span>().<span class="built_in">toUtf8</span>().<span class="built_in">data</span>() &lt;&lt; <span class="string">&quot;字号：&quot;</span> &lt;&lt; font.<span class="built_in">pointSize</span>()</span><br><span class="line">          &lt;&lt; <span class="string">&quot;是否加粗：&quot;</span> &lt;&lt; font.<span class="built_in">bold</span>() &lt;&lt; <span class="string">&quot;是否倾斜：&quot;</span> &lt;&lt; font.<span class="built_in">italic</span>();</span><br></pre></td></tr></table></figure><p>QInputDialog：允许用户输入一个值，并将其值返回</p><p>QMessageBox：模态对话框，用于显示信息、询问问题等</p><p>QPageSetupDialog：为打印机提供纸张相关的选项</p><p>QPrintDialog：打印机配置</p><p>QPrintPreviewDialog：打印预览</p><p>QProgressDialog：显示操作过程</p><h1 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h1><h2 id="实现登录窗口"><a href="#实现登录窗口" class="headerlink" title="实现登录窗口"></a>实现登录窗口</h2><p>利用布局方式给窗口进行美化</p><p>选取widget进行布局，水平布局，垂直布局，栅格布局</p><p>给用户名、密码、登录、退出按钮进行布局</p><p>默认窗口和控件之间有6像素，可以调整layoutLeftMargin</p><p>利用弹簧进行布局</p><p>调整固定高度</p><p><img src="/posts/abd0a875/12.png"></p><h1 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h1><h2 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h2><p>QPushButton  常用按钮</p><p>QToolButton  工具按钮 用于显示图片 显示文字</p><p>toolButtonStyle  凸起风格 autoRaise</p><p>radioButton  单选按钮 默认ui-&gt;radioButtonMan-&gt;setChecked(true);</p><p>checkBox  多选按钮 监听状态 </p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置单选按钮 男默认选中</span></span><br><span class="line">ui-&gt;radioButtonMan-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选中女后打印信息</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;radioButtonWoman, &amp;QRadioButton::clicked, [=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;select woman!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多选按钮   2是选中  0是未选中  1是半选</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;checkBox_4, &amp;QCheckBox::stateChanged, [=](<span class="type">int</span> state)&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; state;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/13.png"></p><h2 id="QListWidgetItem-列表容器"><a href="#QListWidgetItem-列表容器" class="headerlink" title="QListWidgetItem 列表容器"></a>QListWidgetItem 列表容器</h2><p>QListWidgetItem * item        一行内容<br>ui-&gt;listWidget-&gt;addItem(item)</p><p>可以利用additems一次性添加整个内容</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// //利用listWidget写诗</span></span><br><span class="line"><span class="comment">// QListWidgetItem * item = new QListWidgetItem(&quot;人生天地间&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //将一行诗放入到listWidget控件中</span></span><br><span class="line"><span class="comment">// ui-&gt;listWidget-&gt;addItem(item);</span></span><br><span class="line"><span class="comment">//设置居中方式</span></span><br><span class="line"><span class="comment">// item-&gt;setTextAlignment(Qt::AlignCenter);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//QStringList  QList&lt;QString&gt;</span></span><br><span class="line">QStringList list;</span><br><span class="line">list &lt;&lt; <span class="string">&quot;人生天地间&quot;</span> &lt;&lt; <span class="string">&quot;忽如远行客&quot;</span> &lt;&lt; <span class="string">&quot;斗酒相娱乐&quot;</span> &lt;&lt; <span class="string">&quot;聊厚不为薄&quot;</span>;</span><br><span class="line">ui-&gt;listWidget-&gt;<span class="built_in">addItems</span>(list);</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/14.png"></p><h2 id="QTreeWidget-树控件"><a href="#QTreeWidget-树控件" class="headerlink" title="QTreeWidget 树控件"></a>QTreeWidget 树控件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//treeWidget控件的使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置水平头</span></span><br><span class="line">ui-&gt;treeWidget-&gt;<span class="built_in">setHeaderLabels</span>(<span class="built_in">QStringList</span>()&lt;&lt; <span class="string">&quot;一&quot;</span> &lt;&lt; <span class="string">&quot;内容&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建顶层节点</span></span><br><span class="line">QTreeWidgetItem * liTtem = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>()&lt;&lt; <span class="string">&quot;一&quot;</span>);</span><br><span class="line">QTreeWidgetItem * liTtem2 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>()&lt;&lt; <span class="string">&quot;二&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载顶层节点</span></span><br><span class="line">ui-&gt;treeWidget-&gt;<span class="built_in">addTopLevelItem</span>(liTtem);</span><br><span class="line">ui-&gt;treeWidget-&gt;<span class="built_in">addTopLevelItem</span>(liTtem2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//追加子节点</span></span><br><span class="line"><span class="comment">//QTreeWidgetItem * ll = new QTreeWidgetItem(QStringList()&lt;&lt; &quot;一帆一江一渔舟&quot;&lt;&lt;&quot;一个渔翁一个钩&quot;);</span></span><br><span class="line"><span class="comment">// QStringList first;</span></span><br><span class="line"><span class="comment">// first &lt;&lt; &quot;一帆一江一渔舟，一个渔翁一个钩&quot;;</span></span><br><span class="line"><span class="comment">// QTreeWidgetItem * ll = new QTreeWidgetItem(first);</span></span><br><span class="line"><span class="comment">// liTtem-&gt;addChild(ll);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// QStringList second;</span></span><br><span class="line"><span class="comment">// second &lt;&lt; &quot;一俯一仰一场笑，一江明月一江秋&quot;;</span></span><br><span class="line"><span class="comment">// QTreeWidgetItem * ll2 = new QTreeWidgetItem(second);</span></span><br><span class="line"><span class="comment">// liTtem2-&gt;addChild(ll2);</span></span><br><span class="line"></span><br><span class="line">QTreeWidgetItem *childItem1 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt;<span class="string">&quot;&quot;</span>&lt;&lt;<span class="string">&quot;一帆一江一渔舟，一个渔翁一个钩&quot;</span>);</span><br><span class="line">QTreeWidgetItem *childItem2 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;&quot;</span>&lt;&lt;<span class="string">&quot;一俯一仰一场笑，一江明月一江秋&quot;</span>);</span><br><span class="line">liTtem-&gt;<span class="built_in">addChild</span>(childItem1);</span><br><span class="line">liTtem2-&gt;<span class="built_in">addChild</span>(childItem2);</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/15.png"></p><h2 id="QTableWidget-表格控件"><a href="#QTableWidget-表格控件" class="headerlink" title="QTableWidget 表格控件"></a>QTableWidget 表格控件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TableWidget 控件</span></span><br><span class="line"><span class="comment">//设置列数</span></span><br><span class="line">ui-&gt;tableWidget-&gt;<span class="built_in">setColumnCount</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置水平表头</span></span><br><span class="line">ui-&gt;tableWidget-&gt;<span class="built_in">setHorizontalHeaderLabels</span>(<span class="built_in">QStringList</span>()&lt;&lt;<span class="string">&quot;姓名&quot;</span>&lt;&lt;<span class="string">&quot;性别&quot;</span>&lt;&lt;<span class="string">&quot;年龄&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置行数</span></span><br><span class="line">ui-&gt;tableWidget-&gt;<span class="built_in">setRowCount</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置正文</span></span><br><span class="line"><span class="comment">//ui-&gt;tableWidget-&gt;setItem(0,0,new QTableWidgetItem(&quot;小李&quot;));</span></span><br><span class="line"></span><br><span class="line">QStringList nameList;</span><br><span class="line">nameList&lt;&lt;<span class="string">&quot;小李&quot;</span>&lt;&lt;<span class="string">&quot;小王&quot;</span>&lt;&lt;<span class="string">&quot;小杨&quot;</span>&lt;&lt;<span class="string">&quot;小刘&quot;</span>&lt;&lt;<span class="string">&quot;小赵&quot;</span>;</span><br><span class="line"></span><br><span class="line">QList&lt;QString&gt;sexList;</span><br><span class="line">sexList&lt;&lt;<span class="string">&quot;女&quot;</span>&lt;&lt;<span class="string">&quot;女&quot;</span>&lt;&lt;<span class="string">&quot;女&quot;</span>&lt;&lt;<span class="string">&quot;女&quot;</span>&lt;&lt;<span class="string">&quot;女&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> col = <span class="number">0</span>;</span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i,col++,<span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(nameList[i]));</span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i,col++,<span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(sexList.<span class="built_in">at</span>(i))); <span class="comment">//at越界抛出异常</span></span><br><span class="line">    <span class="comment">//int 转 QString</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i,col++,<span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(QString::<span class="built_in">number</span>(i+<span class="number">18</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/16.png"></p><h2 id="其他控件"><a href="#其他控件" class="headerlink" title="其他控件"></a>其他控件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//栈控件的使用---------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置默认定位Button</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Button按钮</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;Button, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">    ui-&gt;stackedWidget-&gt;<span class="built_in">setCurrentIndex</span>(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//buttonTabBox按钮</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;buttonTabBox, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">    ui-&gt;stackedWidget-&gt;<span class="built_in">setCurrentIndex</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ButtonTabWidget按钮</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;ButtonTabWidget, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">    ui-&gt;stackedWidget-&gt;<span class="built_in">setCurrentIndex</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下拉框</span></span><br><span class="line">ui-&gt;comboBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;杜鹃&quot;</span>);</span><br><span class="line">ui-&gt;comboBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;樱花&quot;</span>);</span><br><span class="line">ui-&gt;comboBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;海棠&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击按钮 选中海棠</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;btnSelect, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">    <span class="comment">//ui-&gt;comboBox-&gt;setCurrentIndex(2);</span></span><br><span class="line">    ui-&gt;comboBox-&gt;<span class="built_in">setCurrentText</span>(<span class="string">&quot;海棠&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用QLabel显示图片</span></span><br><span class="line">ui-&gt;labelImage-&gt;<span class="built_in">setPixmap</span>(<span class="built_in">QPixmap</span>(<span class="string">&quot;:/image/005y0Ylbly1hj9kxm09i0j31kw1kw1ky.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用QLabel显示gif动态图片</span></span><br><span class="line">QMovie * movie = <span class="keyword">new</span> <span class="built_in">QMovie</span>(<span class="string">&quot;:/image/小太阳gif.jpg&quot;</span>);</span><br><span class="line">ui-&gt;labelMovie-&gt;<span class="built_in">setMovie</span>(movie);</span><br><span class="line"><span class="comment">//播放动图</span></span><br><span class="line">movie-&gt;<span class="built_in">start</span>();</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/17.png"></p><h1 id="自定义控件封装"><a href="#自定义控件封装" class="headerlink" title="自定义控件封装"></a>自定义控件封装</h1><p>添加新文件——QT——设计师界面类(.h   .cpp   .ui)</p><p>.ui中设计QStringBox 和 QSlider 两个控件 组成一个控件</p><p>Widget中使用自定义控件 拖拽一个Widget控件 点击提升为  添加类名等</p><p>实现功能 改变数字 滑动条跟着移动</p><p>提供getNumber和setNumber两个对外接口</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SMALLWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SMALLWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmallWidget</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmallWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">SmallWidget</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">SmallWidget</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置数字</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setNumber</span><span class="params">(<span class="type">int</span> num)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数字</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getNumber</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::SmallWidget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// SMALLWIDGET_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;smallwidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_smallwidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">SmallWidget::<span class="built_in">SmallWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::SmallWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//QStringBox数字改变 QSlider跟着移动</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;spinBox, &amp;QSpinBox::valueChanged, ui-&gt;horizontalSlider, &amp;QSlider::setValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//QSlider滑动 QStringBox数字跟着改变</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;horizontalSlider, &amp;QSlider::valueChanged, ui-&gt;spinBox, &amp;QSpinBox::setValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置数字</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SmallWidget::setNumber</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;spinBox-&gt;<span class="built_in">setValue</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SmallWidget::getNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ui-&gt;spinBox-&gt;<span class="built_in">value</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SmallWidget::~<span class="built_in">SmallWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击获取  获取控件当前的值</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;btnGet, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; ui-&gt;widget-&gt;<span class="built_in">getNumber</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击设置  设置到一半</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;btnSet, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        ui-&gt;widget-&gt;<span class="built_in">setNumber</span>(<span class="number">50</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/18.png"></p><p><img src="/posts/abd0a875/19.png"></p><h1 id="Qt-中的事件"><a href="#Qt-中的事件" class="headerlink" title="Qt 中的事件"></a>Qt 中的事件</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYLABEL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYLABEL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QEnterEvent&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myLabel</span> : <span class="keyword">public</span> QLabel</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">myLabel</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标进入事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">enterEvent</span><span class="params">(QEnterEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标离开事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">leaveEvent</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYLABEL_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylabel.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">myLabel::<span class="built_in">myLabel</span>(QWidget *parent)</span><br><span class="line">    : QLabel&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标进入事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myLabel::enterEvent</span><span class="params">(QEnterEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt; <span class="string">&quot;鼠标进入了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标离开事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myLabel::leaveEvent</span><span class="params">(QEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt; <span class="string">&quot;鼠标离开了&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/20.png"></p><p><strong>其他</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//鼠标按下</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标释放</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标移动</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylabel.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"></span><br><span class="line">myLabel::<span class="built_in">myLabel</span>(QWidget *parent)</span><br><span class="line">    : QLabel&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//设置鼠标追踪</span></span><br><span class="line">    <span class="built_in">setMouseTracking</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标按下</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myLabel::mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//当鼠标左键按下  提示信息</span></span><br><span class="line">    <span class="keyword">if</span> (ev-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        QString str = <span class="built_in">QString</span>(<span class="string">&quot;鼠标按下了 x = %1  y = %2  &quot;</span></span><br><span class="line">                              <span class="string">&quot;globalx = %3  globaly = %4&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>())</span><br><span class="line">                        .<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalX</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalY</span>());</span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt; &quot;鼠标按下了&quot;;</span></span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt; str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标释放</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myLabel::mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// if (ev-&gt;button() == Qt::LeftButton)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">        QString str = <span class="built_in">QString</span>(<span class="string">&quot;鼠标释放了 x = %1  y = %2  &quot;</span></span><br><span class="line">                              <span class="string">&quot;globalx = %3  globaly = %4&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>())</span><br><span class="line">                          .<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalX</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalY</span>());</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt; str;</span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标移动</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myLabel::mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// if (ev-&gt;buttons() &amp; Qt::LeftButton)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">        QString str = <span class="built_in">QString</span>(<span class="string">&quot;鼠标移动了 x = %1  y = %2  &quot;</span></span><br><span class="line">                              <span class="string">&quot;globalx = %3  globaly = %4&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>())</span><br><span class="line">                          .<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalX</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalY</span>());</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt; str;</span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="第一种定时器"><a href="#第一种定时器" class="headerlink" title="第一种定时器"></a>第一种定时器</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写定时器的事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">timerEvent</span><span class="params">(QTimerEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> id1; <span class="comment">//定时器1的唯一标识</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> id2; <span class="comment">//定时器2的唯一标识</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动定时器</span></span><br><span class="line">    <span class="comment">//参数1 间隔(单位 毫秒)</span></span><br><span class="line">    id1 = <span class="built_in">startTimer</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    id2 = <span class="built_in">startTimer</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写定时器的事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::timerEvent</span><span class="params">(QTimerEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev-&gt;<span class="built_in">timerId</span>() == id1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//label_2每隔1秒+1</span></span><br><span class="line">        ui-&gt;label_2-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ev-&gt;<span class="built_in">timerId</span>() == id2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//label_2每隔2秒+1</span></span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num2 = <span class="number">1</span>;</span><br><span class="line">        ui-&gt;label_3-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num2++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种定时器"><a href="#第二种定时器" class="headerlink" title="第二种定时器"></a>第二种定时器</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动定时器</span></span><br><span class="line">    <span class="comment">//参数1 间隔(单位 毫秒)</span></span><br><span class="line">    id1 = <span class="built_in">startTimer</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    id2 = <span class="built_in">startTimer</span>(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器的第二种方式</span></span><br><span class="line">    QTimer * timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//启动定时器</span></span><br><span class="line">    timer-&gt;<span class="built_in">start</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(timer, &amp;QTimer::timeout, [=]()&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//label_4每隔0.5秒+1</span></span><br><span class="line">        ui-&gt;label_4-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num++));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重写定时器的事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::timerEvent</span><span class="params">(QTimerEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev-&gt;<span class="built_in">timerId</span>() == id1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//label_2每隔1秒+1</span></span><br><span class="line">        ui-&gt;label_2-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ev-&gt;<span class="built_in">timerId</span>() == id2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//label_2每隔2秒+1</span></span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num2 = <span class="number">1</span>;</span><br><span class="line">        ui-&gt;label_3-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num2++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/21.png"></p><h2 id="event-事件"><a href="#event-事件" class="headerlink" title="event 事件"></a>event 事件</h2><p>用于事件的分发</p><p>也可以做拦截操作  不建议</p><p><img src="/posts/abd0a875/22.png"></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过event事件分发器拦截鼠标按下事件</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">event</span><span class="params">(QEvent *e)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过event事件分发器拦截鼠标按下事件</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">myLabel::event</span><span class="params">(QEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果鼠标按下 在event事件分发钟做拦截操作</span></span><br><span class="line">    <span class="keyword">if</span> (e-&gt;<span class="built_in">type</span>() == QEvent::MouseButtonPress)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//静态类型转换</span></span><br><span class="line">        QMouseEvent * ev = <span class="built_in">static_cast</span>&lt;QMouseEvent *&gt;(e);</span><br><span class="line">        QString str = <span class="built_in">QString</span>(<span class="string">&quot;event函数中 鼠标按下了 x = %1  y = %2 &quot;</span></span><br><span class="line">                              <span class="string">&quot;globalx = %3  globaly = %4&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>())</span><br><span class="line">                          .<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalX</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalY</span>());</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt; str;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//true代表用户自己处理这个事件 不向下分发</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他事件 交给父类处理 默认处理</span></span><br><span class="line">    <span class="keyword">return</span> QLabel::<span class="built_in">event</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件过滤器"><a href="#事件过滤器" class="headerlink" title="事件过滤器"></a>事件过滤器</h2><p>通过事件过滤器，可以在程序分发到event事件之前再做一次高级拦截</p><p>两个步骤：</p><ol><li><p>给控件安装事件过滤器</p></li><li><p>重写eventfilter事件</p></li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重写事件过滤器的事件</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *, QEvent *)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步骤一 安转事件过滤器</span></span><br><span class="line">    <span class="comment">//label 安装事件过滤器</span></span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">installEventFilter</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤二 重写事件过滤器的事件</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Widget::eventFilter</span><span class="params">(QObject *obj, QEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == ui-&gt;label)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e-&gt;<span class="built_in">type</span>() == QEvent::MouseButtonPress)</span><br><span class="line">        &#123;</span><br><span class="line">            QMouseEvent * ev = <span class="built_in">static_cast</span>&lt;QMouseEvent *&gt;(e);</span><br><span class="line">            QString str = <span class="built_in">QString</span>(<span class="string">&quot;事件过滤器中 鼠标按下了 x = %1  y = %2  &quot;</span></span><br><span class="line">                                  <span class="string">&quot;globalx = %3  globaly = %4&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>())</span><br><span class="line">                              .<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalX</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalY</span>());</span><br><span class="line">            <span class="built_in">qDebug</span>()&lt;&lt; str;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他默认处理</span></span><br><span class="line">    <span class="keyword">return</span> QWidget::<span class="built_in">eventFilter</span>(obj,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="QPainter-绘图"><a href="#QPainter-绘图" class="headerlink" title="QPainter 绘图"></a>QPainter 绘图</h1><h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘图事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//实例化画家类  this指定的是绘图的设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔</span></span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">(QColor(<span class="number">122</span>,<span class="number">168</span>,<span class="number">200</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔宽度</span></span><br><span class="line">    pen.<span class="built_in">setWidth</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔风格</span></span><br><span class="line">    pen.<span class="built_in">setStyle</span>(Qt::DotLine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让画家使用这个笔</span></span><br><span class="line">    painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画刷</span></span><br><span class="line">    <span class="function">QBrush <span class="title">brush</span><span class="params">(QColor(<span class="number">222</span>,<span class="number">222</span>,<span class="number">222</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画刷风格</span></span><br><span class="line">    brush.<span class="built_in">setStyle</span>(Qt::Dense3Pattern);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让画家使用画刷</span></span><br><span class="line">    painter.<span class="built_in">setBrush</span>(brush);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画线</span></span><br><span class="line">    painter.<span class="built_in">drawLine</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>,<span class="number">0</span>), <span class="built_in">QPoint</span>(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画圆 椭圆</span></span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">100</span>,<span class="number">100</span>),<span class="number">36</span>,<span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画矩形</span></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画文字</span></span><br><span class="line">    painter.<span class="built_in">drawText</span>(<span class="built_in">QRect</span>(<span class="number">10</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>),<span class="string">&quot;晴天与猫&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/23.png"></p><h2 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/////////////////高级设置/////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// painter.drawEllipse(QPoint(100,100),50,50);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //设置抗锯齿能力  效率低</span></span><br><span class="line"><span class="comment">// painter.setRenderHint(QPainter::Antialiasing);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// painter.drawEllipse(QPoint(200,200),50,50);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//画矩形</span></span><br><span class="line">painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动画家</span></span><br><span class="line">painter.<span class="built_in">translate</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存画家状态</span></span><br><span class="line">painter.<span class="built_in">save</span>();</span><br><span class="line"></span><br><span class="line">painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">painter.<span class="built_in">translate</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//还原画家保存状态</span></span><br><span class="line">painter.<span class="built_in">restore</span>();</span><br><span class="line"></span><br><span class="line">painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">50</span>));</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton,&amp;QPushButton::clicked,[=]()&#123;</span><br><span class="line">        posX += <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//如果要手动调用绘图事件 用update更新</span></span><br><span class="line">        <span class="built_in">update</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">///////////////利用画家画资源图片//////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果超出屏幕 从0开始</span></span><br><span class="line">    <span class="keyword">if</span> (posX &gt; <span class="keyword">this</span>-&gt;<span class="built_in">width</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        posX = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QPixmap <span class="title">pixmap</span><span class="params">(<span class="string">&quot;:/image/le.jpg&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QPixmap scaledPixmap = pixmap.<span class="built_in">scaled</span>(<span class="number">200</span>, <span class="number">200</span>, Qt::KeepAspectRatio);</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(posX,<span class="number">10</span>,scaledPixmap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>update() 是一个 QWidget 类的成员函数，用于请求更新窗口部件的绘图</p><p>当调用 update() 函数时，Qt 将触发绘图事件，并重新绘制窗口部件</p><p>这意味着任何需要更新的视图都会被更新</p><p><img src="/posts/abd0a875/24.png"></p><h2 id="绘图设备"><a href="#绘图设备" class="headerlink" title="绘图设备"></a>绘图设备</h2><p>绘图设备是指继承QPainterDevice的子类。Qt一共提供了四个这样的类，分别是QPixmap、QBitmap、QImage和 QPicture。</p><p>QPixmap专门为图像在屏幕上的显示做了优化</p><p>QBitmap是QPixmap的一个子类，它的色深限定为1，可以使用 QPixmap的isQBitmap()函数来确定这个QPixmap是不是一个QBitmap</p><p>QImage专门为图像的像素级访问做了优化。</p><p>QPicture则可以记录和重现QPainter的各条命令</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘图事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPixmap&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QImage&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPicture&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //pixmap绘图设备   专门为平台做了显示的优化/////////////////////////</span></span><br><span class="line">    <span class="comment">// QPixmap pix(300,300);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //填充颜色</span></span><br><span class="line">    <span class="comment">// pix.fill(Qt::white);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //声明画家</span></span><br><span class="line">    <span class="comment">// QPainter painter(&amp;pix);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// painter.setPen(QPen(Qt::blue));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// painter.drawEllipse(QPoint(150,150),100,100);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //保存</span></span><br><span class="line">    <span class="comment">// pix.save(&quot;D:\\cpp\\QT\\pix.png&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //qimage 绘图设备  可以对像素进行访问//////////////////////////////</span></span><br><span class="line">    <span class="comment">// QImage img(300,300,QImage::Format_RGB32);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //填充颜色</span></span><br><span class="line">    <span class="comment">// img.fill(Qt::white);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //声明画家</span></span><br><span class="line">    <span class="comment">// QPainter painter(&amp;img);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// painter.setPen(QPen(Qt::blue));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// painter.drawEllipse(QPoint(150,150),100,100);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //保存</span></span><br><span class="line">    <span class="comment">// img.save(&quot;D:\\cpp\\QT\\img.png&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//qpicture 绘图设备  可以记录和重现绘图指令///////////////////////////</span></span><br><span class="line"></span><br><span class="line">    QPicture pic;</span><br><span class="line"></span><br><span class="line">    QPainter painter;</span><br><span class="line">    <span class="comment">//开始往pic上画</span></span><br><span class="line">    painter.<span class="built_in">begin</span>(&amp;pic);</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(Qt::cyan));</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">150</span>,<span class="number">150</span>),<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结束画画</span></span><br><span class="line">    painter.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存到磁盘</span></span><br><span class="line">    pic.<span class="built_in">save</span>(<span class="string">&quot;D:\\cpp\\QT\\pic.zt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// QPainter painter(this);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //利用qimage 对像素进行修改///////////////////////////////////</span></span><br><span class="line">    <span class="comment">// QImage img;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// img.load(&quot;:/image/005y0Ylbly1hgh1g861whj30u00u00w5.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// img = img.scaled(400, 400, Qt::KeepAspectRatio);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //修改像素点</span></span><br><span class="line">    <span class="comment">// for (int i = 50; i &lt; 100; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for (int j = 50; j &lt; 100; j++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         QRgb value = qRgb(200,0,0);</span></span><br><span class="line">    <span class="comment">//         img.setPixel(i, j, value);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// painter.drawImage(0,0,img);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重现qpicture的绘图指令///////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QPicture pic;</span><br><span class="line"></span><br><span class="line">    pic.<span class="built_in">load</span>(<span class="string">&quot;D:\\cpp\\QT\\pic.zt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">drawPicture</span>(<span class="number">0</span>,<span class="number">0</span>,pic);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p>QFile 对文件进行读写操作</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDateTime&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击选取文件按钮，弹出文件对话框</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton,&amp;QPushButton::clicked,[=]()&#123;</span><br><span class="line">        QString path = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>,<span class="string">&quot;打开文件&quot;</span>,<span class="string">&quot;C:\\Users\\lyzhy\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将路径放入到lineEdit中</span></span><br><span class="line">        ui-&gt;lineEdit-&gt;<span class="built_in">setText</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取内容放入到textEdit中</span></span><br><span class="line">        <span class="comment">//QFile默认支持的格式是 UTF-8</span></span><br><span class="line">        QFile <span class="built_in">file</span>(path);<span class="comment">//参数为读取文件的路径</span></span><br><span class="line">        <span class="comment">//设置打开方式</span></span><br><span class="line">        file.<span class="built_in">open</span>(QIODevice::ReadOnly);</span><br><span class="line"></span><br><span class="line">        QByteArray array = file.<span class="built_in">readAll</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// QByteArray array;</span></span><br><span class="line">        <span class="comment">// while(!file.atEnd())</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     array += file.readLine();//按行读</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编码格式类</span></span><br><span class="line">        <span class="comment">//QString content = QString::fromLocal8Bit(array);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将读取到的数据放入到textEdit</span></span><br><span class="line">        ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对文件对象进行关闭</span></span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行写文件</span></span><br><span class="line">        file.<span class="built_in">open</span>(QIODevice::Append);<span class="comment">//用追加的方式进行写</span></span><br><span class="line"></span><br><span class="line">        file.<span class="built_in">write</span>(<span class="string">&quot;茉莉生酪拿铁&quot;</span>);</span><br><span class="line"></span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//QFileInfo 文件信息类</span></span><br><span class="line">        QFileInfo <span class="built_in">info</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;文件大小：&quot;</span>&lt;&lt;info.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;文件后缀名：&quot;</span>&lt;&lt;info.<span class="built_in">suffix</span>()</span><br><span class="line">                 &lt;&lt;<span class="string">&quot;文件名称：&quot;</span>&lt;&lt;info.<span class="built_in">fileName</span>()&lt;&lt;<span class="string">&quot;文件路径：&quot;</span>&lt;&lt;info.<span class="built_in">filePath</span>();</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;创建日期：&quot;</span>&lt;&lt;info.<span class="built_in">birthTime</span>().<span class="built_in">toString</span>(<span class="string">&quot;yyyy/MM/dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;最后修改日期：&quot;</span>&lt;&lt;info.<span class="built_in">lastModified</span>().<span class="built_in">toString</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="翻金币游戏实战"><a href="#翻金币游戏实战" class="headerlink" title="翻金币游戏实战"></a>翻金币游戏实战</h1><p>创建项目，添加项目资源</p><p><strong>主场景</strong></p><ol><li><p>设置游戏主场景配置</p><p> 设置背景图标</p><p> 设置固定大小</p><p> 设置项目标题</p><p> 设置背景</p><p> 背景标题</p><p> 开始菜单</p><p> 退出功能</p></li><li><p>创建开始按钮</p><p> 封装自定义按钮 MyPushButton</p><p> 构造函数  参数（ 默认显示图片， 按下后显示的图片）</p><p> 开始按钮 点击开始按钮进入选择关卡场景</p><p> 开始按钮特效</p><p> zoom1 向下跳  </p><p> zoom2 向上跳</p></li><li><p>创建选择关卡场景</p><p> 点击开始按钮后 延时进入到 选择关卡场景</p></li></ol><p><strong>选择关卡场景</strong></p><ol><li><p>场景基本设置 </p><p>背景设置 图标 标题 大小等</p></li><li><p>创建返回按钮</p><p> 选择关卡的返回按钮特效制作</p><pre><code> 点击后切换另一个图片 重写 void mousePressEvent 重写 void mouseReleaseEvent</code></pre></li><li><p>开始场景与选择关卡场景的切换</p><p> 点击选择关卡场景的返回按钮，发送一个自定义信号</p><p> 在主场景中监听这个信号，并且当触发信号后，重新显示主场景，隐藏掉选择关卡的场景</p></li><li><p>创建选择关卡按钮</p><p> 利用一个for循环将所有的按钮布置到场景中</p><p> 在按钮上面设置一个QLabel显示关卡数</p><p> QLabel  设置 大小、显示文字、对齐方式、鼠标穿透</p><p> 给每个按钮 监听点击事件</p></li></ol><p><strong>翻金币场景</strong></p><ol><li><p>翻金币场景创建</p><p> 点击选择关卡按钮后，进入到翻金币游戏场景</p><p> 配置翻金币游戏场景  设置标题、图标、大小、设置背景</p><p> 实现返回按钮，可以返回到上一个场景（选关场景）</p><p> 实现三个场景之间的切换</p></li><li><p>实现显示关卡标签<br> 在左下角显示玩家具体的关卡标签</p><p> QLabel创建设置 大小和位置label-&gt;setGeometry(30, this-&gt;height() - 50,120, 50);</p><p> QFont font 设置字体以及字号</p><p> 给QLabel设置字体  setFont（font）</p></li><li><p>创建金币类<br> 先将金币的背景图案放入到 PlayScene 中</p><p> 创建 MyCoin 自定义金币按钮类</p><p> MyCoin::MyCoin(QString btnImg) 构造函数中传入默认显示的图片金币</p><p> 在PlayScene创建所有的金币按钮</p></li><li><p>每个关卡的默认显示</p><p> 先引入dataConfig.h 和 dataConfig.cpp文件到项目中</p><p> 在PlayScene 中写了 int gameArray[4][4]的数组 维护每个关卡的金币状态</p><p> 初始化每个关卡的显示</p></li><li><p>金币翻转特效</p><p> 给每个硬币加属性  posX 坐标x   posY 坐标y bool flag  正反面标志</p><p> 给MyCoin 加函数  changFlag改变标志，<br> 如果是flag为true 改为false  并且开启定时器1  （正面翻反面）；<br> 如果flag为false ，改为true，并且开启定时器2   （反面翻正面）</p><p> 实现定时器中的内容</p><p> 测试 金币翻银币 以及 银币翻金币</p></li><li><p>解决快速点击的效果不好</p><p> 在MyCoin中加入了 isAnimation 判断 是否正在做动画条件</p><p> 当按下 MyCoin 判断是否在做动画，如果做动画，直接return，保证金币和银币动态切换的完整效果</p></li><li><p>翻转周围金币<br> 点击金币后 ，延时翻转周围金币实现</p></li><li><p>判断胜利</p><p> PlayScene中 添加 isWin的标志 来判断是否胜利</p><p> 如果胜利了，打印胜利信息</p><p> 将所有按钮 屏蔽掉点击</p></li><li><p>胜利图片特效</p><p>将胜利图片放入到游戏场景外</p><p>当游戏胜利时，移动到屏幕中央，做胜利效果</p></li><li><p>添加音效资源</p><p>QSoundEffect 所属模块  multimedia 需要在.pro文件中加入这个模块</p><p>在三个场景中添加音效</p><p>播放  s -&gt;play()</p><p>s-&gt;setLoop() 设置播放次数 -1代表无限循环播放</p></li><li><p>项目的优化</p><p>将三个场景的切换位置 一致</p></li><li><p>打包</p><p>hm nis edit</p><p>enigma</p></li></ol><p>完整项目链接：<a href="https://github.com/lejunXTS/coinfilp/tree/master">https://github.com/lejunXTS/coinfilp/tree/master</a></p><p>完结撒花！</p><p>完结撒花！</p><p>完结撒花！</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法——学习记录ing</title>
      <link href="/posts/f4c4f07f.html"/>
      <url>/posts/f4c4f07f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li><p><strong>学习和参考的资料来源</strong>：</p><p>  <a href="https://www.programmercarl.com/">代码随想录</a><br>  <a href="https://leetcode.cn/">leetcode</a></p></li></ul><h1 id="补充知识（持续更新ing）"><a href="#补充知识（持续更新ing）" class="headerlink" title="补充知识（持续更新ing）"></a>补充知识（持续更新ing）</h1><p><strong>常用头文件</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>     <span class="comment">// 输入输出流</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>       <span class="comment">// 向量容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>       <span class="comment">// 字符串类</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>    <span class="comment">// 常用算法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span>        <span class="comment">// 数学函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span>       <span class="comment">// 数值极限</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span>      <span class="comment">// 整型极限</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span>        <span class="comment">// 队列</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span>        <span class="comment">// 栈</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span>          <span class="comment">// 映射容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span>          <span class="comment">// 集合容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span><span class="comment">// 无序映射容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span><span class="comment">// 无序集合容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span>      <span class="comment">// 数值操作</span></span></span><br></pre></td></tr></table></figure><p><strong>一次性包含所有常用库</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度是一个函数，它定性描述该算法的运行时间。</p><p>通常会估算算法的操作单元数量来代表程序消耗的时间，这里默认CPU的每个单元运行消耗的时间都是相同的。</p><p>假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐进时间复杂度，简称时间复杂度，记为O(f(n))。</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度是一个算法在运行过程中占用内存空间大小的量度，基座S(n) &#x3D; O(f(n))。</p><p>空间复杂度(Space Complexity)基座S(n)依然使用大O来表示。利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。</p><ul><li>空间复杂度是考虑程序运行时占用内存的大小，而不是可执行文件的大小。</li><li>不要以为空间复杂度就已经精确的掌握了程序的内存使用大小，很多因素会影响程序真正内存使用大小，例如编译器的内存对齐，编程语言容器的底层实现等等这些都会影响到程序内存的开销。所以空间复杂度是预先大体评估程序内存使用的大小。</li></ul><p>空间复杂度是logn的情况确实有些特殊，其实是在递归的时候，会出现空间复杂度为logn的情况。</p><h2 id="不同语言的内存管理"><a href="#不同语言的内存管理" class="headerlink" title="不同语言的内存管理"></a>不同语言的内存管理</h2><ul><li>C\C++这种内存堆空间的申请和释放完全考自己管理</li><li>Java依赖JVM来做内存管理，不了解jvm内存管理的机制，很可能会因一些错误的代码写法而导致内存泄漏或内存溢出</li><li>Python内存管理是由私有堆空间管理的，所有的python对象和数据结构都存储在私有对空间中。程序员没有访问堆的权限，只有解释器才能操作。</li></ul><p>例如Python万物皆对象，并且将内存操作封装的很好，所以python的基本数据类型所用的内存会要远大于存放纯数据类型所占的内存，例如，存储int型数据需要四个字节，但是使用python申请一个对象来存放数据的话，所用空间要远大于四个字节。</p><h2 id="C-的内存管理"><a href="#C-的内存管理" class="headerlink" title="C++的内存管理"></a>C++的内存管理</h2><p>程序运行时所需的内存空间分为固定部分和可变部分，如下：</p><p><img src="/posts/f4c4f07f/1.png" alt="内存管理"></p><p>固定部分的内存消耗是不会随着代码运行产生变化的，可变部分则是会产生变化的，更具体一些，一个由C&#x2F;C++编译的程序占用的内存分为以下几个部分：</p><ul><li>栈区(Stack)：由编译器自动分配释放，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构中的栈。</li><li>堆区(Heap)：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS收回。</li><li>未初始化数据区(Uninitialized Data)：存放未初始化的全局变量和静态变量</li><li>初始化数据区(Initialized Data)：存放已经初始化的全局变量和静态变量</li><li>程序代码区(Text)：存放函数体的二进制代码</li></ul><p>代码区和数据区所占空间都是固定的，而且占用的空间非常小，那么看运行时消耗的内存主要看可变部分。</p><p>在可变部分中，栈区间的数据在代码块之心结束之后，系统会自动回收，而堆区间数据是需要程序员自己回收，所以也就是造成内存泄漏的发源地。</p><p>而java和python的话则不需要程序员去考虑内存泄漏的问题，虚拟机都做了这些事情。</p><h2 id="如何计算程序占用多大内存"><a href="#如何计算程序占用多大内存" class="headerlink" title="如何计算程序占用多大内存"></a>如何计算程序占用多大内存</h2><p>想要计算出自己的程序会占用多少内存就一定要了解自己定义的数据类型的大小，如下：</p><p><img src="/posts/f4c4f07f/2.png"></p><p>1个字节占8比特，那么4个字节就是32个比特，可存放数据的大小为2^32，也就是4G空间的大小，即可以寻找4G空间大小的内存地址。</p><p>现在大家使用的计算机一般都是64位了，所以编译器也都是64位的。</p><p>安装64位的操作系统的计算机内存都已经超过了4G，也就是指针大小如果还是4个字节的话，就已经不能寻址全部的内存地址，所以64位编译器使用8个字节的指针才能寻找所有的内存地址。</p><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>只要可以跨平台的编程语言都需要做内存对齐，Java、Python都是一样的。</p><p>为什么会有内存对齐？</p><p>主要有两个原因：</p><ul><li>1.平台原因：不是所有的硬件平台都能访问内存地址上的任意数据，某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。为了同一个程序可以在多平台运行，需要内存对齐。</li><li>2.硬件原因：经过内存对齐后，CPU访问内存的速度大大提升。</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> num;</span><br><span class="line">   <span class="type">char</span> cha;</span><br><span class="line">&#125;st;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> b[<span class="number">100</span>];</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(st) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其输出的结果依次为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">400</span><br><span class="line">100</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>此时会发现，和单纯计算字节数的话是有一些误差的。</p><p>这就是因为内存对齐的原因。</p><p>来看一下内存对齐和非内存对齐产生的效果区别。</p><p>CPU读取内存不是一次读取单个字节，而是一块一块的来读取内存，块的大小可以是2，4，8，16个字节，具体取多少个字节取决于硬件。</p><p>假设CPU把内存划分为4字节大小的块，要读取一个4字节大小的int型数据，来看一下这两种情况下CPU的工作量：</p><p><img src="/posts/f4c4f07f/3.png"></p><p>char型的数据和int型的数据挨在一起，该int数据从地址1开始，那么CPU想要读这个数据的话需要以下几步操作：</p><ul><li>1.因为CPU是四个字节来寻址，首先CPU先读取0、1、2、3处的四个字节数据</li><li>2.CPU读取4、5、6、7处的四个字节数据</li><li>3.合并地址1、2、3、4处四个字节的数据才是本次操作需要的int数据</li></ul><p>此时一共需要两次寻址，一次合并的操作</p><p>内存对齐会浪费内存资源，但事实上，相对来说计算机内存资源一般都是充足的，我们更希望的是提高运行速度。</p><p>编译器一般都会做内存对齐的优化操作，也就是说当考虑程序真正占用的内存大小的时候，也需要认识到内存对齐的影响。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>数组是存放在连续内存空间上的相同类型数据的集合。</p><p>数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p><p>两点注意：</p><ul><li>数组下标都是从0开始的</li><li>数组内存空间的地址是连续的</li></ul><p>正是因为数组的内存空间地址是连续的，所以在删除或增添元素的时候，就难免要移动其他元素的地址。</p><p>数组的元素是不能删的，只能覆盖。</p><p>不同编程语言的内存管理是不一样的，以C++为例，在C++中二维数组是连续分布的。</p><h2 id="leetcode题目链接"><a href="#leetcode题目链接" class="headerlink" title="leetcode题目链接"></a>leetcode题目链接</h2><p><a href="https://leetcode.cn/problems/binary-search/description/">二分查找</a></p><p><a href="https://leetcode.cn/problems/remove-element/description/">移除元素</a></p><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">有序数组的平方</a></p><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">长度最小的子数组</a></p><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/description/">螺旋矩阵 II</a></p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="链表理论基础"><a href="#链表理论基础" class="headerlink" title="链表理论基础"></a>链表理论基础</h2><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null。</p><p>链表的入口节点称为链表的头节点也就是head。</p><p><img src="/posts/f4c4f07f/4.png"></p><h3 id="链表的类型"><a href="#链表的类型" class="headerlink" title="链表的类型"></a>链表的类型</h3><p><strong>单链表</strong></p><p>单链表（Singly Linked List）是一种常见的线性数据结构，由一系列节点组成，每个节点包含两部分：数据部分和指针部分。其中，数据部分用于存储数据，指针部分用于指向下一个节点。</p><p>单链表中的节点按照顺序连接，每个节点只有一个指针指向下一个节点，而最后一个节点的指针部分通常指向一个特殊的值（如NULL），表示链表的结束。</p><p><strong>双链表</strong></p><p>单链表中的指针域只能指向节点的下一个节点。</p><p>双链表：每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。</p><p>双链表既可以向前查询也可以向后查询。</p><p><img src="/posts/f4c4f07f/5.png"></p><p><strong>循环链表</strong></p><p>顾名思义，就是链表首尾相连。</p><p>循环链表可以用来解决瑟夫环问题。</p><p><img src="/posts/f4c4f07f/6.png"></p><h3 id="链表的存储方式"><a href="#链表的存储方式" class="headerlink" title="链表的存储方式"></a>链表的存储方式</h3><p>链表是通过指针域的指针链接在内存中各个节点。</p><p>所以链表中的节点在内存中不是连续分布的，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。</p><p><img src="/posts/f4c4f07f/6.png"></p><h3 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h3><p><strong>删除节点</strong></p><p><strong>添加节点</strong></p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><img src="/posts/f4c4f07f/8.png"></p><p>数组在定义的时候，长度是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。</p><p>链表的长度可以是不固定的，并且可以动态增删，适合数量不固定，频繁增删，较少查询的场景。</p><h2 id="leetcode题目链接-1"><a href="#leetcode题目链接-1" class="headerlink" title="leetcode题目链接"></a>leetcode题目链接</h2><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/description/">移除链表元素</a></p><p><a href="https://leetcode.cn/problems/design-linked-list/description/">设计链表</a></p><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/">反转链表</a></p><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">两两交换链表中的节点</a></p><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">删除链表的倒数第N个结点</a></p><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">链表相交</a></p><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">环形链表 II</a></p><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="哈希表理论基础"><a href="#哈希表理论基础" class="headerlink" title="哈希表理论基础"></a>哈希表理论基础</h2><p>哈希表(Hash table)——散列表</p><p>哈希表是根据关键码的值而直接进行访问的数据结构。</p><p>（哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素）</p><p>一般哈希表都是用来快速判断一个元素是否出现集合里。</p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>例如要查询一个名字是否在学校里，哈希函数把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里。</p><h2 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h2><p>拉链法：发生冲突的元素都被存储在链表中</p><p>线性探测法:使用线性探测法，一定要保证tableSize大于dataSize。依靠哈希表中的空位来解决碰撞问题。</p><h2 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="常见的三种哈希结构"></a>常见的三种哈希结构</h2><ul><li>数组</li><li>set（集合）</li><li>map（映射）</li></ul><p><img src="/posts/f4c4f07f/9.png"></p><p>std::unordered_set底层实现为哈希表，std::set 和std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以key值是有序的，但key不可以修改，改动key值会导致整棵树的错乱，所以只能删除和增加。</p><p><img src="/posts/f4c4f07f/10.png"></p><p>std::unordered_map 底层实现为哈希表，std::map 和std::multimap 的底层实现是红黑树。同理，std::map 和std::multimap 的key也是有序的。</p><p>当要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。</p><p>map 是一个key value 的数据结构，map中，对key是有限制，对value没有限制的，因为key的存储方式使用红黑树实现的。</p><p>虽然std::set、std::multiset 的底层实现是红黑树，不是哈希表，std::set、std::multiset 使用红黑树来索引和存储，不过给我们的使用方式，还是哈希法的使用方式，即key和value。所以使用这些数据结构来解决映射问题的方法，依然称之为哈希法。 map也是一样的道理。</p><p><strong>总结</strong></p><p>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。</p><p>但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p><h2 id="leetcode题目链接-2"><a href="#leetcode题目链接-2" class="headerlink" title="leetcode题目链接"></a>leetcode题目链接</h2><p><a href="https://leetcode.cn/problems/valid-anagram/description/">有效的字母异位词</a></p><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/description/">两个数组的交集</a></p><p><a href="https://leetcode.cn/problems/happy-number/description/">快乐数</a></p><p><a href="https://leetcode.cn/problems/two-sum/description/">两数之和</a></p><p><a href="https://leetcode.cn/problems/4sum-ii/description/">四数相加 II</a></p><p><a href="https://leetcode.cn/problems/ransom-note/description/">赎金信</a></p><p>双指针法：</p><!-- [三数之和](https://leetcode.cn/problems/3sum/description/) --><p><a href="https://leetcode.cn/problems/4sum/description/">四数之和</a></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><a href="https://leetcode.cn/problems/reverse-string/description/">反转字符串</a></p><p><a href="https://leetcode.cn/problems/reverse-string-ii/description/">反转字符串 II</a></p><p><a href="https://kamacoder.com/problempage.php?pid=1064">替换数字</a></p><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/">反转字符串里的单词</a></p><p><a href="https://kamacoder.com/problempage.php?pid=1065">右旋字符串</a></p><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">找出字符串中第一个匹配项的下标</a></p><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/description/">重复的子字符串</a></p><h1 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h1><p><a href="https://leetcode.cn/problems/remove-element/description/">移除元素</a></p><p><a href="https://leetcode.cn/problems/reverse-string/description/">反转字符串</a></p><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/">翻转字符串里的单词</a></p><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/">反转链表</a></p><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">删除链表的倒数第 N 个结点</a></p><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">链表相交</a></p><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">环形链表 II</a></p><p><a href="https://leetcode.cn/problems/3sum/description/">三数之和</a></p><p><a href="https://leetcode.cn/problems/4sum/description/">四数之和</a></p><h1 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h1><h2 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>队列是先进先出，栈是先进后出</strong></p><p><strong>栈</strong></p><p>栈和队列是STL（C++标准库）里面的两个数据结构</p><p>C++标准库是有多个版本的，要知道我们使用的STL是哪个版本，才能知道对应的栈和队列的实现原理</p><p><strong>三个最为普遍的STL版本：</strong></p><p>HP STL 其他版本的C++ STL，一般是以HP STL为蓝本实现出来的，HP STL是C++ STL的第一个实现版本，而且开放源代码。</p><p>P.J.Plauger STL 由P.J.Plauger参照HP STL实现出来的，被Visual C++编译器所采用，不是开源的。</p><p>SGI STL 由Silicon Graphics Computer Systems公司参照HP STL实现，被Linux的C++编译器GCC所采用，SGI STL是开源软件，源码可读性甚高。</p><p>接下来介绍的栈和队列也是SGI STL里面的数据结构， 知道了使用版本，才知道对应的底层实现。</p><p>栈提供push 和 pop 等等接口，所有元素必须符合先进后出规则，所以栈不提供走访功能，也不提供迭代器(iterator)。 不像是set 或者map 提供迭代器iterator来遍历所有元素。</p><p>栈是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的（也就是说我们可以控制使用哪种容器来实现栈的功能）。</p><p>所以STL中栈往往不被归类为容器，而被归类为container adapter（容器适配器）。</p><p>那么问题来了，STL 中栈是用什么容器实现的？</p><p>栈的内部结构，栈的底层实现可以是vector，deque，list 都是可以的， 主要就是数组和链表的底层实现。</p><p>我们常用的SGI STL，如果没有指定底层实现的话，默认是以deque为缺省情况下栈的底层结构。</p><p>deque是一个双向队列，只要封住一段，只开通另一端就可以实现栈的逻辑了。</p><p>SGI STL中 队列底层实现缺省情况下一样使用deque实现的。</p><p>我们也可以指定vector为栈的底层实现，初始化语句如下</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::stack&lt;<span class="type">int</span>, std::vector&lt;<span class="type">int</span>&gt; &gt; third;  <span class="comment">// 使用vector为底层容器的栈</span></span><br></pre></td></tr></table></figure><p><strong>队列</strong></p><p>队列中先进先出的数据结构，同样不允许有遍历行为，不提供迭代器, SGI STL中队列一样是以deque为缺省情况下的底部结构。</p><p>也可以指定list 为起底层实现，初始化queue的语句如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::queue&lt;<span class="type">int</span>, std::list&lt;<span class="type">int</span>&gt;&gt; third; <span class="comment">// 定义以list为底层容器的队列</span></span><br></pre></td></tr></table></figure><p>所以STL 队列也不被归类为容器，而被归类为container adapter（ 容器适配器）。</p><p>这里讲的都是C++语言中的情况， 使用其他语言也要思考栈与队列的底层实现问题</p><h2 id="leetcode题目链接-3"><a href="#leetcode题目链接-3" class="headerlink" title="leetcode题目链接"></a>leetcode题目链接</h2><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/description/">用栈实现队列</a></p><p>两个栈，一个进  一个出</p><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/description/">用队列实现栈</a></p><p>一个队列</p><p>将除了最后一个元素外的所有元素重新添加到队列尾部即可实现先进后出</p><p><a href="https://leetcode.cn/problems/valid-parentheses/description/">有效的括号</a></p><p>括号匹配是使用栈解决的经典问题</p><p>失败有三种情况：</p><p>左边多了</p><p>左右不匹配</p><p>右边多了</p><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/description/">删除字符串中的所有相邻重复项</a></p><p>有效的括号 是匹配左右括号，本题是匹配相邻元素，最后都是做消除的操作</p><p>可以使用一个栈作为辅助，可以把字符串直接作为栈，这样就省去了最后再把栈转化为字符串的操作</p><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/">逆波兰表达式求值</a></p><p>每一个子表达式要得出一个结果，然后拿这个结果再进行运算，这不就是一个相邻字符串消除的过程</p><p><a href="https://leetcode.cn/problems/sliding-window-maximum/description/">滑动窗口最大值</a></p><p>单调队列（再看一下）</p><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/description/">前 K 个高频元素</a></p><p>要统计元素出现频率<br>对频率排序<br>找出前K个高频元素(小顶堆)</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><h3 id="二叉树的种类"><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h3><p><strong>满二叉树</strong>  </p><p><strong>完全二叉树</strong></p><p><strong>二叉搜索树</strong></p><p>二叉搜索树是一个有序树。</p><p>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</p><p>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</p><p>它的左、右子树也分别为二叉排序树  </p><p><strong>平衡二叉搜索树</strong></p><p>平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树，所以map、set的增删操作时间时间复杂度是logn，</p><p>注意这里没有说unordered_map、unordered_set，unordered_map、unordered_set底层实现是哈希表</p><h3 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h3><p><strong>二叉树可以链式存储，也可以顺序存储</strong></p><h3 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h3><p>二叉树主要有两种遍历方式：</p><pre><code>深度优先遍历：先往深走，遇到叶子节点再往回走广度优先遍历：一层一层的去遍历</code></pre><p>从深度优先遍历和广度优先遍历进一步拓展，才有如下遍历方式：</p><p><strong>深度优先遍历</strong></p><pre><code>前序遍历（递归法，迭代法）中序遍历（递归法，迭代法）后序遍历（递归法，迭代法）</code></pre><p><strong>广度优先遍历</strong></p><pre><code>层次遍历（迭代法）</code></pre><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><p>链式存储的二叉树节点的定义方式：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="letcode题目"><a href="#letcode题目" class="headerlink" title="letcode题目"></a>letcode题目</h2><h3 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h3><p><strong>递归算法三要素</strong></p><ol><li><p>确定递归函数的参数和返回值： 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</p></li><li><p>确定终止条件： 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</p></li><li><p>确定单层递归的逻辑： 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</p></li></ol><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/description/">二叉树的前序遍历</a></p><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/description/">二叉树的后序遍历</a></p><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/description/">二叉树的中序遍历</a></p><p>二叉树的迭代遍历</p><p>二叉树的统一迭代法</p><h3 id="二叉树层序遍历"><a href="#二叉树层序遍历" class="headerlink" title="二叉树层序遍历"></a>二叉树层序遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/description/">二叉树的层序遍历</a></p><p>用一个辅助数据结构即队列来实现，队列先进先出，符合一层一层遍历的逻辑</p><p><a href="">二叉树的层次遍历 II</a></p><p>相对于二叉树的层序遍历，就是最后把result数组反转一下就可以了。<br>reverse(begin(),end())</p><p><a href="https://leetcode.cn/problems/binary-tree-right-side-view/description/">二叉树的右视图</a></p><p>层序遍历的时候，判断是否遍历到单层的最后面的元素，如果是，就放进result数组中，随后返回result就可以了。</p><p><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/description/">二叉树的层平均值</a></p><p>层序遍历的时候把一层求个总和在取一个均值</p><p>因为要求均值，所以定义的vector要为double类型</p><p><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/description/">在每个树行中找最大值</a></p><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/">填充每个节点的下一个右侧节点指针</a></p><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/">填充每个节点的下一个右侧节点指针II</a></p><p>和上题一样</p><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/">二叉树的最大深度</a></p><p>前序求的是深度，后序求的是高度</p><p>而根节点的高度就是二叉树的最大深度</p><p>递归 求左右子树的高度  然后再求最大值  然后+1</p><p>同样可以层序遍历，每层+1</p><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/">二叉树的最小深度</a></p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。注意是叶子节点。</p><p>左右子树都为空的节点才是叶子节点！</p><h3 id="其他题目链接"><a href="#其他题目链接" class="headerlink" title="其他题目链接"></a>其他题目链接</h3><p><a href="https://leetcode.cn/problems/invert-binary-tree/description/">翻转二叉树</a></p><p>遍历的过程中去翻转每一个节点的左右孩子就可以达到整体翻转的效果。</p><p>注意只要把每一个节点的左右孩子翻转一下，就可以达到整体翻转的效果</p><p>这道题目使用前序遍历和后序遍历都可以，唯独中序遍历不方便，因为中序遍历会把某些节点的左右孩子翻转了两次！</p><p>红黑树就是一种二叉平衡搜索树，这两个树不是独立的，所以C++中map、multimap、set、multiset的底层实现机制是二叉平衡搜索树，再具体一点是红黑树。</p><p><a href="https://leetcode.cn/problems/symmetric-tree/description/">对称二叉树</a></p><p>比较的其实不是左孩子和右孩子，而是左节点右节点</p><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/description/">完全二叉树的节点个数</a></p><p>万能的层序遍历，每次循环+1就是节点个数</p><p>当然也可以用递归</p><p><a href="https://leetcode.cn/problems/balanced-binary-tree/description/">平衡二叉树</a></p><p>求深度可以从上到下去查 所以需要前序遍历（中左右），而高度只能从下到上去查，所以只能后序遍历（左右中）</p><p><a href="https://leetcode.cn/problems/binary-tree-paths/description/">二叉树的所有路径</a></p><p>回溯 后面再看</p><p><a href="https://leetcode.cn/problems/sum-of-left-leaves/description/">左叶子之和</a></p><p>左叶子的明确定义：节点A的左不为空，且左的左右都为空（说明是叶子节点），那么A节点的左为左叶子节点</p><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/description/">找树左下角的值</a></p><p>层序遍历，把每层第一个值赋给result，循环结束最后的值就是树左下角的值</p><p><a href="https://leetcode.cn/problems/path-sum/description/">路径总和</a></p><p>如果最后count &#x3D;&#x3D; 0，同时到了叶子节点的话，说明找到了目标</p><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/">从中序与后序遍历序列构造二叉树</a></p><p>没看懂，之后再看</p><p><a href="https://leetcode.cn/problems/maximum-binary-tree/description/">最大二叉树</a></p><p>在数组[left,right]构造，左右分别构造，找出区间的最大值的索引，创建一个新节点</p><p><a href="https://leetcode.cn/problems/merge-two-binary-trees/description/">合并二叉树</a></p><p>递归</p><p><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/description/">二叉搜索树中的搜索</a></p><p>二叉搜索树是一个有序树</p><p>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值</p><p>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值</p><p>它的左、右子树也分别为二叉搜索树</p><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/description/">验证二叉搜索树</a></p><p>有效 二叉搜索树定义如下：</p><p>节点的左子树只包含 小于 当前节点的数</p><p>节点的右子树只包含 大于 当前节点的数</p><p>所有左子树和右子树自身必须也是二叉搜索树</p><p><strong>中序遍历下，输出的二叉搜索树节点的数值是有序序列</strong></p><p><strong>二叉搜索树中不能有重复元素</strong></p><p>所以先中序遍历整个树得到一个数组，然后判断这个数组是否有序</p><p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/description/">二叉搜索树的最小绝对差</a></p><p>二叉搜索树是有序的</p><p>遇到在二叉搜索树上求什么最值，差值之类的，就把它想成在一个有序数组上求最值，求差值</p><p><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/description/">二叉搜索树中的众数</a></p><p>把这个树都遍历了，用 map 统计频率，用 vector 排个序，最后出去前面高频的元素</p><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/description/">二叉树的最近公共祖先</a></p><p>后面再做，还有7题</p><p><a href=""> 二叉搜索树的最近公共祖先</a></p><p>26-33</p><h1 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h1><h2 id="理论基础-1"><a href="#理论基础-1" class="headerlink" title="理论基础"></a>理论基础</h2><p>回溯法也可以叫做回溯搜索法，它是一种搜索的方式。</p><p>回溯是递归的副产品，只要有递归就会有回溯。</p><h3 id="回溯法的效率"><a href="#回溯法的效率" class="headerlink" title="回溯法的效率"></a>回溯法的效率</h3><p>回溯法并不是什么高效的算法。</p><p>回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案，如果想让回溯法高效一些，可以加一些剪枝的操作，但也改不了回溯法就是穷举的本质。</p><h3 id="回溯法解决的问题"><a href="#回溯法解决的问题" class="headerlink" title="回溯法解决的问题"></a>回溯法解决的问题</h3><p>回溯法，一般可以解决如下几种问题：</p><p>组合问题：N个数里面按一定规则找出k个数的集合</p><p>切割问题：一个字符串按一定规则有几种切割方式</p><p>子集问题：一个N个数的集合里有多少符合条件的子集</p><p>排列问题：N个数按一定规则全排列，有几种排列方式</p><p>棋盘问题：N皇后，解数独等等</p><p>组合是不强调元素顺序的，排列是强调元素顺序。</p><p>组合无序，排列有序</p><h3 id="如何理解回溯法"><a href="#如何理解回溯法" class="headerlink" title="如何理解回溯法"></a>如何理解回溯法</h3><p>回溯法解决的问题都可以抽象为树形结构</p><p>因为回溯法解决的都是在集合中递归查找子集，集合的大小就构成了树的宽度，递归的深度就构成了树的深度。</p><p>递归就要有终止条件，所以必然是一棵高度有限的树（N叉树）。</p><h3 id="回溯法模板"><a href="#回溯法模板" class="headerlink" title="回溯法模板"></a>回溯法模板</h3><p><strong>回溯三部曲</strong></p><p><strong>回溯函数模板返回值以及参数</strong></p><p>回溯算法中函数返回值一般为<strong>void</strong>。</p><p>因为回溯算法需要的参数可不像二叉树递归的时候那么容易一次性确定下来，所以一般是先写逻辑，然后需要什么参数，就填什么参数。</p><p>回溯函数伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure><p><strong>回溯函数终止条件</strong></p><p>什么时候达到了终止条件，树中就可以看出，一般来说搜到叶子节点了，也就找到了满足条件的一条答案，把这个答案存放起来，并结束本层递归。</p><p>所以回溯函数终止条件伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">    存放结果;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回溯搜索的遍历过程</strong></p><p>回溯法一般是在集合中递归搜索，集合的大小构成了树的宽度，递归的深度构成的树的深度。</p><p>回溯函数遍历过程伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">    处理节点;</span><br><span class="line">    <span class="built_in">backtracking</span>(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">    回溯，撤销处理结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环就是遍历集合区间，可以理解一个节点有多少个孩子，这个for循环就执行多少次</p><p>backtracking这里自己调用自己，实现递归</p><p>for循环可以理解是横向遍历，backtracking（递归）就是纵向遍历，这样就把这棵树全遍历完了，一般来说，搜索叶子节点就是找的其中一个结果了</p><p><strong>回溯算法模板框架如下：</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(参数)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        <span class="built_in">backtracking</span>(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LeetCode题目链接"><a href="#LeetCode题目链接" class="headerlink" title="LeetCode题目链接"></a>LeetCode题目链接</h2><p><a href="https://leetcode.cn/problems/combinations/">组合</a></p><p><img src="/posts/f4c4f07f/11.png"></p><p>每次从集合中选取元素，可选择的范围随着选择的进行而收缩，调整可选择的范围</p><p>图中可以发现n相当于树的宽度，k相当于树的深度</p><p>图中每次搜索到了叶子节点，我们就找到了一个结果</p><p>剪枝：</p><p>如果for循环选择的起始位置之后的元素个数 已经不足 我们需要的元素个数了，那么就没有必要搜索了</p><ol><li><p>已经选择的元素个数：path.size();</p></li><li><p>所需需要的元素个数为: k - path.size();</p></li><li><p>列表中剩余元素（n-i） &gt;&#x3D; 所需需要的元素个数（k - path.size()）</p></li><li><p>在集合n中至多要从该起始位置 : i &lt;&#x3D; n - (k - path.size()) + 1，开始遍历</p></li></ol><p><a href="https://leetcode.cn/problems/combination-sum-iii/description/">组合总和III</a></p><p>处理过程 和 回溯过程是一一对应的，处理有加，回溯就要有减</p><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">电话号码的字母组合</a></p><p><a href="https://leetcode.cn/problems/combination-sum/description/">组合总和</a></p><p><a href="https://leetcode.cn/problems/combination-sum-ii/description/">组合总和II</a></p><p>树层去重的话，需要对数组排序</p><p><a href="https://leetcode.cn/problems/palindrome-partitioning/description/">分割回文串</a></p><p><a href="https://leetcode.cn/problems/restore-ip-addresses/description/">复原IP地址</a></p><p>段位以0为开头的数字不合法</p><p>段位里有非正整数字符不合法</p><p>段位如果大于255了不合法</p><p><a href="https://leetcode.cn/problems/subsets/description/">子集</a></p><p><a href="https://leetcode.cn/problems/subsets-ii/description/">子集II</a></p><p>判断一个字符串是否是回文,可以使用双指针法，一个指针从前向后，一个指针从后向前，如果前后指针所指向的元素是相等的，就是回文字符串了。</p><p>此系列博客是我在学习过程中，参考代码随想录博客，自己手敲实现一遍的，作为一个学习过程的记录。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机房预约系统-学习记录</title>
      <link href="/posts/acfe04e1.html"/>
      <url>/posts/acfe04e1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><a href="https://www.bilibili.com/video/BV1et411b73Z/?spm_id_from=333.337.search-card.all.click&vd_source=1c8b0af391894cdb44e3942161a1de4f">学习视频链接</a></p><h1 id="机房预约系统需求分析"><a href="#机房预约系统需求分析" class="headerlink" title="机房预约系统需求分析"></a>机房预约系统需求分析</h1><h2 id="系统简介"><a href="#系统简介" class="headerlink" title="系统简介"></a>系统简介</h2><p>学校现有几个规格不同的机房，由于使用时经常出现”撞车”现象,现开发一套机房预约系统，解决这一问题。</p><h2 id="身份简介"><a href="#身份简介" class="headerlink" title="身份简介"></a>身份简介</h2><p>分别有三种身份使用该程序</p><ul><li><strong>学生代表</strong>：申请使用机房</li><li><strong>教师</strong>：审核学生的预约申请</li><li><strong>管理员</strong>：给学生、教师创建账号</li></ul><h2 id="机房简介"><a href="#机房简介" class="headerlink" title="机房简介"></a>机房简介</h2><p>机房总共有3间</p><ul><li>1号机房   — 最大容量20人</li><li>2号机房   — 最多容量50人</li><li>3号机房   — 最多容量100人</li></ul><h2 id="申请简介"><a href="#申请简介" class="headerlink" title="申请简介"></a>申请简介</h2><ul><li>申请的订单每周由管理员负责清空。</li><li>学生可以预约未来一周内的机房使用，预约的日期为周一至周五，预约时需要选择预约时段（上午、下午）</li><li>教师来审核预约，依据实际情况审核预约通过或者不通过</li></ul><h2 id="系统具体需求"><a href="#系统具体需求" class="headerlink" title="系统具体需求"></a>系统具体需求</h2><ul><li>首先进入登录界面，可选登录身份有：<ul><li>学生代表</li><li>老师</li><li>管理员</li><li>退出</li></ul></li><li>每个身份都需要进行验证后，进入子菜单<ul><li>学生需要输入 ：学号、姓名、登录密码</li><li>老师需要输入：职工号、姓名、登录密码</li><li>管理员需要输入：管理员姓名、登录密码</li></ul></li><li>学生具体功能<ul><li>申请预约    —   预约机房</li><li>查看自身的预约    —  查看自己的预约状态</li><li>查看所有预约   —   查看全部预约信息以及预约状态</li><li>取消预约    —   取消自身的预约，预约成功或审核中的预约均可取消</li><li>注销登录    —   退出登录</li></ul></li><li>教师具体功能<ul><li>查看所有预约   —   查看全部预约信息以及预约状态</li><li>审核预约    —   对学生的预约进行审核</li><li>注销登录    —   退出登录</li></ul></li><li>管理员具体功能<ul><li>添加账号    —   添加学生或教师的账号，需要检测学生编号或教师职工号是否重复</li><li>查看账号    —   可以选择查看学生或教师的全部信息</li><li>查看机房    —   查看所有机房的信息</li><li>清空预约    —   清空所有预约记录</li><li>注销登录    —   退出登录</li></ul></li></ul><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p><img src="/posts/acfe04e1/1.png"></p><h1 id="创建主菜单-搭建接口-退出功能实现"><a href="#创建主菜单-搭建接口-退出功能实现" class="headerlink" title="创建主菜单&amp;&amp;搭建接口&amp;&amp;退出功能实现"></a>创建主菜单&amp;&amp;搭建接口&amp;&amp;退出功能实现</h1><p>在主函数main中添加菜单提示</p><p>接受用户的选择，搭建接口</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;======================  欢迎来到传智播客机房预约系统  =====================&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;请输入您的身份&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t -------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          1.学生代表           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          2.老    师           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          3.管 理 员           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          0.退    出           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t -------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入您的选择: &quot;</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; select; <span class="comment">//接受用户选择</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (select) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//学生身份</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">//老师身份</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">//管理员身份</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">//退出系统</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">             cout &lt;&lt; <span class="string">&quot;输入有误，请重新选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/acfe04e1/2.png"></p><h1 id="创建身份类"><a href="#创建身份类" class="headerlink" title="创建身份类"></a>创建身份类</h1><h2 id="身份的基类"><a href="#身份的基类" class="headerlink" title="身份的基类"></a>身份的基类</h2><p>在整个系统中，有三种身份，分别为：学生代表、老师以及管理员</p><p>三种身份有其共性也有其特性，因此我们可以将三种身份抽象出一个身份基类 Identity</p><p>在头文件下创建Identity.h文件</p><p>Identity.h中添加如下代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//身份抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Identity</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">string m_Name; <span class="comment">//用户名</span></span><br><span class="line">string m_Pwd;  <span class="comment">//密码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="学生类"><a href="#学生类" class="headerlink" title="学生类"></a>学生类</h2><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ul><li><p>学生类主要功能是可以通过类中成员函数，实现预约实验室操作</p></li><li><p>学生类中主要功能有：</p><ul><li>显示学生操作的菜单界面</li><li>申请预约</li><li>查看自身预约</li><li>查看所有预约</li><li>取消预约</li></ul><p>​</p></li></ul><h3 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h3><ul><li>在头文件以及源文件下创建 student.h 和 student.cpp文件</li></ul><p>student.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> :<span class="keyword">public</span> Identity &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造(学号、姓名、密码)</span></span><br><span class="line"><span class="built_in">Student</span>(<span class="type">int</span> id, string name, string pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">applyOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//查看我的预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showMyOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showAllOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cancelOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生学号</span></span><br><span class="line"><span class="type">int</span> m_Id;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>student.cpp中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Student::<span class="built_in">Student</span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造(学号、姓名、密码)</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="type">int</span> id, string name, string pwd) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::applyOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看我的预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::showMyOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::showAllOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::cancelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="老师类"><a href="#老师类" class="headerlink" title="老师类"></a>老师类</h2><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><ul><li><p>教师类主要功能是查看学生的预约，并进行审核</p></li><li><p>教师类中主要功能有：</p><ul><li><p>显示教师操作的菜单界面</p></li><li><p>查看所有预约</p></li><li><p>审核预约</p><p>​</p></li></ul></li></ul><h3 id="类的创建-1"><a href="#类的创建-1" class="headerlink" title="类的创建"></a>类的创建</h3><ul><li>在头文件以及源文件下创建 teacher.h 和 teacher.cpp文件</li></ul><p>teacher.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> :<span class="keyword">public</span> Identity &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">Teacher</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 (职工编号，姓名，密码)</span></span><br><span class="line"><span class="built_in">Teacher</span>(<span class="type">int</span> empId, string name, string pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showAllOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">validOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_EmpId; <span class="comment">//教师编号</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>teacher.cpp中添加如下代码:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 (职工编号，姓名，密码)</span></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(<span class="type">int</span> empId, string name, string pwd) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::showAllOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::validOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管理员类"><a href="#管理员类" class="headerlink" title="管理员类"></a>管理员类</h2><h3 id="功能分析-2"><a href="#功能分析-2" class="headerlink" title="功能分析"></a>功能分析</h3><ul><li><p>管理员类主要功能是对学生和老师账户进行管理，查看机房信息以及清空预约记录</p></li><li><p>管理员类中主要功能有：</p><ul><li><p>显示管理员操作的菜单界面</p></li><li><p>添加账号</p></li><li><p>查看账号</p></li><li><p>查看机房信息</p></li><li><p>清空预约记录</p><p>​</p></li></ul></li></ul><h3 id="类的创建-2"><a href="#类的创建-2" class="headerlink" title="类的创建"></a>类的创建</h3><ul><li>在头文件以及源文件下创建 manager.h 和 manager.cpp文件</li></ul><p>manager.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> :<span class="keyword">public</span> Identity &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">Manager</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造  管理员姓名，密码</span></span><br><span class="line"><span class="built_in">Manager</span>(string name, string pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择菜单</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showComputer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cleanFile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>manager.cpp中添加如下代码:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;manager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>(string name, string pwd) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::addPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::cleanFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/acfe04e1/3.png"></p><h1 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h1><h2 id="全局文件添加"><a href="#全局文件添加" class="headerlink" title="全局文件添加"></a>全局文件添加</h2><p>功能描述：</p><ul><li>不同的身份可能会用到不同的文件操作，我们可以将所有的文件名定义到一个全局的文件中</li><li>在头文件中添加 <strong>globalFile.h</strong> 文件</li><li>并添加如下代码：</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADMIN_FILE     <span class="string">&quot;admin.txt&quot;</span></span></span><br><span class="line"><span class="comment">//学生文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_FILE   <span class="string">&quot;student.txt&quot;</span></span></span><br><span class="line"><span class="comment">//教师文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_FILE   <span class="string">&quot;teacher.txt&quot;</span></span></span><br><span class="line"><span class="comment">//机房信息文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COMPUTER_FILE  <span class="string">&quot;computerRoom.txt&quot;</span></span></span><br><span class="line"><span class="comment">//订单文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORDER_FILE     <span class="string">&quot;order.txt&quot;</span></span></span><br></pre></td></tr></table></figure><p>并且在同级目录下，创建这几个文件</p><p><img src="/posts/acfe04e1/4.png"></p><h2 id="登录函数封装"><a href="#登录函数封装" class="headerlink" title="登录函数封装"></a>登录函数封装</h2><p>功能描述：</p><ul><li>根据用户的选择，进入不同的身份登录</li></ul><p>在 预约系统的.cpp 文件中添加全局函数 <code>void LoginIn(string fileName, int type)</code></p><p>参数：</p><ul><li>fileName  — 操作的文件名</li><li>type      —  登录的身份  （1代表学生、2代表老师、3代表管理员）</li></ul><p>LoginIn中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;globalFile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LoginIn</span><span class="params">(string fileName, <span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Identity * person = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(fileName, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件不存在情况</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备接受用户信息</span></span><br><span class="line">    <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">string name;</span><br><span class="line">string pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生登录</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入你的学号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//教师登录</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入你的职工号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入用户名：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入密码： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//学生登录验证</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//教师登录验证</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">//管理员登录验证</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;验证登录失败!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main函数的不同分支中，填入不同的登录接口</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//学生身份</span></span><br><span class="line"><span class="built_in">LoginIn</span>(STUDENT_FILE, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">//老师身份</span></span><br><span class="line"><span class="built_in">LoginIn</span>(TEACHER_FILE, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">//管理员身份</span></span><br><span class="line"><span class="built_in">LoginIn</span>(ADMIN_FILE, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">//退出系统</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学生登录实现"><a href="#学生登录实现" class="headerlink" title="学生登录实现"></a>学生登录实现</h2><p>在student.txt文件中添加两条学生信息，用于测试</p><p>添加信息:   </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 张三 <span class="number">123</span></span><br><span class="line"><span class="number">2</span> 李四 <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>第一列  代表  <strong>学号</strong></li><li>第二列  代表  <strong>学生姓名</strong></li><li>第三列  代表  <strong>密码</strong></li></ul><p>在Login函数的学生分支中加入如下代码，验证学生身份</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生登录验证</span></span><br><span class="line"><span class="type">int</span> fId;</span><br><span class="line">string fName;</span><br><span class="line">string fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (id == fId &amp;&amp; name == fName &amp;&amp; pwd == fPwd)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;学生验证登录成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">person = <span class="keyword">new</span> <span class="built_in">Student</span>(id, name, pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入学生身份的子菜单</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/acfe04e1/5.png"></p><h2 id="教师登录实现"><a href="#教师登录实现" class="headerlink" title="教师登录实现"></a>教师登录实现</h2><p>在teacher.txt文件中添加一条老师信息，用于测试</p><p>添加信息:   </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 老王 <span class="number">123</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>第一列  代表  <strong>教师职工编号</strong></li><li>第二列  代表  <strong>教师姓名</strong></li><li>第三列  代表  <strong>密码</strong></li></ul><p>在Login函数的教师分支中加入如下代码，验证教师身份</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//教师登录验证</span></span><br><span class="line"><span class="type">int</span> fId;</span><br><span class="line">string fName;</span><br><span class="line">string fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (id == fId &amp;&amp; name == fName &amp;&amp; pwd == fPwd)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;教师验证登录成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">person = <span class="keyword">new</span> <span class="built_in">Teacher</span>(id, name, pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入老师身份的子菜单</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/acfe04e1/6.png"></p><h2 id="管理员登录实现"><a href="#管理员登录实现" class="headerlink" title="管理员登录实现"></a>管理员登录实现</h2><p>在admin.txt文件中添加一条管理员信息</p><p>添加信息:   </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">admin <span class="number">123</span></span><br></pre></td></tr></table></figure><p>其中：<code>admin</code>代表管理员用户名，<code>123</code>代表管理员密码</p><p>在Login函数的管理员分支中加入如下代码，验证管理员身份</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//管理员登录验证</span></span><br><span class="line">string fName;</span><br><span class="line">string fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (name == fName &amp;&amp; pwd == fPwd)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;验证登录成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//登录成功后，按任意键进入管理员界面</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="comment">//创建管理员对象</span></span><br><span class="line">person = <span class="keyword">new</span> <span class="built_in">Manager</span>(name, pwd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入管理员身份的子页面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/acfe04e1/7.png"></p><h1 id="管理员模块"><a href="#管理员模块" class="headerlink" title="管理员模块"></a>管理员模块</h1><h2 id="管理员登录和注销"><a href="#管理员登录和注销" class="headerlink" title="管理员登录和注销"></a>管理员登录和注销</h2><p>在Manager类的构造函数中，初始化管理员信息，代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>(string name, string pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="管理员子菜单"><a href="#管理员子菜单" class="headerlink" title="管理员子菜单"></a>管理员子菜单</h3><ul><li>在机房预约系统.cpp中，当用户登录的是管理员，添加管理员菜单接口</li><li>将不同的分支提供出来<ul><li>添加账号</li><li>查看账号</li><li>查看机房</li><li>清空预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void managerMenu(Identity * &amp;manager)</code>，代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//管理员菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">managerMenu</span><span class="params">(Identity*&amp; manager)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//调用管理员菜单</span></span><br><span class="line">manager-&gt;<span class="built_in">operMenu</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将父类指针转为子类指针，调用子类里其他接口</span></span><br><span class="line">Manager* man = (Manager*)manager;</span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受用户选择</span></span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号</span></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加账号&quot;</span> &lt;&lt; endl;</span><br><span class="line">man-&gt;<span class="built_in">addPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查看账号&quot;</span> &lt;&lt; endl;</span><br><span class="line">man-&gt;<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看机房</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">3</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查看机房&quot;</span> &lt;&lt; endl;</span><br><span class="line">man-&gt;<span class="built_in">showComputer</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空预约</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">4</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空预约&quot;</span> &lt;&lt; endl;</span><br><span class="line">man-&gt;<span class="built_in">cleanFile</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">delete</span> manager; <span class="comment">//销毁掉堆区对象</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;注销成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菜单功能实现"><a href="#菜单功能实现" class="headerlink" title="菜单功能实现"></a>菜单功能实现</h3><ul><li>在实现成员函数<code>void Manager::operMenu()</code> 代码如下：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎管理员：&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;登录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ---------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          1.添加账号            |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          2.查看账号            |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          3.查看机房            |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          4.清空预约            |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          0.注销登录            |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ---------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择您的操作： &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口对接"><a href="#接口对接" class="headerlink" title="接口对接"></a>接口对接</h3><ul><li>管理员成功登录后，调用管理员子菜单界面</li><li>在管理员登录验证分支中，添加代码：</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入管理员子菜单</span></span><br><span class="line"><span class="built_in">managerMenu</span>(person);</span><br></pre></td></tr></table></figure><h2 id="添加账号"><a href="#添加账号" class="headerlink" title="添加账号"></a>添加账号</h2><p>功能描述：</p><ul><li>给学生或教师添加新的账号</li></ul><p>功能要求：</p><ul><li>添加时学生学号不能重复、教师职工号不能重复</li></ul><h3 id="添加功能实现"><a href="#添加功能实现" class="headerlink" title="添加功能实现"></a>添加功能实现</h3><p>在Manager的<strong>addPerson</strong>成员函数中，实现添加新账号功能，代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加账号  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::addPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入添加账号的类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、添加学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、添加老师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string fileName; <span class="comment">//操作文件名</span></span><br><span class="line">string tip; <span class="comment">//提示id</span></span><br><span class="line">ofstream ofs; <span class="comment">//文件操作对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select; <span class="comment">//接受用户的选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">fileName = STUDENT_FILE; <span class="comment">//添加的是学生</span></span><br><span class="line">tip = <span class="string">&quot;请输入学号： &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fileName = TEACHER_FILE; <span class="comment">//添加的是老师</span></span><br><span class="line">tip = <span class="string">&quot;请输入职工编号：&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用追加的方式，写文件</span></span><br><span class="line">ofs.<span class="built_in">open</span>(fileName, ios::out | ios::app);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id; <span class="comment">//学号 职工号</span></span><br><span class="line">string name; <span class="comment">//姓名</span></span><br><span class="line">string pwd; <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; tip &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入姓名： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入密码： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向文件中添加数据</span></span><br><span class="line">ofs &lt;&lt; id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pwd &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去重操作"><a href="#去重操作" class="headerlink" title="去重操作"></a>去重操作</h2><p>功能描述：添加新账号时，如果是重复的学生编号，或是重复的教师职工编号，提示有误</p><h3 id="读取信息"><a href="#读取信息" class="headerlink" title="读取信息"></a>读取信息</h3><p>要去除重复的账号，首先要先将学生和教师的账号信息获取到程序中，方可检测</p><p>在manager.h中，添加两个容器，用于存放学生和教师的信息</p><p>添加一个新的成员函数  <code>void initVector()</code> 初始化容器</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initVector</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生容器</span></span><br><span class="line">vector&lt;Student&gt; vStu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师容器</span></span><br><span class="line">vector&lt;Teacher&gt; vTea;</span><br></pre></td></tr></table></figure><p>在manager.cpp中，实现成员函数<code>void initVector()</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::initVector</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//清空容器</span></span><br><span class="line">vStu.<span class="built_in">clear</span>();</span><br><span class="line">vTea.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取学生文件中信息</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(STUDENT_FILE, ios::in);</span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件读取失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student s;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; s.m_Id &amp;&amp; ifs &gt;&gt; s.m_Name &amp;&amp; ifs &gt;&gt; s.m_Pwd) &#123;</span><br><span class="line">vStu.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前学生数量为： &quot;</span> &lt;&lt; vStu.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">ifs.<span class="built_in">close</span>(); <span class="comment">//学生初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取老师文件信息</span></span><br><span class="line">ifs.<span class="built_in">open</span>(TEACHER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件读取失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher t;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; t.m_EmpId &amp;&amp; ifs &gt;&gt; t.m_Name &amp;&amp; ifs &gt;&gt; t.m_Pwd) &#123;</span><br><span class="line">vTea.<span class="built_in">push_back</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前教师数量为： &quot;</span> &lt;&lt; vTea.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在有参构造函数中，调用初始化容器函数</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>(string name, string pwd) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initVector</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="去重函数封装"><a href="#去重函数封装" class="headerlink" title="去重函数封装"></a>去重函数封装</h3><p>在manager.h文件中添加成员函数<code> bool checkRepeat(int id, int type);</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检测重复 参数:(传入id，传入类型) 返回值：(true 代表有重复，false代表没有重复)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkRepeat</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> type)</span></span>;</span><br></pre></td></tr></table></figure><p>在manager.cpp文件中实现成员函数  <code> bool checkRepeat(int id, int type);</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检测重复 参数:(传入id，传入类型) 返回值：(true 代表有重复，false代表没有重复)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Manager::checkRepeat</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;Student&gt;::iterator it = vStu.<span class="built_in">begin</span>(); it != vStu.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line"><span class="keyword">if</span> (id == it-&gt;m_Id) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;Teacher&gt;::iterator it = vTea.<span class="built_in">begin</span>(); it != vTea.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line"><span class="keyword">if</span> (id == it-&gt;m_EmpId) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加去重操作"><a href="#添加去重操作" class="headerlink" title="添加去重操作"></a>添加去重操作</h3><p>在添加学生编号或者教师职工号时，检测是否有重复</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加账号  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::addPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入添加账号的类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、添加学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、添加老师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string fileName; <span class="comment">//操作文件名</span></span><br><span class="line">string tip; <span class="comment">//提示id</span></span><br><span class="line">ofstream ofs; <span class="comment">//文件操作对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select; <span class="comment">//接受用户的选项</span></span><br><span class="line"></span><br><span class="line">string errorTip; <span class="comment">//重复错误提示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">fileName = STUDENT_FILE; <span class="comment">//添加的是学生</span></span><br><span class="line">tip = <span class="string">&quot;请输入学号： &quot;</span>;</span><br><span class="line">errorTip = <span class="string">&quot;学号重复，请重新输入&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fileName = TEACHER_FILE; <span class="comment">//添加的是老师</span></span><br><span class="line">tip = <span class="string">&quot;请输入职工编号：&quot;</span>;</span><br><span class="line">errorTip = <span class="string">&quot;职工号重复，请重新输入&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用追加的方式，写文件</span></span><br><span class="line">ofs.<span class="built_in">open</span>(fileName, ios::out | ios::app);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id; <span class="comment">//学号 职工号</span></span><br><span class="line">string name; <span class="comment">//姓名</span></span><br><span class="line">string pwd; <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; tip &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> ret = <span class="keyword">this</span>-&gt;<span class="built_in">checkRepeat</span>(id, select);</span><br><span class="line"></span><br><span class="line"><span class="comment">//真 有重复</span></span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">cout &lt;&lt; errorTip &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入姓名： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入密码： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向文件中添加数据</span></span><br><span class="line">ofs &lt;&lt; id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pwd &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">////调用初始化容器接口，重新获取文件中的数据</span></span><br><span class="line"><span class="comment">//this-&gt;initVector();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">Student ss;</span><br><span class="line">ss.m_Id = id;</span><br><span class="line">ss.m_Name = name;</span><br><span class="line">ss.m_Pwd = pwd;</span><br><span class="line">vStu.<span class="built_in">push_back</span>(ss);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Teacher tt;</span><br><span class="line">tt.m_EmpId = id;</span><br><span class="line">tt.m_Name = name;</span><br><span class="line">tt.m_Pwd = pwd;</span><br><span class="line">vTea.<span class="built_in">push_back</span>(tt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试<br><img src="/posts/acfe04e1/8.png"></p><h2 id="显示账号"><a href="#显示账号" class="headerlink" title="显示账号"></a>显示账号</h2><p>功能描述：显示学生信息或教师信息</p><h3 id="显示功能实现"><a href="#显示功能实现" class="headerlink" title="显示功能实现"></a>显示功能实现</h3><p>在Manager的<strong>showPerson</strong>成员函数中，实现显示账号功能，代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">(Student&amp; s)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;学号： &quot;</span> &lt;&lt; s.m_Id &lt;&lt; <span class="string">&quot;\t姓名： &quot;</span> &lt;&lt; s.m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; s.m_Pwd &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printTeacher</span><span class="params">(Teacher&amp; t)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;职工号： &quot;</span> &lt;&lt; t.m_EmpId &lt;&lt; <span class="string">&quot;\t姓名： &quot;</span> &lt;&lt; t.m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; t.m_Pwd &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择查看内容：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、查看所有学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、查看所有老师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>; <span class="comment">//接受用户选择</span></span><br><span class="line"></span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有学生信息如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">for_each(vStu.<span class="built_in">begin</span>(), vStu.<span class="built_in">end</span>(), printStudent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有老师信息如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">for_each(vTea.<span class="built_in">begin</span>(), vTea.<span class="built_in">end</span>(), printTeacher);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试<br><img src="/posts/acfe04e1/9.png"></p><h2 id="查看机房"><a href="#查看机房" class="headerlink" title="查看机房"></a>查看机房</h2><h3 id="添加机房信息"><a href="#添加机房信息" class="headerlink" title="添加机房信息"></a>添加机房信息</h3><p>案例需求中，机房一共有三个，其中1号机房容量20台机器，2号50台，3号100台</p><p>我们可以将信息录入到computerRoom.txt中</p><p><img src="/posts/acfe04e1/10.png"></p><h3 id="机房类创建"><a href="#机房类创建" class="headerlink" title="机房类创建"></a>机房类创建</h3><p>在头文件下，创建新的文件computerRoom.h</p><p>并添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//机房类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerRoom</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_ComId; <span class="comment">//机房id号</span></span><br><span class="line"><span class="type">int</span> m_MaxNum; <span class="comment">//机房最大容量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="初始化机房信息"><a href="#初始化机房信息" class="headerlink" title="初始化机房信息"></a>初始化机房信息</h3><p>在Manager管理员类下，添加机房的容器，用于保存机房信息</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//机房容器</span></span><br><span class="line">vector&lt;ComputerRoom&gt; vCom;</span><br></pre></td></tr></table></figure><p>在Manager有参构造函数中，追加代码，初始化机房信息</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取机房信息</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">open</span>(COMPUTER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line">ComputerRoom com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; com.m_ComId &amp;&amp; ifs &gt;&gt; com.m_MaxNum) &#123;</span><br><span class="line">vCom.<span class="built_in">push_back</span>(com);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前机房数量为： &quot;</span> &lt;&lt; vCom.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><h3 id="显示机房信息"><a href="#显示机房信息" class="headerlink" title="显示机房信息"></a>显示机房信息</h3><p>在Manager类的showComputer成员函数中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;机房信息如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;ComputerRoom&gt;::iterator it = vCom.<span class="built_in">begin</span>(); it != vCom.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;机房编号： &quot;</span> &lt;&lt; it-&gt;m_ComId &lt;&lt; <span class="string">&quot; 机房最大容量： &quot;</span> &lt;&lt; it-&gt;m_MaxNum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/acfe04e1/11.png"></p><h2 id="清空预约"><a href="#清空预约" class="headerlink" title="清空预约"></a>清空预约</h2><p>功能描述：</p><p>清空生成的<code>order.txt</code>预约文件</p><h3 id="清空功能实现"><a href="#清空功能实现" class="headerlink" title="清空功能实现"></a>清空功能实现</h3><p>在Manager的cleanFile成员函数中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::cleanFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(ORDER_FILE, ios::trunc)</span></span>;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="学生模块"><a href="#学生模块" class="headerlink" title="学生模块"></a>学生模块</h1><h2 id="学生登录和注销"><a href="#学生登录和注销" class="headerlink" title="学生登录和注销"></a>学生登录和注销</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>在Student类的构造函数中，初始化学生信息</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有参构造(学号、姓名、密码)</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="type">int</span> id, string name, string pwd) &#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="管理员子菜单-1"><a href="#管理员子菜单-1" class="headerlink" title="管理员子菜单"></a>管理员子菜单</h3><ul><li>在机房预约系统.cpp中，当用户登录的是学生，添加学生菜单接口</li><li>将不同的分支提供出来<ul><li>申请预约</li><li>查看我的预约</li><li>查看所有预约</li><li>取消预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void studentMenu(Identity * &amp;manager)</code> 代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">studentMenu</span><span class="params">(Identity* &amp;student)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//学生菜单</span></span><br><span class="line">student-&gt;<span class="built_in">operMenu</span>();</span><br><span class="line"></span><br><span class="line">Student* stu = (Student*)student;</span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">stu-&gt;<span class="built_in">applyOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看自身预约</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>) &#123;</span><br><span class="line">stu-&gt;<span class="built_in">showMyOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">3</span>) &#123;</span><br><span class="line">stu-&gt;<span class="built_in">showAllOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">4</span>) &#123;</span><br><span class="line">stu-&gt;<span class="built_in">cancelOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">delete</span> student;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;注销成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菜单功能实现-1"><a href="#菜单功能实现-1" class="headerlink" title="菜单功能实现"></a>菜单功能实现</h3><ul><li>在实现成员函数<code>void Student::operMenu()</code> 代码如下：</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎学生代表：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;登录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ----------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          1.申请预约              |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          2.查看我的预约          |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          3.查看所有预约          |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          4.取消预约              |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          0.注销登录              |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ----------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择您的操作： &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口对接-1"><a href="#接口对接-1" class="headerlink" title="接口对接"></a>接口对接</h3><p>学生成功登录后，调用学生的子菜单界面</p><p>在学生登录分支中，添加代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入学生子菜单</span></span><br><span class="line"><span class="built_in">studentMenu</span>(person);</span><br></pre></td></tr></table></figure><h2 id="申请预约"><a href="#申请预约" class="headerlink" title="申请预约"></a>申请预约</h2><h3 id="获取机房信息"><a href="#获取机房信息" class="headerlink" title="获取机房信息"></a>获取机房信息</h3><p>在申请预约时，学生可以看到机房的信息，因此我们需要让学生获取到机房的信息</p><p>在student.h中添加新的成员函数如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//机房容器</span></span><br><span class="line">vector&lt;ComputerRoom&gt; vCom;</span><br></pre></td></tr></table></figure><p>在学生的有参构造函数中追加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取机房信息</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(COMPUTER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line">ComputerRoom c;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; c.m_ComId &amp;&amp; ifs &gt;&gt; c.m_MaxNum) &#123;</span><br><span class="line">vCom.<span class="built_in">push_back</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><p>至此，vCom容器中保存了所有机房的信息</p><h3 id="预约功能实现"><a href="#预约功能实现" class="headerlink" title="预约功能实现"></a>预约功能实现</h3><p>在student.cpp中实现成员函数 <code>void Student::applyOrder()</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::applyOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;机房开放时间为周一至周五！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入申请预约的时间：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、周一&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、周二&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3、周三&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4、周四&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;5、周五&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> date = <span class="number">0</span>;<span class="comment">//日期</span></span><br><span class="line"><span class="type">int</span> interval = <span class="number">0</span>;<span class="comment">//时间段</span></span><br><span class="line"><span class="type">int</span> room = <span class="number">0</span>;<span class="comment">//房间号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; date;</span><br><span class="line"><span class="keyword">if</span> (date &gt;= <span class="number">1</span> &amp;&amp; date &lt;= <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入申请预约的时间段：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、上午&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、下午&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; interval;</span><br><span class="line"><span class="keyword">if</span> (interval &gt;= <span class="number">1</span> &amp;&amp; interval &lt;= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择机房：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1号机房容量：&quot;</span> &lt;&lt; vCom[<span class="number">0</span>].m_MaxNum &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2号机房容量：&quot;</span> &lt;&lt; vCom[<span class="number">1</span>].m_MaxNum &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3号机房容量：&quot;</span> &lt;&lt; vCom[<span class="number">2</span>].m_MaxNum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; room;</span><br><span class="line"><span class="keyword">if</span> (room &gt;= <span class="number">1</span> &amp;&amp; room &lt;= <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约成功！审核中ing&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(ORDER_FILE, ios::app)</span></span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; date &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; interval &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; room &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/acfe04e1/12.png"></p><h2 id="显示预约"><a href="#显示预约" class="headerlink" title="显示预约"></a>显示预约</h2><h3 id="创建预约类"><a href="#创建预约类" class="headerlink" title="创建预约类"></a>创建预约类</h3><p>功能描述：</p><p>显示预约记录时，需要从文件中获取到所有记录，用来显示，创建预约的类来管理记录以及更新</p><p>在头文件以及源文件下分别创建<strong>orderFile.h</strong> 和 <strong>orderFile.cpp</strong>文件</p><p>orderFile.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderFile</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">OrderFile</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updateOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录的容器  key --- 记录的条数  value --- 具体记录的键值对信息</span></span><br><span class="line">map&lt;<span class="type">int</span>, map&lt;string, string&gt;&gt; m_orderData;</span><br><span class="line"></span><br><span class="line"><span class="comment">//预约记录条数</span></span><br><span class="line"><span class="type">int</span> m_Size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>构造函数</strong>中获取所有信息，并存放在容器中，添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">OrderFile::<span class="built_in">OrderFile</span>() &#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(ORDER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line">string date;      <span class="comment">//日期</span></span><br><span class="line">string interval;  <span class="comment">//时间段</span></span><br><span class="line">string stuId;     <span class="comment">//学生编号</span></span><br><span class="line">string stuName;   <span class="comment">//学生姓名</span></span><br><span class="line">string roomId;    <span class="comment">//机房编号</span></span><br><span class="line">string status;    <span class="comment">//预约状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>; <span class="comment">//预约记录个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; date &amp;&amp; ifs &gt;&gt; interval &amp;&amp; ifs &gt;&gt; stuId &amp;&amp; ifs &gt;&gt; stuName &amp;&amp; ifs &gt;&gt; roomId &amp;&amp; ifs &gt;&gt; status) &#123;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cout &lt;&lt; date &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; interval &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; stuId &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; stuName &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; roomId &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; status &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">string key;</span><br><span class="line">string value;</span><br><span class="line">map&lt;string, string&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos = date.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = date.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = date.<span class="built_in">substr</span>(pos + <span class="number">1</span>, date.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = interval.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = interval.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = interval.<span class="built_in">substr</span>(pos + <span class="number">1</span>, interval.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = stuId.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = stuId.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = stuId.<span class="built_in">substr</span>(pos + <span class="number">1</span>, stuId.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = stuName.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = stuName.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = stuName.<span class="built_in">substr</span>(pos + <span class="number">1</span>, stuName.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = roomId.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = roomId.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = roomId.<span class="built_in">substr</span>(pos + <span class="number">1</span>, roomId.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = status.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = status.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = status.<span class="built_in">substr</span>(pos + <span class="number">1</span>, status.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将小map容器放入到大的map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_orderData.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="keyword">this</span>-&gt;m_Size, m));</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//for (map&lt;int, map&lt;string, string&gt;&gt;::iterator it = m_orderData.begin(); it != m_orderData.end();it++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//for (map&lt;string, string&gt;::iterator mit = it-&gt;second.begin(); mit != it-&gt;second.end(); mit++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; mit-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; mit-&gt;second &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新预约记录的成员函数updateOrder代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OrderFile::updateOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//预约记录0条</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(ORDER_FILE, ios::out | ios::trunc)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_Size; i++) &#123;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;date&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;interval&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;status&quot;</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vscode只能用cmake？ 小白不建议用vscode</p><h3 id="显示自身预约"><a href="#显示自身预约" class="headerlink" title="显示自身预约"></a>显示自身预约</h3><p>首先添加几条预约记录</p><p>然后在Student类的<code>void Student::showMyOrder()</code>成员函数中，添加代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看我的预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::showMyOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++) &#123;</span><br><span class="line"><span class="comment">//string利用.c_str()转const char *       利用atoi(const char *)转int</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">atoi</span>(of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>].<span class="built_in">c_str</span>()) == <span class="keyword">this</span>-&gt;m_Id) &#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约日期： 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t时间段：&quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t机房号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">string status = <span class="string">&quot;状态： &quot;</span>;  <span class="comment">// 0 取消的预约   1 审核中   2 已预约 -1 预约失败</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核未通过，预约失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/acfe04e1/13.png"></p><h3 id="显示所有预约"><a href="#显示所有预约" class="headerlink" title="显示所有预约"></a>显示所有预约</h3><p>在Student类的<code>void Student::showAllOrder()</code>成员函数中，添加如下代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::showAllOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++) &#123;</span><br><span class="line">cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约日期： 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t时间段：&quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t学号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t机房号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line">string status = <span class="string">&quot;状态： &quot;</span>;  <span class="comment">// 0 取消的预约   1 审核中   2 已预约 -1 预约失败</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核未通过，预约失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取消预约"><a href="#取消预约" class="headerlink" title="取消预约"></a>取消预约</h2><p>在Student类的<code>void Student::cancelOrder()</code>成员函数中，添加代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::cancelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;审核中或预约成功的记录可以取消，请输入取消的记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;<span class="comment">//存放在最大容器中的下标编号</span></span><br><span class="line"><span class="type">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++) &#123;</span><br><span class="line"><span class="comment">//先判断学号</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">atoi</span>(of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>].<span class="built_in">c_str</span>()) == <span class="keyword">this</span>-&gt;m_Id) &#123;</span><br><span class="line"><span class="comment">//筛选状态 审核中或预约成功</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span> || of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">cout &lt;&lt; index++ &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约日期： 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t时间段：&quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t机房号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line">string status = <span class="string">&quot;状态： &quot;</span>;  <span class="comment">// 0 取消的预约   1 审核中   2 已预约  -1 预约失败</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入取消的记录,0代表返回&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select &gt;= <span class="number">0</span> &amp;&amp; select &lt;= v.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;记录所在位置： &quot; &lt;&lt; v[select - 1] &lt;&lt; endl;</span></span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">of.<span class="built_in">updateOrder</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;已取消预约&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><p><img src="/posts/acfe04e1/14.png"></p><h1 id="教师模块"><a href="#教师模块" class="headerlink" title="教师模块"></a>教师模块</h1><h2 id="教师登录和注销"><a href="#教师登录和注销" class="headerlink" title="教师登录和注销"></a>教师登录和注销</h2><h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h3><p>在Teacher类的构造函数中，初始化教师信息，代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有参构造 (职工编号，姓名，密码)</span></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(<span class="type">int</span> empId, string name, string pwd) &#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpId = empId;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="教师子菜单"><a href="#教师子菜单" class="headerlink" title="教师子菜单"></a>教师子菜单</h3><ul><li>在机房预约系统.cpp中，当用户登录的是教师，添加教师菜单接口</li><li>将不同的分支提供出来<ul><li>查看所有预约</li><li>审核预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void TeacherMenu(Person * &amp;manager)</code> 代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//教师菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TeacherMenu</span><span class="params">(Identity* &amp;teacher)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//教师菜单界面</span></span><br><span class="line">teacher-&gt;<span class="built_in">operMenu</span>();</span><br><span class="line"></span><br><span class="line">Teacher* tea = (Teacher*)teacher;</span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line">tea-&gt;<span class="built_in">showAllOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line">tea-&gt;<span class="built_in">validOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">delete</span> teacher;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;注销成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菜单功能实现-2"><a href="#菜单功能实现-2" class="headerlink" title="菜单功能实现"></a>菜单功能实现</h3><p>在实现成员函数<code>void Teacher::operMenu()</code> 代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//教师菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎教师：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;登录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ----------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                  |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          1.查看所有预约          |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                  |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          2.审核预约              |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                  |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          0.注销登录              |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                  |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ----------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择您的操作： &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口对接-2"><a href="#接口对接-2" class="headerlink" title="接口对接"></a>接口对接</h3><p>教师成功登录后，调用教师的子菜单界面</p><p>在教师登录分支中，添加代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入教师子菜单</span></span><br><span class="line"><span class="built_in">TeacherMenu</span>(person);</span><br></pre></td></tr></table></figure><h2 id="查看所有预约"><a href="#查看所有预约" class="headerlink" title="查看所有预约"></a>查看所有预约</h2><h3 id="所有预约功能实现"><a href="#所有预约功能实现" class="headerlink" title="所有预约功能实现"></a>所有预约功能实现</h3><p>该功能与学生身份的查看所有预约功能相似，用于显示所有预约记录</p><p>在Teacher.cpp中实现成员函数 <code>void Teacher::showAllOrder()</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::showAllOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++) &#123;</span><br><span class="line">cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约日期： 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t时间段：&quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t学号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t机房号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">string status = <span class="string">&quot;状态： &quot;</span>;  <span class="comment">// 0 取消的预约   1 审核中   2 已预约   -1 预约失败</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核未通过，预约失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/acfe04e1/15.png"></p><h2 id="审核预约"><a href="#审核预约" class="headerlink" title="审核预约"></a>审核预约</h2><h3 id="审核功能实现"><a href="#审核功能实现" class="headerlink" title="审核功能实现"></a>审核功能实现</h3><p>功能描述：教师审核学生的预约，依据实际情况审核预约</p><p>在Teacher.cpp中实现成员函数 <code>void Teacher::validOrder()</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::validOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;待审核的预约记录如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ++index &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约日期： 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t机房：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">string status = <span class="string">&quot;状态： &quot;</span>;  <span class="comment">// 0取消的预约   1 审核中   2 已预约  -1 预约失败</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入审核的预约记录,0代表返回&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select &gt;= <span class="number">0</span> &amp;&amp; select &lt;= v.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入审核结果&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、不通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>) &#123;</span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;2&quot;</span>;<span class="comment">//通过</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;-1&quot;</span>;<span class="comment">//不通过</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">of.<span class="built_in">updateOrder</span>();<span class="comment">//更新预约记录</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;审核完毕！&quot;</span> &lt;&lt; endl; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="/posts/acfe04e1/16.png"></p><p>完结撒花！</p><p>完结撒花！</p><p>完结撒花！</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练手小项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置c++工作区</title>
      <link href="/posts/9a0efe1e.html"/>
      <url>/posts/9a0efe1e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STL的演讲比赛流程管理系统——学习记录</title>
      <link href="/posts/b2eda4b5.html"/>
      <url>/posts/b2eda4b5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><a href="https://www.bilibili.com/video/BV1et411b73Z/?spm_id_from=333.337.search-card.all.click&vd_source=1c8b0af391894cdb44e3942161a1de4f">学习视频链接</a></p><h1 id="演讲比赛程序需求"><a href="#演讲比赛程序需求" class="headerlink" title="演讲比赛程序需求"></a>演讲比赛程序需求</h1><h2 id="比赛规则"><a href="#比赛规则" class="headerlink" title="比赛规则"></a>比赛规则</h2><p>学校句型一场演讲比赛，共有12个人参加，比赛共两轮，第一轮为淘汰赛，第二轮为决赛</p><p>每名选手都有对应的编号，如10001~10012</p><p>比赛方式：分组比赛，每组6个人</p><p>第一轮分为两个小组，整体按照选手编号进行抽签后顺序演讲</p><p>十个评委分别给每名选手打分，去除最高分和最低分，求的平均分为本轮选手的成绩</p><p>第二轮为决赛，前三名胜出</p><p>每轮比赛过后需要显示晋级选手的信息</p><h2 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h2><ul><li><p>开始演讲比赛：完成整届比赛的流程，每个比赛阶段需要给用户一个提示，用户按任意键后继续下一个阶段</p></li><li><p>查看往届记录：查看之前比赛前三名结果，每次比赛都会记录到文件中，文件用.csv后缀名保存</p></li><li><p>清空比赛记录：将文件中数据清空</p></li><li><p>退出比赛程序：可以退出当前程序</p></li></ul><h1 id="创建管理类"><a href="#创建管理类" class="headerlink" title="创建管理类"></a>创建管理类</h1><p>功能描述：</p><ul><li><p>提供菜单界面与用户交互</p></li><li><p>对演讲比赛流程进行控制</p></li><li><p>与文件的读写交互</p></li></ul><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>在头文件和源文件的文件夹下分别创建speechManager.h和speechManager.cpp文件</p><h1 id="菜单功能"><a href="#菜单功能" class="headerlink" title="菜单功能"></a>菜单功能</h1><p>功能描述：与用户的沟通界面</p><h2 id="添加成员函数"><a href="#添加成员函数" class="headerlink" title="添加成员函数"></a>添加成员函数</h2><p>在管理类speechManager.h中添加成员函数 void show_Menu();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::show_Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;********************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;**欢迎参加演讲比赛**&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.开始演讲比赛&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.查看往届记录&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3.清空比赛记录&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0.退出比赛程序&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;********************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试菜单功能：</p><p><img src="/posts/b2eda4b5/1.png"></p><h1 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h1><p>功能描述：实现退出程序</p><h2 id="提供功能接口"><a href="#提供功能接口" class="headerlink" title="提供功能接口"></a>提供功能接口</h2><p>在main函数中提供分支选择，提供每个功能接口</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建管理类对象</span></span><br><span class="line">SpeechManager sm;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice = <span class="number">0</span>; <span class="comment">//用来存储用户的选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">sm.<span class="built_in">show_Menu</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//开始比赛</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//查看记录</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//清空记录</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出系统</span></span><br><span class="line">sm.<span class="built_in">exitSystem</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现退出功能"><a href="#实现退出功能" class="headerlink" title="实现退出功能"></a>实现退出功能</h2><p>在speechManager.h中提供退出系统的成员函数void exitSystem();</p><p>在speechManager.cpp中提供具体的功能实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//退出系统</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::exitSystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/2.png"></p><h1 id="演讲比赛功能"><a href="#演讲比赛功能" class="headerlink" title="演讲比赛功能"></a>演讲比赛功能</h1><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><p>比赛流程分析：</p><p>抽签-》开始演讲比赛-》显示第一轮比赛结果-》</p><p>抽签-》开始演讲比赛-》显示前三名结果-》保存分数</p><h2 id="创建选手类"><a href="#创建选手类" class="headerlink" title="创建选手类"></a>创建选手类</h2><p>选手类中的属性包含：选手姓名、分数</p><p>头文件中创建speaker.h文件，并添加代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//选手类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Speaker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_Name;<span class="comment">//姓名</span></span><br><span class="line"><span class="type">double</span> m_Score[<span class="number">2</span>];<span class="comment">//分数，最多有两轮得分</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><h3 id="成员属性添加"><a href="#成员属性添加" class="headerlink" title="成员属性添加"></a>成员属性添加</h3><p>在speechManager.h中添加属性</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成员属性</span></span><br><span class="line"><span class="comment">//保存第一轮比赛选手编号容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一轮晋级选手编号容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//胜出前三名选手编号容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vVictory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放编号以及对应具体选手容器</span></span><br><span class="line">map&lt;<span class="type">int</span>, Speaker&gt;m_Speaker;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放比赛轮数</span></span><br><span class="line"><span class="type">int</span> m_Index;</span><br></pre></td></tr></table></figure><h3 id="初始化属性"><a href="#初始化属性" class="headerlink" title="初始化属性"></a>初始化属性</h3><p>在speechManager.h中提供开始比赛的成员函数void initSpeech()；</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initSpeech</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现void initSpeech()；</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::initSpeech</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//容器都置空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;v2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;vVictory.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化比赛轮数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpeechManager构造函数中调用void initSpeech()；</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">SpeechManager::<span class="built_in">SpeechManager</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建选手"><a href="#创建选手" class="headerlink" title="创建选手"></a>创建选手</h3><p>在speechManager.h中提供开始比赛的成员函数void createSpeaker();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建12名选手</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createSpeaker</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现void createSpeaker();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建12名选手</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::createSpeaker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string nameSeed = <span class="string">&quot;ABCDEFGHIJL&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nameSeed.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">string name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">name = name + nameSeed[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建具体选手</span></span><br><span class="line">Speaker sp;</span><br><span class="line">sp.m_Name = name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">sp.m_Score[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选手编号，并且放入到v1容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.<span class="built_in">push_back</span>(i + <span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//选手编号以及对应选手，放入到map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">insert</span>( <span class="built_in">make_pair</span>(i + <span class="number">10001</span>, sp));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpeechManager类的构造函数中调用void createSpeaker();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">SpeechManager::<span class="built_in">SpeechManager</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建12名选手</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">createSpeaker</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试在main函数中，可以在创建完管理对象后，使用下列代码测试12名选手初始状态</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建管理类对象</span></span><br><span class="line">SpeechManager sm;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试12名选手创建</span></span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, Speaker&gt;::iterator it = sm.m_Speaker.<span class="built_in">begin</span>(); it != sm.m_Speaker.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;选手编号：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;second.m_Name &lt;&lt; <span class="string">&quot;分数：&quot;</span> &lt;&lt; it-&gt;second.m_Score[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/3.png"></p><h3 id="开始比赛成员函数"><a href="#开始比赛成员函数" class="headerlink" title="开始比赛成员函数"></a>开始比赛成员函数</h3><p>在speechManager.h中提供开始比赛的成员函数void startSpeech();</p><p>该函数功能是控制比赛的流程</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">startSpeech</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中将startSpeech的空实现先写入</p><p>先将整个比赛的流程写到函数中</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::startSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示晋级结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示最终结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽签"><a href="#抽签" class="headerlink" title="抽签"></a>抽签</h3><p><strong>功能描述：</strong></p><p>正式比赛前，所有选手的比赛顺序需要打乱，我们只需要将存放选手编号的容器打乱次序</p><p>在speechManager.h中提供抽签的成员函数void speechDraw();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speechDraw</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现void speechDraw();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::speechDraw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第 &lt;&lt; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot; &gt;&gt; 轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;抽签后的演讲顺序如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//第一轮比赛</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v1.<span class="built_in">begin</span>(); it != v1.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//第二轮比赛</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v2.<span class="built_in">begin</span>(); it != v2.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在startSpeech比赛流程控制函数中，调用抽签函数</p><p>在main函数中，分支1选项中，调用开始比赛的接口</p><p>测试结果：</p><p><img src="/posts/b2eda4b5/4.png"></p><h3 id="开始比赛"><a href="#开始比赛" class="headerlink" title="开始比赛"></a>开始比赛</h3><p>在speechManager.h中提供比赛的成员函数void speechContest();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比赛</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speechContest</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数void speechContest();</p><p><strong>补充知识</strong></p><p>在C++中，deque（双端队列）是一种序列容器，类似于 vector，但是它允许在头尾两端进行高效的插入和删除操作。deque 是 “double-ended queue” 的缩写。</p><p>deque 和 vector 的主要区别在于，在 deque 中，元素存储在一个或多个连续的块中，而不是单个连续的数组。这使得 deque 更适合在头尾进行插入和删除操作，因为这些操作在 deque 中的开销更小。</p><p>deque 的特点包括：</p><ol><li><p>高效的插入和删除操作：在 deque 的头尾插入和删除元素的时间复杂度为 O(1)。</p></li><li><p>随机访问：deque 支持通过索引随机访问元素，时间复杂度为 O(1)。</p></li><li><p>动态增长：deque 可以动态地增长以容纳更多的元素，因此没有固定的大小限制。</p></li><li><p>内存分配：deque 使用多个块来存储元素，这意味着在插入和删除操作时，不需要移动所有元素，因此在特定情况下可能比 vector 更高效。</p></li></ol><p>在使用 deque 时，你可以像使用数组一样通过索引访问元素，也可以使用 <code>push_front()</code>、<code>push_back()</code>、<code>pop_front()</code>、<code>pop_back()</code> 等成员函数在头尾插入和删除元素。</p><p>使用 deque 需要包含头文件 <code>&lt;deque&gt;</code>。deque 是标准模板库（STL）中的一部分，因此可以在标准 C++ 中直接使用。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比赛</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::speechContest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛正式开始-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备临时容器，存放小组成绩</span></span><br><span class="line">multimap&lt;<span class="type">double</span>, <span class="type">int</span>, greater&lt;<span class="type">double</span>&gt;&gt; groupSorce;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;<span class="comment">//记录人员个数，6人一组</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v_Src; <span class="comment">//比赛选手容器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line">v_Src = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v_Src = v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历所有选手进行比赛</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v_Src.<span class="built_in">begin</span>(); it != v_Src.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//评委打分</span></span><br><span class="line">deque&lt;<span class="type">double</span>&gt;d;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="type">double</span> score = (<span class="built_in">rand</span>() % <span class="number">401</span> + <span class="number">600</span>) / <span class="number">10.f</span>; <span class="comment">// 600 ~ 1000</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score &lt;&lt; &quot;\t&quot;;</span></span><br><span class="line">d.<span class="built_in">push_back</span>(score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">double</span>&gt;()); <span class="comment">//降序排序</span></span><br><span class="line"></span><br><span class="line">d.<span class="built_in">pop_back</span>();<span class="comment">// 去除最低分</span></span><br><span class="line">d.<span class="built_in">pop_front</span>();<span class="comment">// 去除最高分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这行代码利用STL算法`accumulate`来计算双端队列`d`中所有元素的总和，并将结果赋给`sum`变量。</span></span><br><span class="line"><span class="comment">具体来说，`accumulate`函数的第一个参数是容器的起始迭代器（`d.begin()`），</span></span><br><span class="line"><span class="comment">第二个参数是容器的结束迭代器（`d.end()`），第三个参数是初始值（这里是0.0f）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在这里，初始值是`0.0f`，表示总和的数据类型为`double`。</span></span><br><span class="line"><span class="comment">因为第三个参数的类型和容器中元素的类型一致，所以会发生隐式类型转换，将整数0转换为浮点数0.0。</span></span><br><span class="line"><span class="comment">`accumulate`函数会从容器的第一个元素开始，依次累加每个元素，直到容器的最后一个元素。</span></span><br><span class="line"><span class="comment">最终的结果会存储在`sum`变量中*/</span></span><br><span class="line"><span class="type">double</span> sum = <span class="built_in">accumulate</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="number">0.0f</span>);<span class="comment">//总分</span></span><br><span class="line"><span class="type">double</span> avg = sum / (<span class="type">double</span>)d.<span class="built_in">size</span>();<span class="comment">//平均分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印平均分</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;编号：&quot; &lt;&lt; *it &lt;&lt; &quot;\t姓名：&quot; &lt;&lt; this-&gt;m_Speaker[*it].m_Name &lt;&lt; &quot;\t获取平均分：&quot; &lt;&lt; avg;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将平均分放入map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] = avg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将打分数据放入临时小组容器中</span></span><br><span class="line">groupSorce.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(avg, *it));<span class="comment">//key是得分，value是具体选手编号</span></span><br><span class="line"><span class="comment">//每6人取出前三名</span></span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">6</span> == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; num / <span class="number">6</span> &lt;&lt; <span class="string">&quot;小组比赛名次：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;<span class="type">double</span>, <span class="type">int</span>, greater&lt;<span class="type">double</span>&gt;&gt;::iterator it = groupSorce.<span class="built_in">begin</span>(); it != groupSorce.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Name &lt;&lt; <span class="string">&quot;\t成绩：&quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取走前三名</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;<span class="type">double</span>, <span class="type">int</span>, greater&lt;<span class="type">double</span>&gt;&gt;::iterator it = groupSorce.<span class="built_in">begin</span>(); it != groupSorce.<span class="built_in">end</span>() &amp;&amp; count &lt; <span class="number">3</span>; it++, count++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line">v2.<span class="built_in">push_back</span>((*it).second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">vVictory.<span class="built_in">push_back</span>((*it).second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">groupSorce.<span class="built_in">clear</span>();<span class="comment">//小组容器清空</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛完毕--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/b2eda4b5/5.png"></p><h3 id="显示比赛分数"><a href="#显示比赛分数" class="headerlink" title="显示比赛分数"></a>显示比赛分数</h3><p>在speechManager.h中提供比赛的成员函数 void showScore();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示比赛结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showScore</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void showScore();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::showScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮晋级选手信息如下------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line">v = v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v = vVictory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;选手编号：&quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Name &lt;&lt; <span class="string">&quot;\t得分：&quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">show_Menu</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二轮比赛"><a href="#第二轮比赛" class="headerlink" title="第二轮比赛"></a>第二轮比赛</h3><p>第二轮比赛流程同第一轮，知识比赛轮数+1，其余流程不变</p><p>在startSpeech比赛流程控制函数中，加入第二轮的流程</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::startSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示晋级结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮开始比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示最终结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/b2eda4b5/6.png"></p><h2 id="保存分数"><a href="#保存分数" class="headerlink" title="保存分数"></a>保存分数</h2><p><strong>功能描述：</strong></p><p>将每次演讲比赛的得分记录到文件中</p><p><strong>功能实现：</strong></p><p>在speechManager.h中添加保存记录的成员函数 void saveRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">saveRecord</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void saveRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存记录</span></span><br><span class="line"><span class="comment">//保存记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::saveRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">&quot;speech.csv&quot;</span>, ios::out | ios::app);<span class="comment">//用追加的方式写文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将每个选手数据写入到文件中</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = vVictory.<span class="built_in">begin</span>(); it != vVictory.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">ofs &lt;&lt; *it &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ofs &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;记录已经保存&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有记录了，文件不为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在startSpeech比赛流程控制函数中，最后调用保存记录分数函数</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::startSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示晋级结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮开始比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示最终结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">saveRecord</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置比赛</span></span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选手</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">createSpeaker</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取往届记录</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">loadRecord</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------本届比赛完毕----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/7.png"></p><h1 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h1><h2 id="读取记录分数"><a href="#读取记录分数" class="headerlink" title="读取记录分数"></a>读取记录分数</h2><p>在speechManager.h中添加保存记录的成员函数 void loadRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loadRecord</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>添加判断文件是否为空的标志 bool fileIsEmpty;</p><p>添加往届记录的容器 <code>map&lt;int, vector&lt;string&gt;&gt; m_Record;</code></p><p>其中m_Record中的key代表第几届，value记录具体的信息</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断文件是否为空</span></span><br><span class="line"><span class="type">bool</span> fileIsEmpty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放往届记录的容器</span></span><br><span class="line">map&lt;<span class="type">int</span>, vector&lt;string&gt;&gt;m_Record;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::initSpeech</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//容器都置空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;v2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;vVictory.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化比赛轮数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化记录容器</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Record.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void loadRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::loadRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;speech.csv&quot;</span>, ios::in)</span></span>;<span class="comment">//读文件</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件不存在</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;</span></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件清空情况</span></span><br><span class="line"><span class="comment">/*char ch;</span></span><br><span class="line"><span class="comment">ifs &gt;&gt; ch;*/</span></span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="built_in">eof</span>()) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;文件为空&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件不为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//ifs.putback(ch);//将上面读取的单个字符放回来</span></span><br><span class="line"></span><br><span class="line">string data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; data) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; data &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">vector&lt;string&gt;v;<span class="comment">//存放6个string字符串</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos = <span class="number">-1</span>;<span class="comment">//查到逗号的位置变量</span></span><br><span class="line"><span class="type">int</span> start = <span class="number">0</span>;<span class="comment">//起始位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">pos = data.<span class="built_in">find</span>(<span class="string">&quot;,&quot;</span>, start);</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">string temp = data.<span class="built_in">substr</span>(start, pos - start);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; temp &lt;&lt; endl;</span></span><br><span class="line">v.<span class="built_in">push_back</span>(temp);</span><br><span class="line"></span><br><span class="line">start = pos + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Record.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(index, v));</span><br><span class="line">index++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//for (map&lt;int, vector&lt;string&gt;&gt;::iterator it = m_Record.begin(); it != m_Record.end(); it++) &#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; it-&gt;first &lt;&lt; &quot;冠军编号：&quot; &lt;&lt; it-&gt;second[0] &lt;&lt; &quot;\t分数：&quot; &lt;&lt; it-&gt;second[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看记录功能"><a href="#查看记录功能" class="headerlink" title="查看记录功能"></a>查看记录功能</h2><p>在speechManager.h中添加保存记录的成员函数 void showRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示往届得分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showRecord</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void showRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示往届得分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::showRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;fileIsEmpty) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在，或记录为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Record.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;届\t&quot;</span> &lt;&lt;</span><br><span class="line"><span class="string">&quot;冠军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\t得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line"><span class="string">&quot;亚军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">2</span>] &lt;&lt; <span class="string">&quot;\t得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">3</span>] &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line"><span class="string">&quot;季军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">4</span>] &lt;&lt; <span class="string">&quot;\t得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">5</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/8.png"></p><h1 id="清空记录"><a href="#清空记录" class="headerlink" title="清空记录"></a>清空记录</h1><p>在speechManager.h中添加清空记录的成员函数 void clearRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearRecrd</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void clearRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::clearRecrd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;确认清空？&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.确认&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.返回&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 打开模式 ios::trunc 如果存在删除文件并重新创建</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;speech.csv&quot;</span>, ios::trunc)</span></span>;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选手</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">createSpeaker</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取往届记录</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">loadRecord</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;speechManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//随机数种子</span></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建管理类对象</span></span><br><span class="line">SpeechManager sm;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试12名选手创建</span></span><br><span class="line"><span class="comment">/*for (map&lt;int, Speaker&gt;::iterator it = sm.m_Speaker.begin(); it != sm.m_Speaker.end(); it++) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;选手编号：&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;second.m_Name &lt;&lt; &quot;分数：&quot; &lt;&lt; it-&gt;second.m_Score[0] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice = <span class="number">0</span>; <span class="comment">//用来存储用户的选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">sm.<span class="built_in">show_Menu</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//开始比赛</span></span><br><span class="line">sm.<span class="built_in">startSpeech</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//查看记录</span></span><br><span class="line">sm.<span class="built_in">showRecord</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//清空记录</span></span><br><span class="line">sm.<span class="built_in">clearRecrd</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出系统</span></span><br><span class="line">sm.<span class="built_in">exitSystem</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- <iframe height=300 width=500 src="9.mp4"> -->]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练手小项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp基础</title>
      <link href="/posts/c8ad3605.html"/>
      <url>/posts/c8ad3605.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><p>在C++中，new 是用于动态分配内存并创建对象的关键字。当使用 new 创建对象时，对象被分配在堆内存中，而不是栈内存中。</p><p>使用 new 的主要原因包括：</p><ul><li><p>动态内存分配： new 允许在程序运行时动态地分配内存空间，而不需要在编译时确定对象的大小。这对于需要灵活管理内存的情况非常有用，例如当对象的大小在运行时才能确定时，或者需要在程序的不同部分共享对象时。</p></li><li><p>对象的生命周期： 使用 new 创建的对象存储在堆内存中，其生命周期由程序员显式管理。这意味着对象在程序员释放内存之前不会被销毁，因此可以在程序的任何地方访问对象。相比之下，栈上的对象的生命周期是由其作用域决定的，一旦超出作用域，对象就会被销毁。</p></li><li><p>返回指针： new 返回一个指向新分配对象的指针，这允许在需要时以指针的形式传递对象，并在需要时释放对象的内存。这在函数返回对象时特别有用，因为函数返回值的大小可能是动态的，或者需要在函数外部持续存在。</p></li></ul><p>尽管使用 new 具有灵活性和控制权，但也需要小心管理动态分配的内存，以防止内存泄漏和悬空指针等问题。因此，在使用 new 分配内存时，通常需要配合使用 delete 来释放内存，以避免内存泄漏。</p><h1 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h1><p>在C++中，this 指针是一个特殊的指针，它指向当前对象。</p><p>this 指针通常在类的成员函数中使用，用于访问当前对象的成员变量和成员函数。</p><p>this 指针主要有以下几个用途：</p><ol><li>区分局部变量和成员变量： 当成员函数的参数名和成员变量名相同时，可以使用 this 指针来明确指示要访问的是成员变量而不是局部变量。例如：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x; <span class="comment">// 使用this指针访问成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>在成员函数中返回对象本身： 当成员函数需要返回当前对象本身时，可以使用 return *this; 。这种技术常用于实现链式调用。例如：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MyClass obj;</span><br><span class="line">obj.<span class="built_in">setValue</span>(<span class="number">10</span>).<span class="built_in">print</span>(); <span class="comment">// setValue函数返回*this，可以直接调用print函数</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在构造函数和析构函数中访问当前对象： 在构造函数和析构函数中，可以使用 this 指针来访问当前对象。这在需要在构造函数和析构函数中对当前对象进行一些额外操作时很有用。</li></ol><h1 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h1><p>在C++中，纯虚函数是一个在基类中声明但没有实现的虚函数。</p><p>纯虚函数的作用主要体现在以下几个方面：</p><ul><li><p>接口定义： 纯虚函数可以用来定义接口，即定义一个接口类，而不提供具体的实现。派生类必须实现这些纯虚函数，从而确保派生类都提供了相同的接口，但具体的实现可以根据派生类的需求来实现。</p></li><li><p>多态性： 纯虚函数可以使得基类指针或引用在运行时指向派生类对象，并调用派生类中相应的实现。这样可以实现多态性，提高了代码的灵活性和可扩展性。</p></li><li><p>抽象类： 包含纯虚函数的类被称为抽象类，它们无法直接创建对象，只能作为基类来派生出其他类。抽象类的存在主要是为了提供一种接口，由派生类来实现具体的行为。</p></li><li><p>框架设计： 在框架设计中，可以使用纯虚函数来定义一些必须由客户程序实现的操作，从而定义了一个框架的结构，并允许客户程序根据自己的需求来定制具体的行为。</p></li></ul><p>总之，纯虚函数的作用在于提供了一种机制，使得类可以定义接口、实现多态性、构建抽象类以及设计框架等。</p><h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><p>函数指针是指向函数的指针变量。</p><p>在C++中，函数也是一种数据类型，因此可以像其他数据类型一样，通过指针来引用和传递函数。函数指针可以存储函数的地址，并且可以通过调用该指针来间接调用函数。</p><p>函数指针的声明方式与普通指针类似，但是要在指针名前面加上函数的返回类型和参数列表，以表示该指针指向的函数的类型。函数指针的语法通常如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">返回类型 (*指针变量名)(参数列表);</span><br></pre></td></tr></table></figure><p>例如，假设有一个函数 <code>void printMessage(const char* message)</code>，那么可以声明一个指向该函数的指针如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> (*ptr)(<span class="type">const</span> <span class="type">char</span>*);</span><br></pre></td></tr></table></figure><p>函数指针的主要用途包括回调函数、动态选择调用的函数等。通过函数指针，可以实现更加灵活和多样化的函数调用方式，提高了程序的可扩展性和可维护性。</p><h1 id="cpp匿名对象"><a href="#cpp匿名对象" class="headerlink" title="cpp匿名对象"></a>cpp匿名对象</h1><p>C++中的匿名对象是指在不使用变量名的情况下创建的临时对象。</p><p>它们通常用于作为函数的参数传递或作为表达式的一部分。</p><p>匿名对象没有变量名，因此不能在其他地方引用，一旦超出了当前作用域，匿名对象就会被销毁。</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Printing from MyClass&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建匿名对象，并调用成员函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>().<span class="built_in">print</span>(); <span class="comment">// 这里的 MyClass() 就是一个匿名对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>MyClass()</code> 创建了一个匿名对象，然后调用了它的 <code>print()</code> 成员函数。</p><h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p>C++中的deque（双端队列）是一种数据结构，它允许在两端进行高效的元素插入和删除操作。deque是由多个连续的存储块组成的，每个存储块通常是一个固定大小的数组，这些数组按需动态分配和释放内存。这种设计使得deque可以高效地支持在队列的两端进行元素的插入和删除操作，而不会像向量（vector）那样在中间插入或删除元素时产生大量的数据搬移。</p><p>deque可以在常量时间内执行以下操作：</p><p>从队列的前端或后端插入或删除一个元素。<br>访问队列的第一个或最后一个元素。<br>由于deque使用了多个存储块，所以在内存中的布局是不连续的。这意味着deque不支持通过指针或迭代器进行随机访问，因为元素在内存中的位置不是连续的。但是，deque仍然可以通过迭代器进行顺序访问，并且支持在常量时间内查找、插入和删除元素。</p><p>总之，deque提供了一种灵活的双端队列实现，可以在两端高效地进行元素的插入、删除和访问操作，并且在插入和删除元素时不会造成大量的数据搬移。</p><p>“多个连续的存储块”指的是<code>deque</code>内部的数据结构。<code>deque</code>通常由多个存储块组成，每个存储块是一个固定大小的数组，用于存储元素。这些存储块在逻辑上是连续的，但在内存中的布局是不连续的。换句话说，<code>deque</code>的每个存储块在内存中都是单独分配的，它们之间可能存在一定的间隔。</p><p>由于<code>deque</code>的每个存储块都是一个固定大小的数组，因此它们具有相同的容量。当需要插入或删除元素时，<code>deque</code>可以根据需要动态地分配或释放存储块，以保持合适的容量。这种设计使得<code>deque</code>在两端执行元素插入和删除操作时具有良好的性能，因为它可以在常量时间内执行这些操作，而不会像向量（<code>vector</code>）那样需要重新分配整个内存空间。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 注意 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
