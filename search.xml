<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机房预约系统</title>
      <link href="/posts/acfe04e1.html"/>
      <url>/posts/acfe04e1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="机房预约系统需求分析"><a href="#机房预约系统需求分析" class="headerlink" title="机房预约系统需求分析"></a>机房预约系统需求分析</h1><h2 id="系统简介"><a href="#系统简介" class="headerlink" title="系统简介"></a>系统简介</h2><p>学校现有几个规格不同的机房，由于使用时经常出现”撞车”现象,现开发一套机房预约系统，解决这一问题。</p><h2 id="身份简介"><a href="#身份简介" class="headerlink" title="身份简介"></a>身份简介</h2><p>分别有三种身份使用该程序</p><ul><li><strong>学生代表</strong>：申请使用机房</li><li><strong>教师</strong>：审核学生的预约申请</li><li><strong>管理员</strong>：给学生、教师创建账号</li></ul><h2 id="机房简介"><a href="#机房简介" class="headerlink" title="机房简介"></a>机房简介</h2><p>机房总共有3间</p><ul><li>1号机房   — 最大容量20人</li><li>2号机房   — 最多容量50人</li><li>3号机房   — 最多容量100人</li></ul><h2 id="申请简介"><a href="#申请简介" class="headerlink" title="申请简介"></a>申请简介</h2><ul><li>申请的订单每周由管理员负责清空。</li><li>学生可以预约未来一周内的机房使用，预约的日期为周一至周五，预约时需要选择预约时段（上午、下午）</li><li>教师来审核预约，依据实际情况审核预约通过或者不通过</li></ul><h2 id="系统具体需求"><a href="#系统具体需求" class="headerlink" title="系统具体需求"></a>系统具体需求</h2><ul><li>首先进入登录界面，可选登录身份有：<ul><li>学生代表</li><li>老师</li><li>管理员</li><li>退出</li></ul></li><li>每个身份都需要进行验证后，进入子菜单<ul><li>学生需要输入 ：学号、姓名、登录密码</li><li>老师需要输入：职工号、姓名、登录密码</li><li>管理员需要输入：管理员姓名、登录密码</li></ul></li><li>学生具体功能<ul><li>申请预约    —   预约机房</li><li>查看自身的预约    —  查看自己的预约状态</li><li>查看所有预约   —   查看全部预约信息以及预约状态</li><li>取消预约    —   取消自身的预约，预约成功或审核中的预约均可取消</li><li>注销登录    —   退出登录</li></ul></li><li>教师具体功能<ul><li>查看所有预约   —   查看全部预约信息以及预约状态</li><li>审核预约    —   对学生的预约进行审核</li><li>注销登录    —   退出登录</li></ul></li><li>管理员具体功能<ul><li>添加账号    —   添加学生或教师的账号，需要检测学生编号或教师职工号是否重复</li><li>查看账号    —   可以选择查看学生或教师的全部信息</li><li>查看机房    —   查看所有机房的信息</li><li>清空预约    —   清空所有预约记录</li><li>注销登录    —   退出登录</li></ul></li></ul><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p><img src="/posts/acfe04e1/1.png"></p><h1 id="创建主菜单-搭建接口-退出功能实现"><a href="#创建主菜单-搭建接口-退出功能实现" class="headerlink" title="创建主菜单&amp;&amp;搭建接口&amp;&amp;退出功能实现"></a>创建主菜单&amp;&amp;搭建接口&amp;&amp;退出功能实现</h1><p>在主函数main中添加菜单提示</p><p>接受用户的选择，搭建接口</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;======================  欢迎来到传智播客机房预约系统  =====================&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;请输入您的身份&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t -------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          1.学生代表           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          2.老    师           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          3.管 理 员           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          0.退    出           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t -------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入您的选择: &quot;</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; select; <span class="comment">//接受用户选择</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (select) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//学生身份</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">//老师身份</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">//管理员身份</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">//退出系统</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">             cout &lt;&lt; <span class="string">&quot;输入有误，请重新选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/acfe04e1/2.png"></p><h1 id="创建身份类"><a href="#创建身份类" class="headerlink" title="创建身份类"></a>创建身份类</h1><h2 id="身份的基类"><a href="#身份的基类" class="headerlink" title="身份的基类"></a>身份的基类</h2><p>在整个系统中，有三种身份，分别为：学生代表、老师以及管理员</p><p>三种身份有其共性也有其特性，因此我们可以将三种身份抽象出一个身份基类 Identity</p><p>在头文件下创建Identity.h文件</p><p>Identity.h中添加如下代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//身份抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Identity</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">string m_Name; <span class="comment">//用户名</span></span><br><span class="line">string m_Pwd;  <span class="comment">//密码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="学生类"><a href="#学生类" class="headerlink" title="学生类"></a>学生类</h2><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ul><li><p>学生类主要功能是可以通过类中成员函数，实现预约实验室操作</p></li><li><p>学生类中主要功能有：</p><ul><li>显示学生操作的菜单界面</li><li>申请预约</li><li>查看自身预约</li><li>查看所有预约</li><li>取消预约</li></ul><p>​</p></li></ul><h3 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h3><ul><li>在头文件以及源文件下创建 student.h 和 student.cpp文件</li></ul><p>student.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> :<span class="keyword">public</span> Identity &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造(学号、姓名、密码)</span></span><br><span class="line"><span class="built_in">Student</span>(<span class="type">int</span> id, string name, string pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">applyOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//查看我的预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showMyOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showAllOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cancelOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生学号</span></span><br><span class="line"><span class="type">int</span> m_Id;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>student.cpp中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Student::<span class="built_in">Student</span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造(学号、姓名、密码)</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="type">int</span> id, string name, string pwd) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::applyOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看我的预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::showMyOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::showAllOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::cancelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="老师类"><a href="#老师类" class="headerlink" title="老师类"></a>老师类</h2><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><ul><li><p>教师类主要功能是查看学生的预约，并进行审核</p></li><li><p>教师类中主要功能有：</p><ul><li><p>显示教师操作的菜单界面</p></li><li><p>查看所有预约</p></li><li><p>审核预约</p><p>​</p></li></ul></li></ul><h3 id="类的创建-1"><a href="#类的创建-1" class="headerlink" title="类的创建"></a>类的创建</h3><ul><li>在头文件以及源文件下创建 teacher.h 和 teacher.cpp文件</li></ul><p>teacher.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> :<span class="keyword">public</span> Identity &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">Teacher</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 (职工编号，姓名，密码)</span></span><br><span class="line"><span class="built_in">Teacher</span>(<span class="type">int</span> empId, string name, string pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showAllOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">validOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_EmpId; <span class="comment">//教师编号</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>teacher.cpp中添加如下代码:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 (职工编号，姓名，密码)</span></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(<span class="type">int</span> empId, string name, string pwd) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::showAllOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::validOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管理员类"><a href="#管理员类" class="headerlink" title="管理员类"></a>管理员类</h2><h3 id="功能分析-2"><a href="#功能分析-2" class="headerlink" title="功能分析"></a>功能分析</h3><ul><li><p>管理员类主要功能是对学生和老师账户进行管理，查看机房信息以及清空预约记录</p></li><li><p>管理员类中主要功能有：</p><ul><li><p>显示管理员操作的菜单界面</p></li><li><p>添加账号</p></li><li><p>查看账号</p></li><li><p>查看机房信息</p></li><li><p>清空预约记录</p><p>​</p></li></ul></li></ul><h3 id="类的创建-2"><a href="#类的创建-2" class="headerlink" title="类的创建"></a>类的创建</h3><ul><li>在头文件以及源文件下创建 manager.h 和 manager.cpp文件</li></ul><p>manager.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> :<span class="keyword">public</span> Identity &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">Manager</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造  管理员姓名，密码</span></span><br><span class="line"><span class="built_in">Manager</span>(string name, string pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择菜单</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showComputer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cleanFile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>manager.cpp中添加如下代码:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;manager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>(string name, string pwd) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::addPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::cleanFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/acfe04e1/3.png"></p><h1 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h1><h2 id="全局文件添加"><a href="#全局文件添加" class="headerlink" title="全局文件添加"></a>全局文件添加</h2><p>功能描述：</p><ul><li>不同的身份可能会用到不同的文件操作，我们可以将所有的文件名定义到一个全局的文件中</li><li>在头文件中添加 <strong>globalFile.h</strong> 文件</li><li>并添加如下代码：</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADMIN_FILE     <span class="string">&quot;admin.txt&quot;</span></span></span><br><span class="line"><span class="comment">//学生文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_FILE   <span class="string">&quot;student.txt&quot;</span></span></span><br><span class="line"><span class="comment">//教师文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_FILE   <span class="string">&quot;teacher.txt&quot;</span></span></span><br><span class="line"><span class="comment">//机房信息文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COMPUTER_FILE  <span class="string">&quot;computerRoom.txt&quot;</span></span></span><br><span class="line"><span class="comment">//订单文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORDER_FILE     <span class="string">&quot;order.txt&quot;</span></span></span><br></pre></td></tr></table></figure><p>并且在同级目录下，创建这几个文件</p><p><img src="/"></p><h2 id="登录函数封装"><a href="#登录函数封装" class="headerlink" title="登录函数封装"></a>登录函数封装</h2><p>功能描述：</p><ul><li>根据用户的选择，进入不同的身份登录</li></ul><p>在 预约系统的.cpp 文件中添加全局函数 <code>void LoginIn(string fileName, int type)</code></p><p>参数：</p><ul><li>fileName  — 操作的文件名</li><li>type      —  登录的身份  （1代表学生、2代表老师、3代表管理员）</li></ul><p>LoginIn中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;globalFile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LoginIn</span><span class="params">(string fileName, <span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Identity * person = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(fileName, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件不存在情况</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">string name;</span><br><span class="line">string pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生登录</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入你的学号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//教师登录</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入你的职工号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入用户名：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入密码： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//学生登录验证</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//教师登录验证</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">//管理员登录验证</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;验证登录失败!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main函数的不同分支中，填入不同的登录接口</p><p><img src="/"></p><h2 id="学生登录实现"><a href="#学生登录实现" class="headerlink" title="学生登录实现"></a>学生登录实现</h2><h2 id="教师登录实现"><a href="#教师登录实现" class="headerlink" title="教师登录实现"></a>教师登录实现</h2><h2 id="管理员登录实现"><a href="#管理员登录实现" class="headerlink" title="管理员登录实现"></a>管理员登录实现</h2>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练手小项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端项目3</title>
      <link href="/posts/593dfc4f.html"/>
      <url>/posts/593dfc4f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端项目2</title>
      <link href="/posts/2e3accd9.html"/>
      <url>/posts/2e3accd9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端项目1</title>
      <link href="/posts/b7339d63.html"/>
      <url>/posts/b7339d63.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式项目2</title>
      <link href="/posts/ce15e2e9.html"/>
      <url>/posts/ce15e2e9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式项目1</title>
      <link href="/posts/571cb353.html"/>
      <url>/posts/571cb353.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>qt项目2</title>
      <link href="/posts/32d9f9cf.html"/>
      <url>/posts/32d9f9cf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>qt项目1</title>
      <link href="/posts/abd0a875.html"/>
      <url>/posts/abd0a875.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法学习</title>
      <link href="/posts/f4c4f07f.html"/>
      <url>/posts/f4c4f07f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li><p><strong>学习和参考的资料来源</strong>：</p><p>  <a href="https://www.programmercarl.com/">代码随想录</a><br>  <a href="https://leetcode.cn/">leetcode</a></p></li></ul><h1 id="补充知识（持续更新ing）"><a href="#补充知识（持续更新ing）" class="headerlink" title="补充知识（持续更新ing）"></a>补充知识（持续更新ing）</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度是一个函数，它定性描述该算法的运行时间。</p><p>通常会估算算法的操作单元数量来代表程序消耗的时间，这里默认CPU的每个单元运行消耗的时间都是相同的。</p><p>假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐进时间复杂度，简称时间复杂度，记为O(f(n))。</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度是一个算法在运行过程中占用内存空间大小的量度，基座S(n) &#x3D; O(f(n))。</p><p>空间复杂度(Space Complexity)基座S(n)依然使用大O来表示。利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。</p><ul><li>空间复杂度是考虑程序运行时占用内存的大小，而不是可执行文件的大小。</li><li>不要以为空间复杂度就已经精确的掌握了程序的内存使用大小，很多因素会影响程序真正内存使用大小，例如编译器的内存对齐，编程语言容器的底层实现等等这些都会影响到程序内存的开销。所以空间复杂度是预先大体评估程序内存使用的大小。</li></ul><p>空间复杂度是logn的情况确实有些特殊，其实是在递归的时候，会出现空间复杂度为logn的情况。</p><h2 id="不同语言的内存管理"><a href="#不同语言的内存管理" class="headerlink" title="不同语言的内存管理"></a>不同语言的内存管理</h2><ul><li>C\C++这种内存堆空间的申请和释放完全考自己管理</li><li>Java依赖JVM来做内存管理，不了解jvm内存管理的机制，很可能会因一些错误的代码写法而导致内存泄漏或内存溢出</li><li>Python内存管理是由私有堆空间管理的，所有的python对象和数据结构都存储在私有对空间中。程序员没有访问堆的权限，只有解释器才能操作。</li></ul><p>例如Python万物皆对象，并且将内存操作封装的很好，所以python的基本数据类型所用的内存会要远大于存放纯数据类型所占的内存，例如，存储int型数据需要四个字节，但是使用python申请一个对象来存放数据的话，所用空间要远大于四个字节。</p><h2 id="C-的内存管理"><a href="#C-的内存管理" class="headerlink" title="C++的内存管理"></a>C++的内存管理</h2><p>程序运行时所需的内存空间分为固定部分和可变部分，如下：</p><p><img src="/posts/f4c4f07f/1.png" alt="内存管理"></p><p>固定部分的内存消耗是不会随着代码运行产生变化的，可变部分则是会产生变化的，更具体一些，一个由C&#x2F;C++编译的程序占用的内存分为以下几个部分：</p><ul><li>栈区(Stack)：由编译器自动分配释放，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构中的栈。</li><li>堆区(Heap)：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS收回。</li><li>未初始化数据区(Uninitialized Data)：存放未初始化的全局变量和静态变量</li><li>初始化数据区(Initialized Data)：存放已经初始化的全局变量和静态变量</li><li>程序代码区(Text)：存放函数体的二进制代码</li></ul><p>代码区和数据区所占空间都是固定的，而且占用的空间非常小，那么看运行时消耗的内存主要看可变部分。</p><p>在可变部分中，栈区间的数据在代码块之心结束之后，系统会自动回收，而堆区间数据是需要程序员自己回收，所以也就是造成内存泄漏的发源地。</p><p>而java和python的话则不需要程序员去考虑内存泄漏的问题，虚拟机都做了这些事情。</p><h2 id="如何计算程序占用多大内存"><a href="#如何计算程序占用多大内存" class="headerlink" title="如何计算程序占用多大内存"></a>如何计算程序占用多大内存</h2><p>想要计算出自己的程序会占用多少内存就一定要了解自己定义的数据类型的大小，如下：</p><p><img src="/posts/f4c4f07f/2.png"></p><p>1个字节占8比特，那么4个字节就是32个比特，可存放数据的大小为2^32，也就是4G空间的大小，即可以寻找4G空间大小的内存地址。</p><p>现在大家使用的计算机一般都是64位了，所以编译器也都是64位的。</p><p>安装64位的操作系统的计算机内存都已经超过了4G，也就是指针大小如果还是4个字节的话，就已经不能寻址全部的内存地址，所以64位编译器使用8个字节的指针才能寻找所有的内存地址。</p><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>只要可以跨平台的编程语言都需要做内存对齐，Java、Python都是一样的。</p><p>为什么会有内存对齐？</p><p>主要有两个原因：</p><ul><li>1.平台原因：不是所有的硬件平台都能访问内存地址上的任意数据，某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。为了同一个程序可以在多平台运行，需要内存对齐。</li><li>2.硬件原因：经过内存对齐后，CPU访问内存的速度大大提升。</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> num;</span><br><span class="line">   <span class="type">char</span> cha;</span><br><span class="line">&#125;st;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> b[<span class="number">100</span>];</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(st) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其输出的结果依次为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">400</span><br><span class="line">100</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>此时会发现，和单纯计算字节数的话是有一些误差的。</p><p>这就是因为内存对齐的原因。</p><p>来看一下内存对齐和非内存对齐产生的效果区别。</p><p>CPU读取内存不是一次读取单个字节，而是一块一块的来读取内存，块的大小可以是2，4，8，16个字节，具体取多少个字节取决于硬件。</p><p>假设CPU把内存划分为4字节大小的块，要读取一个4字节大小的int型数据，来看一下这两种情况下CPU的工作量：</p><p><img src="/posts/f4c4f07f/3.png"></p><p>char型的数据和int型的数据挨在一起，该int数据从地址1开始，那么CPU想要读这个数据的话需要以下几步操作：</p><ul><li>1.因为CPU是四个字节来寻址，首先CPU先读取0、1、2、3处的四个字节数据</li><li>2.CPU读取4、5、6、7处的四个字节数据</li><li>3.合并地址1、2、3、4处四个字节的数据才是本次操作需要的int数据</li></ul><p>此时一共需要两次寻址，一次合并的操作</p><p>内存对齐会浪费内存资源，但事实上，相对来说计算机内存资源一般都是充足的，我们更希望的是提高运行速度。</p><p>编译器一般都会做内存对齐的优化操作，也就是说当考虑程序真正占用的内存大小的时候，也需要认识到内存对齐的影响。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>数组是存放在连续内存空间上的相同类型数据的集合。</p><p>数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p><p>两点注意：</p><ul><li>数组下标都是从0开始的</li><li>数组内存空间的地址是连续的</li></ul><p>正是因为数组的内存空间地址是连续的，所以在删除或增添元素的时候，就难免要移动其他元素的地址。</p><p>数组的元素是不能删的，只能覆盖。</p><p>不同编程语言的内存管理是不一样的，以C++为例，在C++中二维数组是连续分布的。</p><h2 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h2><p><a href="https://leetcode.cn/problems/binary-search/description/">二分查找</a></p><p><a href="https://leetcode.cn/problems/remove-element/description/">移除元素</a></p><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">有序数组的平方</a></p><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">长度最小的子数组</a></p><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/description/">螺旋矩阵 II</a></p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="链表理论基础"><a href="#链表理论基础" class="headerlink" title="链表理论基础"></a>链表理论基础</h2><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null。</p><p>链表的入口节点称为链表的头节点也就是head。</p><p><img src="/posts/f4c4f07f/4.png"></p><h3 id="链表的类型"><a href="#链表的类型" class="headerlink" title="链表的类型"></a>链表的类型</h3><p><strong>单链表</strong></p><p>单链表（Singly Linked List）是一种常见的线性数据结构，由一系列节点组成，每个节点包含两部分：数据部分和指针部分。其中，数据部分用于存储数据，指针部分用于指向下一个节点。</p><p>单链表中的节点按照顺序连接，每个节点只有一个指针指向下一个节点，而最后一个节点的指针部分通常指向一个特殊的值（如NULL），表示链表的结束。</p><p><strong>双链表</strong></p><p>单链表中的指针域只能指向节点的下一个节点。</p><p>双链表：每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。</p><p>双链表既可以向前查询也可以向后查询。</p><p><img src="/posts/f4c4f07f/5.png"></p><p><strong>循环链表</strong></p><p>顾名思义，就是链表首尾相连。</p><p>循环链表可以用来解决瑟夫环问题。</p><p><img src="/posts/f4c4f07f/6.png"></p><h3 id="链表的存储方式"><a href="#链表的存储方式" class="headerlink" title="链表的存储方式"></a>链表的存储方式</h3><p>链表是通过指针域的指针链接在内存中各个节点。</p><p>所以链表中的节点在内存中不是连续分布的，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。</p><p><img src="/posts/f4c4f07f/6.png"></p><h3 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h3><p><strong>删除节点</strong></p><p><strong>添加节点</strong></p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><img src="/posts/f4c4f07f/8.png"></p><p>数组在定义的时候，长度是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。</p><p>链表的长度可以是不固定的，并且可以动态增删，适合数量不固定，频繁增删，较少查询的场景。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/description/">移除链表元素</a></p><p><a href="https://leetcode.cn/problems/design-linked-list/description/">设计链表</a></p><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/">反转链表</a></p><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">两两交换链表中的节点</a></p><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">删除链表的倒数第N个结点</a></p><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">链表相交</a></p><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">环形链表 II</a></p><p><a href=""></a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio工程实践开发(C++)</title>
      <link href="/posts/7b14e812.html"/>
      <url>/posts/7b14e812.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Visual-Studio介绍"><a href="#Visual-Studio介绍" class="headerlink" title="Visual Studio介绍"></a>Visual Studio介绍</h1><h2 id="工具介绍篇"><a href="#工具介绍篇" class="headerlink" title="工具介绍篇"></a>工具介绍篇</h2><h3 id="Visual-Studio-VS-Codeblocks-VS-Visual-Studio-Code"><a href="#Visual-Studio-VS-Codeblocks-VS-Visual-Studio-Code" class="headerlink" title="Visual Studio VS Codeblocks VS Visual Studio Code"></a>Visual Studio VS Codeblocks VS Visual Studio Code</h3><h3 id="Visual-Studio-C-简单工程演示"><a href="#Visual-Studio-C-简单工程演示" class="headerlink" title="Visual Studio C++简单工程演示"></a>Visual Studio C++简单工程演示</h3><h2 id="工具使用篇"><a href="#工具使用篇" class="headerlink" title="工具使用篇"></a>工具使用篇</h2><h3 id="应用程序工程"><a href="#应用程序工程" class="headerlink" title="应用程序工程"></a>应用程序工程</h3><h3 id="lib静态库工程"><a href="#lib静态库工程" class="headerlink" title="lib静态库工程"></a>lib静态库工程</h3><h3 id="dll动态库工程"><a href="#dll动态库工程" class="headerlink" title="dll动态库工程"></a>dll动态库工程</h3><h3 id="Linux跨平台工程"><a href="#Linux跨平台工程" class="headerlink" title="Linux跨平台工程"></a>Linux跨平台工程</h3><h3 id="编译排错篇"><a href="#编译排错篇" class="headerlink" title="编译排错篇"></a>编译排错篇</h3><h3 id="工程选项修改"><a href="#工程选项修改" class="headerlink" title="工程选项修改"></a>工程选项修改</h3><h2 id="工程组织篇"><a href="#工程组织篇" class="headerlink" title="工程组织篇"></a>工程组织篇</h2><h3 id="手动多工程组织"><a href="#手动多工程组织" class="headerlink" title="手动多工程组织"></a>手动多工程组织</h3><h3 id="cmake工程组织"><a href="#cmake工程组织" class="headerlink" title="cmake工程组织"></a>cmake工程组织</h3><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><h2 id="代码调试篇"><a href="#代码调试篇" class="headerlink" title="代码调试篇"></a>代码调试篇</h2><h3 id="常用调试手段"><a href="#常用调试手段" class="headerlink" title="常用调试手段"></a>常用调试手段</h3><h3 id="断点篇"><a href="#断点篇" class="headerlink" title="断点篇"></a>断点篇</h3><h3 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h3><h3 id="性能内存监视"><a href="#性能内存监视" class="headerlink" title="性能内存监视"></a>性能内存监视</h3><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><p><strong>学习和参考的资料来源</strong>：</p><p>  <a href="https://www.bilibili.com/video/BV1S541137P2/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=1c8b0af391894cdb44e3942161a1de4f">Visual Studio工程实践开发(C++)</a></p><p>  <a href="https://www.bilibili.com/video/BV1Xt411g7jT/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=1c8b0af391894cdb44e3942161a1de4f">vs2022(Visual Studio 2022)权威指南&amp;&amp;C语言&amp;&amp;软件工程开发的方向&amp;&amp;技巧要领</a></p></li><li><p>Tanks-1992版权声明：源代码来源为：<a href="https://github.com/krystiankaluzny/Tanks">Tanks</a></p></li><li><p>SDL 官网</p><p>[Simple DirectMedia Layer - SDL version 2.0.14 (stable)] <a href="http://www.libsdl.org/download-2.0.php">http://www.libsdl.org/download-2.0.php</a></p><p>下载：[SDL2-devel-2.0.14-VC.zip]</p></li><li><p>SDL TTF 2.0</p><p><a href="http://www.libsdl.org/projects/SDL_ttf/">http://www.libsdl.org/projects/SDL_ttf/</a></p><p> <a href="http://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-2.0.15-VC.zip">SDL2_ttf-devel-2.0.15-VC.zip</a> (Visual C++ 32&#x2F;64-bit)</p></li><li><p>SDL Image</p><p><a href="http://www.libsdl.org/projects//SDL_image/">http://www.libsdl.org/projects//SDL_image/</a></p><p> <a href="http://www.libsdl.org/projects//SDL_image/release/SDL2_image-devel-2.0.5-VC.zip">SDL2_image-devel-2.0.5-VC.zip</a> (Visual C++ 32&#x2F;64-bit)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Visual Studio </category>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 环境 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置c++工作区</title>
      <link href="/posts/9a0efe1e.html"/>
      <url>/posts/9a0efe1e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STL的演讲比赛流程管理系统</title>
      <link href="/posts/b2eda4b5.html"/>
      <url>/posts/b2eda4b5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="演讲比赛程序需求"><a href="#演讲比赛程序需求" class="headerlink" title="演讲比赛程序需求"></a>演讲比赛程序需求</h1><h2 id="比赛规则"><a href="#比赛规则" class="headerlink" title="比赛规则"></a>比赛规则</h2><p>学校句型一场演讲比赛，共有12个人参加，比赛共两轮，第一轮为淘汰赛，第二轮为决赛</p><p>每名选手都有对应的编号，如10001~10012</p><p>比赛方式：分组比赛，每组6个人</p><p>第一轮分为两个小组，整体按照选手编号进行抽签后顺序演讲</p><p>十个评委分别给每名选手打分，去除最高分和最低分，求的平均分为本轮选手的成绩</p><p>第二轮为决赛，前三名胜出</p><p>每轮比赛过后需要显示晋级选手的信息</p><h2 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h2><ul><li><p>开始演讲比赛：完成整届比赛的流程，每个比赛阶段需要给用户一个提示，用户按任意键后继续下一个阶段</p></li><li><p>查看往届记录：查看之前比赛前三名结果，每次比赛都会记录到文件中，文件用.csv后缀名保存</p></li><li><p>清空比赛记录：将文件中数据清空</p></li><li><p>退出比赛程序：可以退出当前程序</p></li></ul><h1 id="创建管理类"><a href="#创建管理类" class="headerlink" title="创建管理类"></a>创建管理类</h1><p>功能描述：</p><ul><li><p>提供菜单界面与用户交互</p></li><li><p>对演讲比赛流程进行控制</p></li><li><p>与文件的读写交互</p></li></ul><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>在头文件和源文件的文件夹下分别创建speechManager.h和speechManager.cpp文件</p><h1 id="菜单功能"><a href="#菜单功能" class="headerlink" title="菜单功能"></a>菜单功能</h1><p>功能描述：与用户的沟通界面</p><h2 id="添加成员函数"><a href="#添加成员函数" class="headerlink" title="添加成员函数"></a>添加成员函数</h2><p>在管理类speechManager.h中添加成员函数 void show_Menu();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::show_Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;********************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;**欢迎参加演讲比赛**&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.开始演讲比赛&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.查看往届记录&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3.清空比赛记录&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0.退出比赛程序&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;********************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试菜单功能：</p><p><img src="/posts/b2eda4b5/1.png"></p><h1 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h1><p>功能描述：实现退出程序</p><h2 id="提供功能接口"><a href="#提供功能接口" class="headerlink" title="提供功能接口"></a>提供功能接口</h2><p>在main函数中提供分支选择，提供每个功能接口</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建管理类对象</span></span><br><span class="line">SpeechManager sm;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice = <span class="number">0</span>; <span class="comment">//用来存储用户的选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">sm.<span class="built_in">show_Menu</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//开始比赛</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//查看记录</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//清空记录</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出系统</span></span><br><span class="line">sm.<span class="built_in">exitSystem</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现退出功能"><a href="#实现退出功能" class="headerlink" title="实现退出功能"></a>实现退出功能</h2><p>在speechManager.h中提供退出系统的成员函数void exitSystem();</p><p>在speechManager.cpp中提供具体的功能实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//退出系统</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::exitSystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/2.png"></p><h1 id="演讲比赛功能"><a href="#演讲比赛功能" class="headerlink" title="演讲比赛功能"></a>演讲比赛功能</h1><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><p>比赛流程分析：</p><p>抽签-》开始演讲比赛-》显示第一轮比赛结果-》</p><p>抽签-》开始演讲比赛-》显示前三名结果-》保存分数</p><h2 id="创建选手类"><a href="#创建选手类" class="headerlink" title="创建选手类"></a>创建选手类</h2><p>选手类中的属性包含：选手姓名、分数</p><p>头文件中创建speaker.h文件，并添加代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//选手类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Speaker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_Name;<span class="comment">//姓名</span></span><br><span class="line"><span class="type">double</span> m_Score[<span class="number">2</span>];<span class="comment">//分数，最多有两轮得分</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><h3 id="成员属性添加"><a href="#成员属性添加" class="headerlink" title="成员属性添加"></a>成员属性添加</h3><p>在speechManager.h中添加属性</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成员属性</span></span><br><span class="line"><span class="comment">//保存第一轮比赛选手编号容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一轮晋级选手编号容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//胜出前三名选手编号容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vVictory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放编号以及对应具体选手容器</span></span><br><span class="line">map&lt;<span class="type">int</span>, Speaker&gt;m_Speaker;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放比赛轮数</span></span><br><span class="line"><span class="type">int</span> m_Index;</span><br></pre></td></tr></table></figure><h3 id="初始化属性"><a href="#初始化属性" class="headerlink" title="初始化属性"></a>初始化属性</h3><p>在speechManager.h中提供开始比赛的成员函数void initSpeech()；</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initSpeech</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现void initSpeech()；</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::initSpeech</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//容器都置空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;v2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;vVictory.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化比赛轮数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpeechManager构造函数中调用void initSpeech()；</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">SpeechManager::<span class="built_in">SpeechManager</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建选手"><a href="#创建选手" class="headerlink" title="创建选手"></a>创建选手</h3><p>在speechManager.h中提供开始比赛的成员函数void createSpeaker();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建12名选手</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createSpeaker</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现void createSpeaker();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建12名选手</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::createSpeaker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string nameSeed = <span class="string">&quot;ABCDEFGHIJL&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nameSeed.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">string name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">name = name + nameSeed[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建具体选手</span></span><br><span class="line">Speaker sp;</span><br><span class="line">sp.m_Name = name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">sp.m_Score[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选手编号，并且放入到v1容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.<span class="built_in">push_back</span>(i + <span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//选手编号以及对应选手，放入到map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">insert</span>( <span class="built_in">make_pair</span>(i + <span class="number">10001</span>, sp));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpeechManager类的构造函数中调用void createSpeaker();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">SpeechManager::<span class="built_in">SpeechManager</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建12名选手</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">createSpeaker</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试在main函数中，可以在创建完管理对象后，使用下列代码测试12名选手初始状态</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建管理类对象</span></span><br><span class="line">SpeechManager sm;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试12名选手创建</span></span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, Speaker&gt;::iterator it = sm.m_Speaker.<span class="built_in">begin</span>(); it != sm.m_Speaker.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;选手编号：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;second.m_Name &lt;&lt; <span class="string">&quot;分数：&quot;</span> &lt;&lt; it-&gt;second.m_Score[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/3.png"></p><h3 id="开始比赛成员函数"><a href="#开始比赛成员函数" class="headerlink" title="开始比赛成员函数"></a>开始比赛成员函数</h3><p>在speechManager.h中提供开始比赛的成员函数void startSpeech();</p><p>该函数功能是控制比赛的流程</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">startSpeech</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中将startSpeech的空实现先写入</p><p>先将整个比赛的流程写到函数中</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::startSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示晋级结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示最终结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽签"><a href="#抽签" class="headerlink" title="抽签"></a>抽签</h3><p><strong>功能描述：</strong></p><p>正式比赛前，所有选手的比赛顺序需要打乱，我们只需要将存放选手编号的容器打乱次序</p><p>在speechManager.h中提供抽签的成员函数void speechDraw();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speechDraw</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现void speechDraw();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::speechDraw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第 &lt;&lt; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot; &gt;&gt; 轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;抽签后的演讲顺序如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//第一轮比赛</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v1.<span class="built_in">begin</span>(); it != v1.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//第二轮比赛</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v2.<span class="built_in">begin</span>(); it != v2.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在startSpeech比赛流程控制函数中，调用抽签函数</p><p>在main函数中，分支1选项中，调用开始比赛的接口</p><p>测试结果：</p><p><img src="/posts/b2eda4b5/4.png"></p><h3 id="开始比赛"><a href="#开始比赛" class="headerlink" title="开始比赛"></a>开始比赛</h3><p>在speechManager.h中提供比赛的成员函数void speechContest();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比赛</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speechContest</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数void speechContest();</p><p><strong>补充知识</strong></p><p>在C++中，deque（双端队列）是一种序列容器，类似于 vector，但是它允许在头尾两端进行高效的插入和删除操作。deque 是 “double-ended queue” 的缩写。</p><p>deque 和 vector 的主要区别在于，在 deque 中，元素存储在一个或多个连续的块中，而不是单个连续的数组。这使得 deque 更适合在头尾进行插入和删除操作，因为这些操作在 deque 中的开销更小。</p><p>deque 的特点包括：</p><ol><li><p>高效的插入和删除操作：在 deque 的头尾插入和删除元素的时间复杂度为 O(1)。</p></li><li><p>随机访问：deque 支持通过索引随机访问元素，时间复杂度为 O(1)。</p></li><li><p>动态增长：deque 可以动态地增长以容纳更多的元素，因此没有固定的大小限制。</p></li><li><p>内存分配：deque 使用多个块来存储元素，这意味着在插入和删除操作时，不需要移动所有元素，因此在特定情况下可能比 vector 更高效。</p></li></ol><p>在使用 deque 时，你可以像使用数组一样通过索引访问元素，也可以使用 <code>push_front()</code>、<code>push_back()</code>、<code>pop_front()</code>、<code>pop_back()</code> 等成员函数在头尾插入和删除元素。</p><p>使用 deque 需要包含头文件 <code>&lt;deque&gt;</code>。deque 是标准模板库（STL）中的一部分，因此可以在标准 C++ 中直接使用。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比赛</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::speechContest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛正式开始-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备临时容器，存放小组成绩</span></span><br><span class="line">multimap&lt;<span class="type">double</span>, <span class="type">int</span>, greater&lt;<span class="type">double</span>&gt;&gt; groupSorce;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;<span class="comment">//记录人员个数，6人一组</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v_Src; <span class="comment">//比赛选手容器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line">v_Src = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v_Src = v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历所有选手进行比赛</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v_Src.<span class="built_in">begin</span>(); it != v_Src.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//评委打分</span></span><br><span class="line">deque&lt;<span class="type">double</span>&gt;d;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="type">double</span> score = (<span class="built_in">rand</span>() % <span class="number">401</span> + <span class="number">600</span>) / <span class="number">10.f</span>; <span class="comment">// 600 ~ 1000</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score &lt;&lt; &quot;\t&quot;;</span></span><br><span class="line">d.<span class="built_in">push_back</span>(score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">double</span>&gt;()); <span class="comment">//降序排序</span></span><br><span class="line"></span><br><span class="line">d.<span class="built_in">pop_back</span>();<span class="comment">// 去除最低分</span></span><br><span class="line">d.<span class="built_in">pop_front</span>();<span class="comment">// 去除最高分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这行代码利用STL算法`accumulate`来计算双端队列`d`中所有元素的总和，并将结果赋给`sum`变量。</span></span><br><span class="line"><span class="comment">具体来说，`accumulate`函数的第一个参数是容器的起始迭代器（`d.begin()`），</span></span><br><span class="line"><span class="comment">第二个参数是容器的结束迭代器（`d.end()`），第三个参数是初始值（这里是0.0f）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在这里，初始值是`0.0f`，表示总和的数据类型为`double`。</span></span><br><span class="line"><span class="comment">因为第三个参数的类型和容器中元素的类型一致，所以会发生隐式类型转换，将整数0转换为浮点数0.0。</span></span><br><span class="line"><span class="comment">`accumulate`函数会从容器的第一个元素开始，依次累加每个元素，直到容器的最后一个元素。</span></span><br><span class="line"><span class="comment">最终的结果会存储在`sum`变量中*/</span></span><br><span class="line"><span class="type">double</span> sum = <span class="built_in">accumulate</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="number">0.0f</span>);<span class="comment">//总分</span></span><br><span class="line"><span class="type">double</span> avg = sum / (<span class="type">double</span>)d.<span class="built_in">size</span>();<span class="comment">//平均分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印平均分</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;编号：&quot; &lt;&lt; *it &lt;&lt; &quot;\t姓名：&quot; &lt;&lt; this-&gt;m_Speaker[*it].m_Name &lt;&lt; &quot;\t获取平均分：&quot; &lt;&lt; avg;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将平均分放入map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] = avg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将打分数据放入临时小组容器中</span></span><br><span class="line">groupSorce.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(avg, *it));<span class="comment">//key是得分，value是具体选手编号</span></span><br><span class="line"><span class="comment">//每6人取出前三名</span></span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">6</span> == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; num / <span class="number">6</span> &lt;&lt; <span class="string">&quot;小组比赛名次：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;<span class="type">double</span>, <span class="type">int</span>, greater&lt;<span class="type">double</span>&gt;&gt;::iterator it = groupSorce.<span class="built_in">begin</span>(); it != groupSorce.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Name &lt;&lt; <span class="string">&quot;\t成绩：&quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取走前三名</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;<span class="type">double</span>, <span class="type">int</span>, greater&lt;<span class="type">double</span>&gt;&gt;::iterator it = groupSorce.<span class="built_in">begin</span>(); it != groupSorce.<span class="built_in">end</span>() &amp;&amp; count &lt; <span class="number">3</span>; it++, count++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line">v2.<span class="built_in">push_back</span>((*it).second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">vVictory.<span class="built_in">push_back</span>((*it).second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">groupSorce.<span class="built_in">clear</span>();<span class="comment">//小组容器清空</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛完毕--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/b2eda4b5/5.png"></p><h3 id="显示比赛分数"><a href="#显示比赛分数" class="headerlink" title="显示比赛分数"></a>显示比赛分数</h3><p>在speechManager.h中提供比赛的成员函数 void showScore();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示比赛结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showScore</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void showScore();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::showScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮晋级选手信息如下------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line">v = v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v = vVictory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;选手编号：&quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Name &lt;&lt; <span class="string">&quot;\t得分：&quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">show_Menu</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二轮比赛"><a href="#第二轮比赛" class="headerlink" title="第二轮比赛"></a>第二轮比赛</h3><p>第二轮比赛流程同第一轮，知识比赛轮数+1，其余流程不变</p><p>在startSpeech比赛流程控制函数中，加入第二轮的流程</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::startSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示晋级结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮开始比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示最终结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/b2eda4b5/6.png"></p><h2 id="保存分数"><a href="#保存分数" class="headerlink" title="保存分数"></a>保存分数</h2><p><strong>功能描述：</strong></p><p>将每次演讲比赛的得分记录到文件中</p><p><strong>功能实现：</strong></p><p>在speechManager.h中添加保存记录的成员函数 void saveRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">saveRecord</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void saveRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存记录</span></span><br><span class="line"><span class="comment">//保存记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::saveRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">&quot;speech.csv&quot;</span>, ios::out | ios::app);<span class="comment">//用追加的方式写文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将每个选手数据写入到文件中</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = vVictory.<span class="built_in">begin</span>(); it != vVictory.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">ofs &lt;&lt; *it &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ofs &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;记录已经保存&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有记录了，文件不为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在startSpeech比赛流程控制函数中，最后调用保存记录分数函数</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::startSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示晋级结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮开始比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示最终结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">saveRecord</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置比赛</span></span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选手</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">createSpeaker</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取往届记录</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">loadRecord</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------本届比赛完毕----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/7.png"></p><h1 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h1><h2 id="读取记录分数"><a href="#读取记录分数" class="headerlink" title="读取记录分数"></a>读取记录分数</h2><p>在speechManager.h中添加保存记录的成员函数 void loadRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loadRecord</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>添加判断文件是否为空的标志 bool fileIsEmpty;</p><p>添加往届记录的容器 <code>map&lt;int, vector&lt;string&gt;&gt; m_Record;</code></p><p>其中m_Record中的key代表第几届，value记录具体的信息</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断文件是否为空</span></span><br><span class="line"><span class="type">bool</span> fileIsEmpty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放往届记录的容器</span></span><br><span class="line">map&lt;<span class="type">int</span>, vector&lt;string&gt;&gt;m_Record;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::initSpeech</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//容器都置空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;v2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;vVictory.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化比赛轮数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化记录容器</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Record.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void loadRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::loadRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;speech.csv&quot;</span>, ios::in)</span></span>;<span class="comment">//读文件</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件不存在</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;</span></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件清空情况</span></span><br><span class="line"><span class="comment">/*char ch;</span></span><br><span class="line"><span class="comment">ifs &gt;&gt; ch;*/</span></span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="built_in">eof</span>()) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;文件为空&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件不为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//ifs.putback(ch);//将上面读取的单个字符放回来</span></span><br><span class="line"></span><br><span class="line">string data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; data) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; data &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">vector&lt;string&gt;v;<span class="comment">//存放6个string字符串</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos = <span class="number">-1</span>;<span class="comment">//查到逗号的位置变量</span></span><br><span class="line"><span class="type">int</span> start = <span class="number">0</span>;<span class="comment">//起始位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">pos = data.<span class="built_in">find</span>(<span class="string">&quot;,&quot;</span>, start);</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">string temp = data.<span class="built_in">substr</span>(start, pos - start);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; temp &lt;&lt; endl;</span></span><br><span class="line">v.<span class="built_in">push_back</span>(temp);</span><br><span class="line"></span><br><span class="line">start = pos + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Record.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(index, v));</span><br><span class="line">index++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//for (map&lt;int, vector&lt;string&gt;&gt;::iterator it = m_Record.begin(); it != m_Record.end(); it++) &#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; it-&gt;first &lt;&lt; &quot;冠军编号：&quot; &lt;&lt; it-&gt;second[0] &lt;&lt; &quot;\t分数：&quot; &lt;&lt; it-&gt;second[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看记录功能"><a href="#查看记录功能" class="headerlink" title="查看记录功能"></a>查看记录功能</h2><p>在speechManager.h中添加保存记录的成员函数 void showRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示往届得分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showRecord</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void showRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示往届得分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::showRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;fileIsEmpty) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在，或记录为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Record.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;届\t&quot;</span> &lt;&lt;</span><br><span class="line"><span class="string">&quot;冠军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\t得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line"><span class="string">&quot;亚军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">2</span>] &lt;&lt; <span class="string">&quot;\t得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">3</span>] &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line"><span class="string">&quot;季军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">4</span>] &lt;&lt; <span class="string">&quot;\t得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">5</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/8.png"></p><h1 id="清空记录"><a href="#清空记录" class="headerlink" title="清空记录"></a>清空记录</h1><p>在speechManager.h中添加清空记录的成员函数 void clearRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearRecrd</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void clearRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::clearRecrd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;确认清空？&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.确认&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.返回&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 打开模式 ios::trunc 如果存在删除文件并重新创建</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;speech.csv&quot;</span>, ios::trunc)</span></span>;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选手</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">createSpeaker</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取往届记录</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">loadRecord</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;speechManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//随机数种子</span></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建管理类对象</span></span><br><span class="line">SpeechManager sm;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试12名选手创建</span></span><br><span class="line"><span class="comment">/*for (map&lt;int, Speaker&gt;::iterator it = sm.m_Speaker.begin(); it != sm.m_Speaker.end(); it++) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;选手编号：&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;second.m_Name &lt;&lt; &quot;分数：&quot; &lt;&lt; it-&gt;second.m_Score[0] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice = <span class="number">0</span>; <span class="comment">//用来存储用户的选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">sm.<span class="built_in">show_Menu</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//开始比赛</span></span><br><span class="line">sm.<span class="built_in">startSpeech</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//查看记录</span></span><br><span class="line">sm.<span class="built_in">showRecord</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//清空记录</span></span><br><span class="line">sm.<span class="built_in">clearRecrd</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出系统</span></span><br><span class="line">sm.<span class="built_in">exitSystem</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- <iframe height=300 width=500 src="9.mp4"> -->]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练手小项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp基础</title>
      <link href="/posts/c8ad3605.html"/>
      <url>/posts/c8ad3605.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><p>在C++中，new 是用于动态分配内存并创建对象的关键字。当使用 new 创建对象时，对象被分配在堆内存中，而不是栈内存中。</p><p>使用 new 的主要原因包括：</p><ul><li><p>动态内存分配： new 允许在程序运行时动态地分配内存空间，而不需要在编译时确定对象的大小。这对于需要灵活管理内存的情况非常有用，例如当对象的大小在运行时才能确定时，或者需要在程序的不同部分共享对象时。</p></li><li><p>对象的生命周期： 使用 new 创建的对象存储在堆内存中，其生命周期由程序员显式管理。这意味着对象在程序员释放内存之前不会被销毁，因此可以在程序的任何地方访问对象。相比之下，栈上的对象的生命周期是由其作用域决定的，一旦超出作用域，对象就会被销毁。</p></li><li><p>返回指针： new 返回一个指向新分配对象的指针，这允许在需要时以指针的形式传递对象，并在需要时释放对象的内存。这在函数返回对象时特别有用，因为函数返回值的大小可能是动态的，或者需要在函数外部持续存在。</p></li></ul><p>尽管使用 new 具有灵活性和控制权，但也需要小心管理动态分配的内存，以防止内存泄漏和悬空指针等问题。因此，在使用 new 分配内存时，通常需要配合使用 delete 来释放内存，以避免内存泄漏。</p><h1 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h1><p>在C++中，this 指针是一个特殊的指针，它指向当前对象。</p><p>this 指针通常在类的成员函数中使用，用于访问当前对象的成员变量和成员函数。</p><p>this 指针主要有以下几个用途：</p><ol><li>区分局部变量和成员变量： 当成员函数的参数名和成员变量名相同时，可以使用 this 指针来明确指示要访问的是成员变量而不是局部变量。例如：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x; <span class="comment">// 使用this指针访问成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>在成员函数中返回对象本身： 当成员函数需要返回当前对象本身时，可以使用 return *this; 。这种技术常用于实现链式调用。例如：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MyClass obj;</span><br><span class="line">obj.<span class="built_in">setValue</span>(<span class="number">10</span>).<span class="built_in">print</span>(); <span class="comment">// setValue函数返回*this，可以直接调用print函数</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在构造函数和析构函数中访问当前对象： 在构造函数和析构函数中，可以使用 this 指针来访问当前对象。这在需要在构造函数和析构函数中对当前对象进行一些额外操作时很有用。</li></ol><h1 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h1><p>在C++中，纯虚函数是一个在基类中声明但没有实现的虚函数。</p><p>纯虚函数的作用主要体现在以下几个方面：</p><ul><li><p>接口定义： 纯虚函数可以用来定义接口，即定义一个接口类，而不提供具体的实现。派生类必须实现这些纯虚函数，从而确保派生类都提供了相同的接口，但具体的实现可以根据派生类的需求来实现。</p></li><li><p>多态性： 纯虚函数可以使得基类指针或引用在运行时指向派生类对象，并调用派生类中相应的实现。这样可以实现多态性，提高了代码的灵活性和可扩展性。</p></li><li><p>抽象类： 包含纯虚函数的类被称为抽象类，它们无法直接创建对象，只能作为基类来派生出其他类。抽象类的存在主要是为了提供一种接口，由派生类来实现具体的行为。</p></li><li><p>框架设计： 在框架设计中，可以使用纯虚函数来定义一些必须由客户程序实现的操作，从而定义了一个框架的结构，并允许客户程序根据自己的需求来定制具体的行为。</p></li></ul><p>总之，纯虚函数的作用在于提供了一种机制，使得类可以定义接口、实现多态性、构建抽象类以及设计框架等。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 注意 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
