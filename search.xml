<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法学习</title>
      <link href="/posts/f4c4f07f.html"/>
      <url>/posts/f4c4f07f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li><p><strong>学习和参考的资料来源</strong>：</p><p>  <a href="https://www.programmercarl.com/">代码随想录</a><br>  <a href="https://leetcode.cn/">leetcode</a></p></li></ul><h1 id="补充知识（持续更新ing）"><a href="#补充知识（持续更新ing）" class="headerlink" title="补充知识（持续更新ing）"></a>补充知识（持续更新ing）</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度是一个函数，它定性描述该算法的运行时间。</p><p>通常会估算算法的操作单元数量来代表程序消耗的时间，这里默认CPU的每个单元运行消耗的时间都是相同的。</p><p>假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐进时间复杂度，简称时间复杂度，记为O(f(n))。</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度是一个算法在运行过程中占用内存空间大小的量度，基座S(n) &#x3D; O(f(n))。</p><p>空间复杂度(Space Complexity)基座S(n)依然使用大O来表示。利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。</p><ul><li>空间复杂度是考虑程序运行时占用内存的大小，而不是可执行文件的大小。</li><li>不要以为空间复杂度就已经精确的掌握了程序的内存使用大小，很多因素会影响程序真正内存使用大小，例如编译器的内存对齐，编程语言容器的底层实现等等这些都会影响到程序内存的开销。所以空间复杂度是预先大体评估程序内存使用的大小。</li></ul><p>空间复杂度是logn的情况确实有些特殊，其实是在递归的时候，会出现空间复杂度为logn的情况。</p><h2 id="不同语言的内存管理"><a href="#不同语言的内存管理" class="headerlink" title="不同语言的内存管理"></a>不同语言的内存管理</h2><ul><li>C\C++这种内存堆空间的申请和释放完全考自己管理</li><li>Java依赖JVM来做内存管理，不了解jvm内存管理的机制，很可能会因一些错误的代码写法而导致内存泄漏或内存溢出</li><li>Python内存管理是由私有堆空间管理的，所有的python对象和数据结构都存储在私有对空间中。程序员没有访问堆的权限，只有解释器才能操作。</li></ul><p>例如Python万物皆对象，并且将内存操作封装的很好，所以python的基本数据类型所用的内存会要远大于存放纯数据类型所占的内存，例如，存储int型数据需要四个字节，但是使用python申请一个对象来存放数据的话，所用空间要远大于四个字节。</p><h2 id="C-的内存管理"><a href="#C-的内存管理" class="headerlink" title="C++的内存管理"></a>C++的内存管理</h2><p>程序运行时所需的内存空间分为固定部分和可变部分，如下：<br><img src="/%5C%E7%AE%97%E6%B3%95%E9%A2%98%5C1.png" alt="内存管理"></p><p>固定部分的内存消耗是不会随着代码运行产生变化的，可变部分则是会产生变化的，更具体一些，一个由C&#x2F;C++编译的程序占用的内存分为以下几个部分：</p><ul><li>栈区(Stack)：由编译器自动分配释放，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构中的栈。</li><li>堆区(Heap)：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS收回。</li><li>未初始化数据区(Uninitialized Data)：存放未初始化的全局变量和静态变量</li><li>初始化数据区(Initialized Data)：存放已经初始化的全局变量和静态变量</li><li>程序代码区(Text)：存放函数体的二进制代码</li></ul><p>代码区和数据区所占空间都是固定的，而且占用的空间非常小，那么看运行时消耗的内存主要看可变部分。</p><p>在可变部分中，栈区间的数据在代码块之心结束之后，系统会自动回收，而堆区间数据是需要程序员自己回收，所以也就是造成内存泄漏的发源地。</p><p>而java和python的话则不需要程序员去考虑内存泄漏的问题，虚拟机都做了这些事情。</p><h2 id="如何计算程序占用多大内存"><a href="#如何计算程序占用多大内存" class="headerlink" title="如何计算程序占用多大内存"></a>如何计算程序占用多大内存</h2><p>想要计算出自己的程序会占用多少内存就一定要了解自己定义的数据类型的大小，如下：<br><img src="/%5C%E7%AE%97%E6%B3%95%E9%A2%98%5C2.png"></p><p>1个字节占8比特，那么4个字节就是32个比特，可存放数据的大小为2^32，也就是4G空间的大小，即可以寻找4G空间大小的内存地址。</p><p>现在大家使用的计算机一般都是64位了，所以编译器也都是64位的。</p><p>安装64位的操作系统的计算机内存都已经超过了4G，也就是指针大小如果还是4个字节的话，就已经不能寻址全部的内存地址，所以64位编译器使用8个字节的指针才能寻找所有的内存地址。</p><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>只要可以跨平台的编程语言都需要做内存对齐，Java、Python都是一样的。</p><p>为什么会有内存对齐？</p><p>主要有两个原因：</p><ul><li>1.平台原因：不是所有的硬件平台都能访问内存地址上的任意数据，某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。为了同一个程序可以在多平台运行，需要内存对齐。</li><li>2.硬件原因：经过内存对齐后，CPU访问内存的速度大大提升。</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> num;</span><br><span class="line">   <span class="type">char</span> cha;</span><br><span class="line">&#125;st;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> b[<span class="number">100</span>];</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(st) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其输出的结果依次为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">400</span><br><span class="line">100</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>此时会发现，和单纯计算字节数的话是有一些误差的。</p><p>这就是因为内存对齐的原因。</p><p>来看一下内存对齐和非内存对齐产生的效果区别。</p><p>CPU读取内存不是一次读取单个字节，而是一块一块的来读取内存，块的大小可以是2，4，8，16个字节，具体取多少个字节取决于硬件。</p><p>假设CPU把内存划分为4字节大小的块，要读取一个4字节大小的int型数据，来看一下这两种情况下CPU的工作量：</p><p><img src="/%5C%E7%AE%97%E6%B3%95%E9%A2%98%5C3.png"></p><p>char型的数据和int型的数据挨在一起，该int数据从地址1开始，那么CPU想要读这个数据的话需要以下几步操作：</p><ul><li>1.因为CPU是四个字节来寻址，首先CPU先读取0、1、2、3处的四个字节数据</li><li>2.CPU读取4、5、6、7处的四个字节数据</li><li>3.合并地址1、2、3、4处四个字节的数据才是本次操作需要的int数据</li></ul><p>此时一共需要两次寻址，一次合并的操作</p><p>内存对齐会浪费内存资源，但事实上，相对来说计算机内存资源一般都是充足的，我们更希望的是提高运行速度。</p><p>编译器一般都会做内存对齐的优化操作，也就是说当考虑程序真正占用的内存大小的时候，也需要认识到内存对齐的影响。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>数组是存放在连续内存空间上的相同类型数据的集合。</p><p>数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p><p>两点注意：</p><ul><li>数组下标都是从0开始的</li><li>数组内存空间的地址是连续的</li></ul><p>正是因为数组的内存空间地址是连续的，所以在删除或增添元素的时候，就难免要移动其他元素的地址。</p><p>数组的元素是不能删的，只能覆盖。</p><p>不同编程语言的内存管理是不一样的，以C++为例，在C++中二维数组是连续分布的。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio工程实践开发(C++)</title>
      <link href="/posts/7b14e812.html"/>
      <url>/posts/7b14e812.html</url>
      
        <content type="html"><![CDATA[<h1 id="Visual-Studio介绍"><a href="#Visual-Studio介绍" class="headerlink" title="Visual Studio介绍"></a>Visual Studio介绍</h1><h2 id="工具介绍篇"><a href="#工具介绍篇" class="headerlink" title="工具介绍篇"></a>工具介绍篇</h2><h3 id="Visual-Studio-VS-Codeblocks-VS-Visual-Studio-Code"><a href="#Visual-Studio-VS-Codeblocks-VS-Visual-Studio-Code" class="headerlink" title="Visual Studio VS Codeblocks VS Visual Studio Code"></a>Visual Studio VS Codeblocks VS Visual Studio Code</h3><h3 id="工具安装修改简介"><a href="#工具安装修改简介" class="headerlink" title="工具安装修改简介"></a>工具安装修改简介</h3><h3 id="Visual-Studio-C-简单工程演示"><a href="#Visual-Studio-C-简单工程演示" class="headerlink" title="Visual Studio C++简单工程演示"></a>Visual Studio C++简单工程演示</h3><h2 id="工具配置篇"><a href="#工具配置篇" class="headerlink" title="工具配置篇"></a>工具配置篇</h2><h3 id="界面配置"><a href="#界面配置" class="headerlink" title="界面配置"></a>界面配置</h3><h3 id="VA配置"><a href="#VA配置" class="headerlink" title="VA配置"></a>VA配置</h3><h3 id="杂项配置——字体-Tab配置-Limit"><a href="#杂项配置——字体-Tab配置-Limit" class="headerlink" title="杂项配置——字体+Tab配置+Limit"></a>杂项配置——字体+Tab配置+Limit</h3><h2 id="工具使用篇"><a href="#工具使用篇" class="headerlink" title="工具使用篇"></a>工具使用篇</h2><h3 id="应用程序工程"><a href="#应用程序工程" class="headerlink" title="应用程序工程"></a>应用程序工程</h3><h3 id="lib静态库工程"><a href="#lib静态库工程" class="headerlink" title="lib静态库工程"></a>lib静态库工程</h3><h3 id="dll动态库工程"><a href="#dll动态库工程" class="headerlink" title="dll动态库工程"></a>dll动态库工程</h3><h3 id="Linux跨平台工程"><a href="#Linux跨平台工程" class="headerlink" title="Linux跨平台工程"></a>Linux跨平台工程</h3><h3 id="编译排错篇"><a href="#编译排错篇" class="headerlink" title="编译排错篇"></a>编译排错篇</h3><h3 id="工程选项修改"><a href="#工程选项修改" class="headerlink" title="工程选项修改"></a>工程选项修改</h3><h2 id="工程组织篇"><a href="#工程组织篇" class="headerlink" title="工程组织篇"></a>工程组织篇</h2><h3 id="手动多工程组织"><a href="#手动多工程组织" class="headerlink" title="手动多工程组织"></a>手动多工程组织</h3><h3 id="cmake工程组织"><a href="#cmake工程组织" class="headerlink" title="cmake工程组织"></a>cmake工程组织</h3><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><h2 id="代码调试篇"><a href="#代码调试篇" class="headerlink" title="代码调试篇"></a>代码调试篇</h2><h3 id="常用调试手段"><a href="#常用调试手段" class="headerlink" title="常用调试手段"></a>常用调试手段</h3><h3 id="断点篇"><a href="#断点篇" class="headerlink" title="断点篇"></a>断点篇</h3><h3 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h3><h3 id="性能内存监视"><a href="#性能内存监视" class="headerlink" title="性能内存监视"></a>性能内存监视</h3><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><p><strong>学习和参考的资料来源</strong>：</p><p>  <a href="https://www.bilibili.com/video/BV1S541137P2/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=1c8b0af391894cdb44e3942161a1de4f">Visual Studio工程实践开发(C++)</a></p><p>  <a href="https://www.bilibili.com/video/BV1Xt411g7jT/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=1c8b0af391894cdb44e3942161a1de4f">vs2022(Visual Studio 2022)权威指南&amp;&amp;C语言&amp;&amp;软件工程开发的方向&amp;&amp;技巧要领</a></p><p>  Tanks-1992版权声明：源代码来源为：<a href="https://github.com/krystiankaluzny/Tanks">Tanks</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Visual Studio </category>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 环境 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置c++工作区</title>
      <link href="/posts/9a0efe1e.html"/>
      <url>/posts/9a0efe1e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp演讲比赛流程管理系统</title>
      <link href="/posts/b2eda4b5.html"/>
      <url>/posts/b2eda4b5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="演讲比赛程序需求"><a href="#演讲比赛程序需求" class="headerlink" title="演讲比赛程序需求"></a>演讲比赛程序需求</h1><h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 练手项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my new post</title>
      <link href="/posts/c8ad3605.html"/>
      <url>/posts/c8ad3605.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
