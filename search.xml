<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>后端项目3</title>
      <link href="/posts/593dfc4f.html"/>
      <url>/posts/593dfc4f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端项目2</title>
      <link href="/posts/2e3accd9.html"/>
      <url>/posts/2e3accd9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端项目1</title>
      <link href="/posts/b7339d63.html"/>
      <url>/posts/b7339d63.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式项目2</title>
      <link href="/posts/ce15e2e9.html"/>
      <url>/posts/ce15e2e9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式项目1</title>
      <link href="/posts/571cb353.html"/>
      <url>/posts/571cb353.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>qt项目2</title>
      <link href="/posts/32d9f9cf.html"/>
      <url>/posts/32d9f9cf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QT——学习</title>
      <link href="/posts/abd0a875.html"/>
      <url>/posts/abd0a875.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="什么是QT"><a href="#什么是QT" class="headerlink" title="什么是QT"></a>什么是QT</h2><p>QT是一个<strong>跨平台</strong>的C++<strong>图像用户界面应用程序框架</strong></p><p>为应用程序开发者提供建立艺术级图形界面所需的所有功能，它是完全面向对象的，很容易扩展，并且允许真正的组件编程</p><h2 id="Qt的发展史"><a href="#Qt的发展史" class="headerlink" title="Qt的发展史"></a>Qt的发展史</h2><p>1991年 Qt最早由奇趣科技开发</p><p>1996年 进入商业领域，它也是目前流行的Linux桌面环境KDE的基础</p><p>2008年 奇趣科技被诺基亚公司收购，Qt称为诺基亚旗下的编程语言</p><p>2012年 Qt又被Digia公司收购</p><p>2014年4月 跨平台的集成开发环境Qt Creator3.1.0发布，同年5月20日配发了Qt5.3正式版，至此Qt实现了对iOS、Android、WP等各平台的全面支持</p><p><strong>当前Qt最新版本为 Qt 6</strong></p><h2 id="支持的平台"><a href="#支持的平台" class="headerlink" title="支持的平台"></a>支持的平台</h2><p>Windows – XP、Vista、Win7、Win8、Win2008、Win10、Win11</p><p>Uinux&#x2F;X11 – Linux、Sun Solaris、HP-UX、Compaq Tru64 UNIX、IBM AIX、SGI IRIX、FreeBSD、BSD&#x2F;OS、和其他很多X11平台</p><p>Macintosh – Mac OS X</p><p>Embedded – 有帧缓冲支持的嵌入式Linux平台，Windows CE</p><h2 id="Qt版本"><a href="#Qt版本" class="headerlink" title="Qt版本"></a>Qt版本</h2><p>Qt按照不同的版本发行，分为商业版和开源版</p><p>商业版:</p><p>为商业软件提供开发，他们提供传统商业软件发行版，并且提供在商业有效期内的免费升级和技术支持服务。</p><p>开源的LGPL版本:</p><p>为了开发自有而设计的开放源码软件，它提供了和商业版本同样的功能，在GNU通用公共许可下，它是免费的。</p><h2 id="QT的优点"><a href="#QT的优点" class="headerlink" title="QT的优点"></a>QT的优点</h2><p>跨平台，几乎支持所有的平台</p><p>接口简单，容易上手</p><p>一定程度上简化了内存回收机制 </p><p>开发效率高，能够快速的构建应用程序</p><p>有很好的社区氛围</p><p>可以进行嵌入式开发</p><h2 id="成功案例"><a href="#成功案例" class="headerlink" title="成功案例"></a>成功案例</h2><p>Linux桌面环境KDE</p><p>WPS Office 办公软件</p><p>Skype 网络电话</p><p>Google Earth 谷歌地图</p><p>VLC多媒体播放器</p><p>VirtualBox虚拟机软件</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>Qt中的构建⼯具有三种：<strong>qmake CMake Qbs</strong></p><p>qmake：qmake是⼀个构建⼯具（build tool），⽤于⾃动⽣成makefile⽂件。qmake⽀持跨平台构建。qmake编辑的是⼀个后缀名为.pro的⽂件。</p><p>CMake：CMake是⼀个跨平台的构建⼯具。CMake本⾝不是⼀个编译器，其实就是⽣成⼀个让编译器能读懂编译流程的⽂件⼯具。让CMake⾃动⽣成构建系统，例如Makefile和Visual Studio项⽬⽂件。CMake是⼀个第三⽅⼯具，有⾃⼰的⽂档。</p><p>Qbs：Qbs（Qt Build Suite：Qt构建套件）同qmake、CMake⼀样都是构建⼯具。Qbs号称是新⼀代的构建⼯具，⽐qmake编译速度更快。Qbs没有绑定Qt版本，它从项⽬⽂件的⾼级项⽬描述中⽣成⼀个正确的依赖表。⽽传统的MakeFile⽣成⼯具如qmake和CMake，其在⽣成MakeFile⽂件后将实际的命令交给Make⼯具去执⾏。</p><p><strong>基类选择</strong></p><p>QWidget（父类）——最简单、最基本的窗体程序，里面可以放置多个控件实现程序功能</p><p>QMainWindow（子类）——主窗口类，一般用于较为复杂的应用程序，除了中央客户区界面，还包括菜单栏、工具栏、状态栏以及多个可停靠的工具对话框等</p><p>QDialog（子类）——基于对话框的程序，对话框一般用于弹窗，也可以用于主界面显示，对话框是从QWidget继承而来，并丰富了一些功能，如模态显示和返回值等</p><p><strong>版本控制系统：</strong></p><p>svn  vss  git</p><h1 id="创建QT项目"><a href="#创建QT项目" class="headerlink" title="创建QT项目"></a>创建QT项目</h1><h2 id="第一个QT项目"><a href="#第一个QT项目" class="headerlink" title="第一个QT项目"></a>第一个QT项目</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span>  <span class="comment">//包含一个应用程序类的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main程序入口  argc 命令行变量的数量  argv 命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//a应用程序对象，在qt中，应用程序对象有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">//窗口对象  myWidget的父类——&gt;QWidget</span></span><br><span class="line">    myWidget w;</span><br><span class="line">    <span class="comment">//调用show方法  窗口对象默认不会显示，必须要调用show方法显示窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="comment">//让应用程序对象进入消息循环</span></span><br><span class="line">    <span class="comment">//让代码阻塞到这行</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/1.png"></p><p>Qt系统提供的标准类名声明头文件没有.h后缀</p><p>Qt一个类对应一个头文件，类名就是头文件名</p><p>QApplication应用程序类：</p><p>管理图形用户界面应用程序的控制流和主要设置。</p><p>是Qt的整个后台管理的命脉它包含主事件循环，在其中来自窗口系统和其它资源的所有事件处理和调度。它也处理应用程序的初始化和结束，并且提供对话管理。</p><p>对于任何一个使用Qt的图形用户界面应用程序，都正好存在一个QApplication对象，而不论这个应用程序在同一时间内是不是有0、1、2或更多个窗口。</p><p>a.exec()<br>程序进入消息循环，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYWIDGET_H <span class="comment">//防止头文件重复包含</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span><span class="comment">//包含QWidget 窗口类</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//Q_OBJECT宏，允许类中使用信号和槽的机制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">myWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);<span class="comment">//构造函数</span></span><br><span class="line">    ~<span class="built_in">myWidget</span>();<span class="comment">//析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYWIDGET_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//命名规范</span></span><br><span class="line"><span class="comment">//类名：首字母大写，单词和单词之间首字母大写（大驼峰）</span></span><br><span class="line"><span class="comment">//函数名 变量名称，首字母小写，单词和单词之间字母大写（小驼峰）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//快捷键</span></span><br><span class="line"><span class="comment">//注释  ctrl+/</span></span><br><span class="line"><span class="comment">//运行  ctrl+r</span></span><br><span class="line"><span class="comment">//编译  ctrl+b</span></span><br><span class="line"><span class="comment">//字体缩放 Ctrl+鼠标滚轮</span></span><br><span class="line"><span class="comment">//查找 Ctrl+f</span></span><br><span class="line"><span class="comment">//整行移动  Ctrl+shift+上或者下</span></span><br><span class="line"><span class="comment">//帮助文档 F1</span></span><br><span class="line"><span class="comment">//自动对齐  Ctrl+i</span></span><br><span class="line"><span class="comment">//同名之间的.h和.cpp切换  F4   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)<span class="comment">//初始化列表</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">myWidget::~<span class="built_in">myWidget</span>() &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>.pro 文件介绍</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//QT包含的模块</span></span><br><span class="line">QT       += core gui</span><br><span class="line"><span class="comment">//大于4版本以上 包含widget模块</span></span><br><span class="line"><span class="built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets</span><br><span class="line"><span class="comment">//这一行指定了C++标准为C++17，用于告诉编译器使用C++17标准编译代码</span></span><br><span class="line">CONFIG += c++<span class="number">17</span></span><br><span class="line"></span><br><span class="line"># You can make your code fail to compile <span class="keyword">if</span> it uses deprecated APIs.</span><br><span class="line"># In order to <span class="keyword">do</span> so, uncomment the following line.</span><br><span class="line">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=<span class="number">0x060000</span>    <span class="meta"># disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"><span class="comment">//源文件</span></span><br><span class="line">SOURCES += \</span><br><span class="line">    main.cpp \</span><br><span class="line">    mywidget.cpp</span><br><span class="line"><span class="comment">//头文件</span></span><br><span class="line">HEADERS += \</span><br><span class="line">    mywidget.h</span><br><span class="line"><span class="comment">//项目的部署规则，根据目标平台将可执行文件安装到不同的目录。</span></span><br><span class="line"># Default rules <span class="keyword">for</span> deployment.</span><br><span class="line">qnx: target.path = /tmp/$$&#123;TARGET&#125;/bin</span><br><span class="line"><span class="keyword">else</span>: unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin</span><br><span class="line">!<span class="built_in">isEmpty</span>(target.path): INSTALLS += target</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按钮控件的常用API"><a href="#按钮控件的常用API" class="headerlink" title="按钮控件的常用API"></a>按钮控件的常用API</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)<span class="comment">//初始化列表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建一个按钮</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    <span class="comment">//btn-&gt;show();//show以顶层方式单出窗口控件</span></span><br><span class="line">    <span class="comment">//让btn对象依赖在myWidget窗口中</span></span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//显示文本</span></span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;the first button&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建第二个按钮  按照控件的大小创建窗口</span></span><br><span class="line">    QPushButton * btn2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;the second button&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动btn2按钮</span></span><br><span class="line">    btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //重置按钮大小</span></span><br><span class="line">    <span class="comment">// btn2-&gt;resize(60,60);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置固定窗口大小</span></span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置窗口标题</span></span><br><span class="line">    <span class="built_in">setWindowTitle</span>(<span class="string">&quot;the first window&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/2.png"></p><h2 id="对象树"><a href="#对象树" class="headerlink" title="对象树"></a>对象树</h2><p>当创建的对象在堆区的时候，如果指定的父类是QObject派生下来的类或者QObject子类派生下来的类，可以不用管理释放的操作，对象会放入到对象树中。</p><p>一定的程度上简化了内存回收机制</p><h2 id="窗口坐标体系"><a href="#窗口坐标体系" class="headerlink" title="窗口坐标体系"></a>窗口坐标体系</h2><p>坐标体系：</p><p>以左上角为原点（0,0），X向右增加，Y向下增加</p><p>对于嵌套窗口，其坐标是相对于父窗口来说的</p><h1 id="信号和槽机制"><a href="#信号和槽机制" class="headerlink" title="信号和槽机制"></a>信号和槽机制</h1><h2 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h2><p>connect（信号的发送者，发送的具体信号，信号的接受者，信号的处理（槽函数））</p><p>信号槽的优点：松散耦合，信号发送端和接收端本身是没有关联的，通过connect连接将两端耦合在一起</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个自己的按钮对象</span></span><br><span class="line">MyPushButton * myBtn = <span class="keyword">new</span> MyPushButton;</span><br><span class="line">myBtn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;my own button&quot;</span>);</span><br><span class="line"></span><br><span class="line">myBtn-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">myBtn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);<span class="comment">//设置到对象树中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//需求——点击我的按钮，关闭窗口</span></span><br><span class="line"><span class="comment">//参数1 信号的发送者 参数二 发送的信号(函数的地址)</span></span><br><span class="line"><span class="comment">//参数3 信号的接受者 参数4 处理的槽函数(函数的地址)</span></span><br><span class="line"><span class="comment">//connect(myBtn, &amp;MyPushButton::clicked, this, &amp;myWidget::close);</span></span><br><span class="line"><span class="built_in">connect</span>(myBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;QWidget::close);</span><br></pre></td></tr></table></figure><h2 id="自定义信号和槽"><a href="#自定义信号和槽" class="headerlink" title="自定义信号和槽"></a>自定义信号和槽</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TEACHER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Teacher</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">//自定义信号  写到signals下</span></span><br><span class="line">    <span class="comment">//返回值是void  只需要声明  不需要实现</span></span><br><span class="line">    <span class="comment">//可以有参数  可以重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hungry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// TEACHER_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STUDENT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Student</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//早起版本槽函数写在public slots下，5.4版本后写在public或者全局下</span></span><br><span class="line">    <span class="comment">//返回值void 需要声明 需要实现</span></span><br><span class="line">    <span class="comment">//可以有参数 可以重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// STUDENT_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Student::<span class="built_in">Student</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::treat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;please eat teacher&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line"></span><br><span class="line">    Teacher * cc;</span><br><span class="line">    Student * ll;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">classIsOver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Teacher 类 老师类</span></span><br><span class="line"><span class="comment">//Student 类 学生类</span></span><br><span class="line"><span class="comment">//下课后，老师会触发一个信号，饿了，学生相应信号，请客吃饭</span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;cc = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;ll = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老师饿了 学生请老师吃饭</span></span><br><span class="line">    <span class="built_in">connect</span>(cc, &amp;Teacher::hungry, ll, &amp;Student::treat);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用下课函数</span></span><br><span class="line">    <span class="built_in">classIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//下课函数 调用后 触发老师饿了的信号</span></span><br><span class="line">    emit cc-&gt;<span class="built_in">hungry</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Widget w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重载</strong></p><p>当自定义信号和槽出现重载，需要利用函数指针明确指向函数的地址</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hungry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hungry</span><span class="params">(QString foodName)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">(QString foodName)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">emit cc-&gt;<span class="built_in">hungry</span>(<span class="string">&quot;sandwich&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//连接带参数的信号和槽</span></span><br><span class="line"><span class="comment">//指针-&gt;地址</span></span><br><span class="line"><span class="comment">//函数指针-&gt;函数地址</span></span><br><span class="line"><span class="built_in">void</span>(Teacher:: *teacherSignal)(QString) = &amp;Teacher::hungry;</span><br><span class="line"><span class="built_in">void</span>(Student:: *studentSlot)(QString) = &amp;Student::treat;</span><br><span class="line"><span class="built_in">connect</span>(cc, teacherSignal, ll, studentSlot);</span><br><span class="line"></span><br><span class="line"><span class="built_in">classIsOver</span>();</span><br></pre></td></tr></table></figure><p><strong>点击一个下课的按钮再触发下课 &amp; 信号连接信号</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;cc = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;ll = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //老师饿了 学生请老师吃饭</span></span><br><span class="line">    <span class="comment">// connect(cc, &amp;Teacher::hungry, ll, &amp;Student::treat);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //调用下课函数</span></span><br><span class="line">    <span class="comment">// classIsOver();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接带参数的信号和槽</span></span><br><span class="line">    <span class="comment">//指针-&gt;地址</span></span><br><span class="line">    <span class="comment">//函数指针-&gt;函数地址</span></span><br><span class="line">    <span class="built_in">void</span>(Teacher:: *teacherSignal)(QString) = &amp;Teacher::hungry;</span><br><span class="line">    <span class="built_in">void</span>(Student:: *studentSlot)(QString) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(cc, teacherSignal, ll, studentSlot);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//classIsOver();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击一个下课的按钮再触发下课</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;class over&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击按钮出发下课</span></span><br><span class="line">    <span class="comment">//connect(btn, &amp;QPushButton::clicked, this, &amp;Widget::classIsOver);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参信号和槽连接</span></span><br><span class="line">    <span class="built_in">void</span>(Teacher:: *teacherSignal2)(<span class="type">void</span>) = &amp;Teacher::hungry;</span><br><span class="line">    <span class="built_in">void</span>(Student:: *studentSlot2)(<span class="type">void</span>) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(cc, teacherSignal2, ll, studentSlot2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//信号连接信号</span></span><br><span class="line">    <span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, cc, teacherSignal2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//断开信号</span></span><br><span class="line">    <span class="comment">//disconnect(cc, teacherSignal2, ll, studentSlot2)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>QString-&gt;char *  先转成QByteArray (.toUtf8())  再转成char * ()</strong></p><ul><li><p>一个信号可以连接多个槽函数</p></li><li><p>多个信号可以连接同一个槽函数</p></li><li><p>信号和槽函数的参数必须类型一一对应</p></li><li><p>信号和槽的参数个数不需要一致，信号的参数个数可以多于槽函数的参数个数</p></li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//QT4版本以前的信号和槽连接方式</span></span><br><span class="line"><span class="comment">//利用QT4信号槽连接无参版本</span></span><br><span class="line"><span class="comment">//QT4版本底层SIGNAL(&quot;hungry&quot;)  SLOT(&quot;treat&quot;)</span></span><br><span class="line"><span class="built_in">connect</span>(cc, <span class="built_in">SIGNAL</span>(<span class="built_in">hungry</span>()), ll, <span class="built_in">SLOT</span>(<span class="built_in">treat</span>()));</span><br><span class="line"><span class="comment">//QT4版本优点：参数直观   缺点：类型不做检测</span></span><br><span class="line"><span class="comment">//QT5以上版本支持QT4版本写法，反之不支持</span></span><br></pre></td></tr></table></figure><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>[]标识符 匿名函数</p><p>&#x3D; 值传递</p><p>&amp; 引用传递</p><p>() 参数  {}实现体</p><p>mutable 修饰值传递变量，可以修改拷贝出的数据，改变不了本体</p><p>返回值 <a href=""></a>-&gt;int{}</p><p>最常用  <a href="">&#x3D;</a>{}</p><p>C++11中的Lambda表达式(这个再找资料看一下)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用lambda表达式实现点击按钮关闭窗口</span></span><br><span class="line">QPushButton * btn2 = <span class="keyword">new</span> QPushButton;</span><br><span class="line">btn2-&gt;<span class="built_in">setText</span>(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">btn2-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(btn2, &amp;QPushButton::clicked, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">    emit cc-&gt;<span class="built_in">hungry</span>(<span class="string">&quot;sandwich&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//btn2-&gt;setText(&quot;aaa&quot;);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>QMainWindow是一个为用户提供主窗口程序的类，包含一个菜单栏（menu bar）、多个工具栏(tool bars)、多个锚接部件(dock widgets)(浮动窗口)、一个状态栏(status bar)及一个中心部件(central widget)，是许多应用程序的基础，如文本编辑器，图片编辑器等。</p><p><img src="/posts/abd0a875/3.png"></p><h2 id="基础-常用操作"><a href="#基础-常用操作" class="headerlink" title="基础&amp;常用操作"></a>基础&amp;常用操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenuBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QToolBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QStatusBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDockWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTextEdit&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单栏--------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单栏 最多只能有一个</span></span><br><span class="line">    <span class="comment">//菜单栏创建</span></span><br><span class="line">    QMenuBar * bar = <span class="built_in">menuBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将菜单栏放入到 窗口中</span></span><br><span class="line">    <span class="built_in">setMenuBar</span>(bar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单</span></span><br><span class="line">    QMenu * fileMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">    QMenu * editMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单项</span></span><br><span class="line">    QAction * newAction = fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">    <span class="comment">//添加分隔符</span></span><br><span class="line">    fileMenu-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    QAction * openAction = fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏--------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏   可以有多个</span></span><br><span class="line">    QToolBar * toolBar = <span class="keyword">new</span> <span class="built_in">QToolBar</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">addToolBar</span>(Qt::LeftToolBarArea, toolBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后期设置只允许左右停靠</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setAllowedAreas</span>(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置浮动</span></span><br><span class="line">    <span class="comment">//toolBar-&gt;setFloatable(false);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置移动（总开关）</span></span><br><span class="line">    <span class="comment">//toolBar-&gt;setMovable(false);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在工具栏中设置内容</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(newAction);</span><br><span class="line">    <span class="comment">//添加分割线</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(openAction);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏中添加控件</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;aa&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    toolBar-&gt;<span class="built_in">addWidget</span>(btn);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态栏--------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态栏    最多有一个</span></span><br><span class="line">    QStatusBar * stBar = <span class="built_in">statusBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置到窗口中</span></span><br><span class="line">    <span class="built_in">setStatusBar</span>(stBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放标签控件</span></span><br><span class="line">    QLabel * label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    stBar-&gt;<span class="built_in">addWidget</span>(label);</span><br><span class="line"></span><br><span class="line">    QLabel * label2 = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;右侧提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    stBar-&gt;<span class="built_in">addPermanentWidget</span>(label2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//锚接部件--------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//锚接部件 （浮动窗口）  可以有多个</span></span><br><span class="line">    QDockWidget * dockWidget = <span class="keyword">new</span> <span class="built_in">QDockWidget</span>(<span class="string">&quot;浮动&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">addDockWidget</span>(Qt::BottomDockWidgetArea, dockWidget);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置后期停靠区域，只允许上下</span></span><br><span class="line">    dockWidget-&gt;<span class="built_in">setAllowedAreas</span>(Qt::TopDockWidgetArea | Qt::BottomDockWidgetArea);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中心部件--------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置中心部件(核心部件)   只能有一个</span></span><br><span class="line">    QTextEdit * edit = <span class="keyword">new</span> <span class="built_in">QTextEdit</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">setCentralWidget</span>(edit);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/4.png"></p><h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><ol><li><p>将图片文件拷贝到项目文件下</p></li><li><p>创建新文件-&gt;QT-&gt;QT resource file-&gt;给资源文件起名</p></li><li><p>res生成res.qrc</p></li><li><p>open in editor 编辑资源</p></li><li><p>添加前缀 添加文件</p></li><li><p>使用”: + 前缀名 + 文件名”</p></li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ui-&gt;actionnew-&gt;setIcon(QIcon(&quot;D:/喜欢/罗小黑&amp;其他/001VEnKKgy1gsu6mbym6vj60t41dan4j02.jpg&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用添加QT资源    &quot;: + 前缀名 + 文件名&quot;</span></span><br><span class="line">    ui-&gt;actionnew-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/image/001VEnKKgy1gsu6mbym6vj60t41dan4j02.jpg&quot;</span>));</span><br><span class="line">    ui-&gt;actionopen-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/image/005y0Ylbly1hhdrfsc6pbj32p51pinpe.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/5.png"></p><h1 id="对话框QDialog"><a href="#对话框QDialog" class="headerlink" title="对话框QDialog"></a>对话框QDialog</h1><h2 id="自定义对话框"><a href="#自定义对话框" class="headerlink" title="自定义对话框"></a>自定义对话框</h2><p>模态与非模态对话框的创建</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击新建按钮，弹出一个对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew,&amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="comment">//对话框 分类</span></span><br><span class="line">        <span class="comment">//模态对话框（不可以对其他窗口进行操作）  非模态对话框（可以对其他窗口进行操作）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //模态创建  阻塞</span></span><br><span class="line">        <span class="comment">// QDialog dlg(this);</span></span><br><span class="line">        <span class="comment">// dlg.resize(300,200);</span></span><br><span class="line">        <span class="comment">// dlg.exec();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// exec()：是 QDialog 类的成员函数，用于以模态（Modal）的方式显示对话框。</span></span><br><span class="line">        <span class="comment">// 模态对话框会阻塞程序的执行，直到用户关闭对话框并返回结果。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// qDebug() &lt;&lt; &quot;模态对话框弹出了&quot;;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//非模态对话框</span></span><br><span class="line">        QDialog * dlg2 = <span class="keyword">new</span> <span class="built_in">QDialog</span>(<span class="keyword">this</span>);</span><br><span class="line">        dlg2-&gt;<span class="built_in">resize</span>(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">        dlg2-&gt;<span class="built_in">show</span>();</span><br><span class="line">        dlg2-&gt;<span class="built_in">setAttribute</span>(Qt::WA_DeleteOnClose);<span class="comment">//55号属性</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;非模态对话框弹出了&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准对话框"><a href="#标准对话框" class="headerlink" title="标准对话框"></a>标准对话框</h2><p>消息对话框</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击新建按钮，弹出一个对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew,&amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="comment">//对话框 分类</span></span><br><span class="line">        <span class="comment">//模态对话框（不可以对其他窗口进行操作）  非模态对话框（可以对其他窗口进行操作）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //模态创建  阻塞</span></span><br><span class="line">        <span class="comment">// QDialog dlg(this);</span></span><br><span class="line">        <span class="comment">// dlg.resize(300,200);</span></span><br><span class="line">        <span class="comment">// dlg.exec();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// exec()：是 QDialog 类的成员函数，用于以模态（Modal）的方式显示对话框。</span></span><br><span class="line">        <span class="comment">// 模态对话框会阻塞程序的执行，直到用户关闭对话框并返回结果。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// qDebug() &lt;&lt; &quot;模态对话框弹出了&quot;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //非模态对话框</span></span><br><span class="line">        <span class="comment">// QDialog * dlg2 = new QDialog(this);</span></span><br><span class="line">        <span class="comment">// dlg2-&gt;resize(300,200);</span></span><br><span class="line">        <span class="comment">// dlg2-&gt;show();</span></span><br><span class="line">        <span class="comment">// dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose);//55号属性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// qDebug() &lt;&lt; &quot;非模态对话框弹出了&quot;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//消息对话框-----------------------------------------</span></span><br><span class="line">        <span class="comment">// //错误对话框</span></span><br><span class="line">        <span class="comment">// QMessageBox::critical(this, &quot;critical&quot;, &quot;error&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //信息对话框</span></span><br><span class="line">        <span class="comment">// QMessageBox::information(this, &quot;info&quot;, &quot;information&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//提问对话框</span></span><br><span class="line">        <span class="comment">//参数1 父亲 参数2 标题 参数3 提示内容 参数4 按键类型 参数5 默认关联回车按键</span></span><br><span class="line">        <span class="comment">//QMessageBox::question(this, &quot;ques&quot;, &quot;question&quot;);</span></span><br><span class="line">        <span class="comment">//QMessageBox::question(this, &quot;ques&quot;, &quot;question&quot;, QMessageBox::Save | QMessageBox::Cancel);</span></span><br><span class="line">        <span class="comment">//QMessageBox::question(this, &quot;ques&quot;, &quot;question&quot;, QMessageBox::Save | QMessageBox::Cancel, QMessageBox::Cancel);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// if (QMessageBox::Save == QMessageBox::question(this, &quot;ques&quot;, &quot;question&quot;, QMessageBox::Save | QMessageBox::Cancel))</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     qDebug() &lt;&lt; &quot;select save&quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// else</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     qDebug() &lt;&lt; &quot;select cancel&quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//警告对话框</span></span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;war&quot;</span>, <span class="string">&quot;waring&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/6.png"></p><p><img src="/posts/abd0a875/7.png"></p><p><img src="/posts/abd0a875/8.png"></p><p><img src="/posts/abd0a875/9.png"></p><p><img src="/posts/abd0a875/10.png"></p><p><strong>其他标准对话框</strong></p><p>QColorDialog：选择颜色</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//颜色对话框</span></span><br><span class="line"><span class="comment">//QColorDialog::getColor(QColor(255,0,0));</span></span><br><span class="line">QColor color = QColorDialog::<span class="built_in">getColor</span>(<span class="built_in">QColor</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;r = &quot;</span> &lt;&lt; color.<span class="built_in">red</span>() &lt;&lt; <span class="string">&quot;g = &quot;</span> &lt;&lt; color.<span class="built_in">green</span>() &lt;&lt; <span class="string">&quot;b = &quot;</span></span><br><span class="line">         &lt;&lt; color.<span class="built_in">blue</span>();</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/11.png"></p><p>QFileDialog：选择文件或者目录</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件对话框</span></span><br><span class="line"><span class="comment">//参数1 父亲 参数2 标题 参数3 默认打开路径 参数4 过滤文件格式</span></span><br><span class="line"><span class="comment">//返回值是选取的路径</span></span><br><span class="line">QString str = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="string">&quot;open file&quot;</span>, <span class="string">&quot;C:\\Users\\****\\Desktop&quot;</span>, <span class="string">&quot;(*.txt)&quot;</span>);</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; str;</span><br></pre></td></tr></table></figure><p>QFontDialog：选择字体</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字体对话框</span></span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line">QFont font = QFontDialog::<span class="built_in">getFont</span>(&amp;flag, <span class="built_in">QFont</span>(<span class="string">&quot;华文彩云&quot;</span>, <span class="number">36</span>));</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;字体：&quot;</span> &lt;&lt; font.<span class="built_in">family</span>().<span class="built_in">toUtf8</span>().<span class="built_in">data</span>() &lt;&lt; <span class="string">&quot;字号：&quot;</span> &lt;&lt; font.<span class="built_in">pointSize</span>()</span><br><span class="line">          &lt;&lt; <span class="string">&quot;是否加粗：&quot;</span> &lt;&lt; font.<span class="built_in">bold</span>() &lt;&lt; <span class="string">&quot;是否倾斜：&quot;</span> &lt;&lt; font.<span class="built_in">italic</span>();</span><br></pre></td></tr></table></figure><p>QInputDialog：允许用户输入一个值，并将其值返回</p><p>QMessageBox：模态对话框，用于显示信息、询问问题等</p><p>QPageSetupDialog：为打印机提供纸张相关的选项</p><p>QPrintDialog：打印机配置</p><p>QPrintPreviewDialog：打印预览</p><p>QProgressDialog：显示操作过程</p><h1 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h1><h2 id="实现登录窗口"><a href="#实现登录窗口" class="headerlink" title="实现登录窗口"></a>实现登录窗口</h2><p>利用布局方式给窗口进行美化</p><p>选取widget进行布局，水平布局，垂直布局，栅格布局</p><p>给用户名、密码、登录、退出按钮进行布局</p><p>默认窗口和控件之间有6像素，可以调整layoutLeftMargin</p><p>利用弹簧进行布局</p><p>调整固定高度</p><p><img src="/posts/abd0a875/12.png"></p><h1 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h1><h2 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h2><p>QPushButton  常用按钮</p><p>QToolButton  工具按钮 用于显示图片 显示文字</p><p>toolButtonStyle  凸起风格 autoRaise</p><p>radioButton  单选按钮 默认ui-&gt;radioButtonMan-&gt;setChecked(true);</p><p>checkBox  多选按钮 监听状态 </p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置单选按钮 男默认选中</span></span><br><span class="line">ui-&gt;radioButtonMan-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选中女后打印信息</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;radioButtonWoman, &amp;QRadioButton::clicked, [=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;select woman!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多选按钮   2是选中  0是未选中  1是半选</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;checkBox_4, &amp;QCheckBox::stateChanged, [=](<span class="type">int</span> state)&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; state;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/13.png"></p><h2 id="QListWidgetItem-列表容器"><a href="#QListWidgetItem-列表容器" class="headerlink" title="QListWidgetItem 列表容器"></a>QListWidgetItem 列表容器</h2><p>QListWidgetItem * item        一行内容<br>ui-&gt;listWidget-&gt;addItem(item)</p><p>可以利用additems一次性添加整个内容</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// //利用listWidget写诗</span></span><br><span class="line"><span class="comment">// QListWidgetItem * item = new QListWidgetItem(&quot;人生天地间&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //将一行诗放入到listWidget控件中</span></span><br><span class="line"><span class="comment">// ui-&gt;listWidget-&gt;addItem(item);</span></span><br><span class="line"><span class="comment">//设置居中方式</span></span><br><span class="line"><span class="comment">// item-&gt;setTextAlignment(Qt::AlignCenter);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//QStringList  QList&lt;QString&gt;</span></span><br><span class="line">QStringList list;</span><br><span class="line">list &lt;&lt; <span class="string">&quot;人生天地间&quot;</span> &lt;&lt; <span class="string">&quot;忽如远行客&quot;</span> &lt;&lt; <span class="string">&quot;斗酒相娱乐&quot;</span> &lt;&lt; <span class="string">&quot;聊厚不为薄&quot;</span>;</span><br><span class="line">ui-&gt;listWidget-&gt;<span class="built_in">addItems</span>(list);</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/14.png"></p><h2 id="QTreeWidget-树控件"><a href="#QTreeWidget-树控件" class="headerlink" title="QTreeWidget 树控件"></a>QTreeWidget 树控件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//treeWidget控件的使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置水平头</span></span><br><span class="line">ui-&gt;treeWidget-&gt;<span class="built_in">setHeaderLabels</span>(<span class="built_in">QStringList</span>()&lt;&lt; <span class="string">&quot;一&quot;</span> &lt;&lt; <span class="string">&quot;内容&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建顶层节点</span></span><br><span class="line">QTreeWidgetItem * liTtem = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>()&lt;&lt; <span class="string">&quot;一&quot;</span>);</span><br><span class="line">QTreeWidgetItem * liTtem2 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>()&lt;&lt; <span class="string">&quot;二&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载顶层节点</span></span><br><span class="line">ui-&gt;treeWidget-&gt;<span class="built_in">addTopLevelItem</span>(liTtem);</span><br><span class="line">ui-&gt;treeWidget-&gt;<span class="built_in">addTopLevelItem</span>(liTtem2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//追加子节点</span></span><br><span class="line"><span class="comment">//QTreeWidgetItem * ll = new QTreeWidgetItem(QStringList()&lt;&lt; &quot;一帆一江一渔舟&quot;&lt;&lt;&quot;一个渔翁一个钩&quot;);</span></span><br><span class="line"><span class="comment">// QStringList first;</span></span><br><span class="line"><span class="comment">// first &lt;&lt; &quot;一帆一江一渔舟，一个渔翁一个钩&quot;;</span></span><br><span class="line"><span class="comment">// QTreeWidgetItem * ll = new QTreeWidgetItem(first);</span></span><br><span class="line"><span class="comment">// liTtem-&gt;addChild(ll);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// QStringList second;</span></span><br><span class="line"><span class="comment">// second &lt;&lt; &quot;一俯一仰一场笑，一江明月一江秋&quot;;</span></span><br><span class="line"><span class="comment">// QTreeWidgetItem * ll2 = new QTreeWidgetItem(second);</span></span><br><span class="line"><span class="comment">// liTtem2-&gt;addChild(ll2);</span></span><br><span class="line"></span><br><span class="line">QTreeWidgetItem *childItem1 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt;<span class="string">&quot;&quot;</span>&lt;&lt;<span class="string">&quot;一帆一江一渔舟，一个渔翁一个钩&quot;</span>);</span><br><span class="line">QTreeWidgetItem *childItem2 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;&quot;</span>&lt;&lt;<span class="string">&quot;一俯一仰一场笑，一江明月一江秋&quot;</span>);</span><br><span class="line">liTtem-&gt;<span class="built_in">addChild</span>(childItem1);</span><br><span class="line">liTtem2-&gt;<span class="built_in">addChild</span>(childItem2);</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/15.png"></p><h2 id="QTableWidget-表格控件"><a href="#QTableWidget-表格控件" class="headerlink" title="QTableWidget 表格控件"></a>QTableWidget 表格控件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TableWidget 控件</span></span><br><span class="line"><span class="comment">//设置列数</span></span><br><span class="line">ui-&gt;tableWidget-&gt;<span class="built_in">setColumnCount</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置水平表头</span></span><br><span class="line">ui-&gt;tableWidget-&gt;<span class="built_in">setHorizontalHeaderLabels</span>(<span class="built_in">QStringList</span>()&lt;&lt;<span class="string">&quot;姓名&quot;</span>&lt;&lt;<span class="string">&quot;性别&quot;</span>&lt;&lt;<span class="string">&quot;年龄&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置行数</span></span><br><span class="line">ui-&gt;tableWidget-&gt;<span class="built_in">setRowCount</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置正文</span></span><br><span class="line"><span class="comment">//ui-&gt;tableWidget-&gt;setItem(0,0,new QTableWidgetItem(&quot;小李&quot;));</span></span><br><span class="line"></span><br><span class="line">QStringList nameList;</span><br><span class="line">nameList&lt;&lt;<span class="string">&quot;小李&quot;</span>&lt;&lt;<span class="string">&quot;小王&quot;</span>&lt;&lt;<span class="string">&quot;小杨&quot;</span>&lt;&lt;<span class="string">&quot;小刘&quot;</span>&lt;&lt;<span class="string">&quot;小赵&quot;</span>;</span><br><span class="line"></span><br><span class="line">QList&lt;QString&gt;sexList;</span><br><span class="line">sexList&lt;&lt;<span class="string">&quot;女&quot;</span>&lt;&lt;<span class="string">&quot;女&quot;</span>&lt;&lt;<span class="string">&quot;女&quot;</span>&lt;&lt;<span class="string">&quot;女&quot;</span>&lt;&lt;<span class="string">&quot;女&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> col = <span class="number">0</span>;</span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i,col++,<span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(nameList[i]));</span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i,col++,<span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(sexList.<span class="built_in">at</span>(i))); <span class="comment">//at越界抛出异常</span></span><br><span class="line">    <span class="comment">//int 转 QString</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i,col++,<span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(QString::<span class="built_in">number</span>(i+<span class="number">18</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/16.png"></p><h2 id="其他控件"><a href="#其他控件" class="headerlink" title="其他控件"></a>其他控件</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//栈控件的使用---------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置默认定位Button</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Button按钮</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;Button, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">    ui-&gt;stackedWidget-&gt;<span class="built_in">setCurrentIndex</span>(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//buttonTabBox按钮</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;buttonTabBox, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">    ui-&gt;stackedWidget-&gt;<span class="built_in">setCurrentIndex</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ButtonTabWidget按钮</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;ButtonTabWidget, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">    ui-&gt;stackedWidget-&gt;<span class="built_in">setCurrentIndex</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下拉框</span></span><br><span class="line">ui-&gt;comboBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;杜鹃&quot;</span>);</span><br><span class="line">ui-&gt;comboBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;樱花&quot;</span>);</span><br><span class="line">ui-&gt;comboBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;海棠&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击按钮 选中海棠</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;btnSelect, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">    <span class="comment">//ui-&gt;comboBox-&gt;setCurrentIndex(2);</span></span><br><span class="line">    ui-&gt;comboBox-&gt;<span class="built_in">setCurrentText</span>(<span class="string">&quot;海棠&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用QLabel显示图片</span></span><br><span class="line">ui-&gt;labelImage-&gt;<span class="built_in">setPixmap</span>(<span class="built_in">QPixmap</span>(<span class="string">&quot;:/image/005y0Ylbly1hj9kxm09i0j31kw1kw1ky.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用QLabel显示gif动态图片</span></span><br><span class="line">QMovie * movie = <span class="keyword">new</span> <span class="built_in">QMovie</span>(<span class="string">&quot;:/image/小太阳gif.jpg&quot;</span>);</span><br><span class="line">ui-&gt;labelMovie-&gt;<span class="built_in">setMovie</span>(movie);</span><br><span class="line"><span class="comment">//播放动图</span></span><br><span class="line">movie-&gt;<span class="built_in">start</span>();</span><br></pre></td></tr></table></figure><p><img src="/posts/abd0a875/17.png"></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法——学习记录ing</title>
      <link href="/posts/f4c4f07f.html"/>
      <url>/posts/f4c4f07f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li><p><strong>学习和参考的资料来源</strong>：</p><p>  <a href="https://www.programmercarl.com/">代码随想录</a><br>  <a href="https://leetcode.cn/">leetcode</a></p></li></ul><h1 id="补充知识（持续更新ing）"><a href="#补充知识（持续更新ing）" class="headerlink" title="补充知识（持续更新ing）"></a>补充知识（持续更新ing）</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度是一个函数，它定性描述该算法的运行时间。</p><p>通常会估算算法的操作单元数量来代表程序消耗的时间，这里默认CPU的每个单元运行消耗的时间都是相同的。</p><p>假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐进时间复杂度，简称时间复杂度，记为O(f(n))。</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度是一个算法在运行过程中占用内存空间大小的量度，基座S(n) &#x3D; O(f(n))。</p><p>空间复杂度(Space Complexity)基座S(n)依然使用大O来表示。利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。</p><ul><li>空间复杂度是考虑程序运行时占用内存的大小，而不是可执行文件的大小。</li><li>不要以为空间复杂度就已经精确的掌握了程序的内存使用大小，很多因素会影响程序真正内存使用大小，例如编译器的内存对齐，编程语言容器的底层实现等等这些都会影响到程序内存的开销。所以空间复杂度是预先大体评估程序内存使用的大小。</li></ul><p>空间复杂度是logn的情况确实有些特殊，其实是在递归的时候，会出现空间复杂度为logn的情况。</p><h2 id="不同语言的内存管理"><a href="#不同语言的内存管理" class="headerlink" title="不同语言的内存管理"></a>不同语言的内存管理</h2><ul><li>C\C++这种内存堆空间的申请和释放完全考自己管理</li><li>Java依赖JVM来做内存管理，不了解jvm内存管理的机制，很可能会因一些错误的代码写法而导致内存泄漏或内存溢出</li><li>Python内存管理是由私有堆空间管理的，所有的python对象和数据结构都存储在私有对空间中。程序员没有访问堆的权限，只有解释器才能操作。</li></ul><p>例如Python万物皆对象，并且将内存操作封装的很好，所以python的基本数据类型所用的内存会要远大于存放纯数据类型所占的内存，例如，存储int型数据需要四个字节，但是使用python申请一个对象来存放数据的话，所用空间要远大于四个字节。</p><h2 id="C-的内存管理"><a href="#C-的内存管理" class="headerlink" title="C++的内存管理"></a>C++的内存管理</h2><p>程序运行时所需的内存空间分为固定部分和可变部分，如下：</p><p><img src="/posts/f4c4f07f/1.png" alt="内存管理"></p><p>固定部分的内存消耗是不会随着代码运行产生变化的，可变部分则是会产生变化的，更具体一些，一个由C&#x2F;C++编译的程序占用的内存分为以下几个部分：</p><ul><li>栈区(Stack)：由编译器自动分配释放，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构中的栈。</li><li>堆区(Heap)：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS收回。</li><li>未初始化数据区(Uninitialized Data)：存放未初始化的全局变量和静态变量</li><li>初始化数据区(Initialized Data)：存放已经初始化的全局变量和静态变量</li><li>程序代码区(Text)：存放函数体的二进制代码</li></ul><p>代码区和数据区所占空间都是固定的，而且占用的空间非常小，那么看运行时消耗的内存主要看可变部分。</p><p>在可变部分中，栈区间的数据在代码块之心结束之后，系统会自动回收，而堆区间数据是需要程序员自己回收，所以也就是造成内存泄漏的发源地。</p><p>而java和python的话则不需要程序员去考虑内存泄漏的问题，虚拟机都做了这些事情。</p><h2 id="如何计算程序占用多大内存"><a href="#如何计算程序占用多大内存" class="headerlink" title="如何计算程序占用多大内存"></a>如何计算程序占用多大内存</h2><p>想要计算出自己的程序会占用多少内存就一定要了解自己定义的数据类型的大小，如下：</p><p><img src="/posts/f4c4f07f/2.png"></p><p>1个字节占8比特，那么4个字节就是32个比特，可存放数据的大小为2^32，也就是4G空间的大小，即可以寻找4G空间大小的内存地址。</p><p>现在大家使用的计算机一般都是64位了，所以编译器也都是64位的。</p><p>安装64位的操作系统的计算机内存都已经超过了4G，也就是指针大小如果还是4个字节的话，就已经不能寻址全部的内存地址，所以64位编译器使用8个字节的指针才能寻找所有的内存地址。</p><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>只要可以跨平台的编程语言都需要做内存对齐，Java、Python都是一样的。</p><p>为什么会有内存对齐？</p><p>主要有两个原因：</p><ul><li>1.平台原因：不是所有的硬件平台都能访问内存地址上的任意数据，某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。为了同一个程序可以在多平台运行，需要内存对齐。</li><li>2.硬件原因：经过内存对齐后，CPU访问内存的速度大大提升。</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> num;</span><br><span class="line">   <span class="type">char</span> cha;</span><br><span class="line">&#125;st;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> b[<span class="number">100</span>];</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(st) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其输出的结果依次为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">400</span><br><span class="line">100</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>此时会发现，和单纯计算字节数的话是有一些误差的。</p><p>这就是因为内存对齐的原因。</p><p>来看一下内存对齐和非内存对齐产生的效果区别。</p><p>CPU读取内存不是一次读取单个字节，而是一块一块的来读取内存，块的大小可以是2，4，8，16个字节，具体取多少个字节取决于硬件。</p><p>假设CPU把内存划分为4字节大小的块，要读取一个4字节大小的int型数据，来看一下这两种情况下CPU的工作量：</p><p><img src="/posts/f4c4f07f/3.png"></p><p>char型的数据和int型的数据挨在一起，该int数据从地址1开始，那么CPU想要读这个数据的话需要以下几步操作：</p><ul><li>1.因为CPU是四个字节来寻址，首先CPU先读取0、1、2、3处的四个字节数据</li><li>2.CPU读取4、5、6、7处的四个字节数据</li><li>3.合并地址1、2、3、4处四个字节的数据才是本次操作需要的int数据</li></ul><p>此时一共需要两次寻址，一次合并的操作</p><p>内存对齐会浪费内存资源，但事实上，相对来说计算机内存资源一般都是充足的，我们更希望的是提高运行速度。</p><p>编译器一般都会做内存对齐的优化操作，也就是说当考虑程序真正占用的内存大小的时候，也需要认识到内存对齐的影响。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>数组是存放在连续内存空间上的相同类型数据的集合。</p><p>数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p><p>两点注意：</p><ul><li>数组下标都是从0开始的</li><li>数组内存空间的地址是连续的</li></ul><p>正是因为数组的内存空间地址是连续的，所以在删除或增添元素的时候，就难免要移动其他元素的地址。</p><p>数组的元素是不能删的，只能覆盖。</p><p>不同编程语言的内存管理是不一样的，以C++为例，在C++中二维数组是连续分布的。</p><h2 id="leetcode题目链接"><a href="#leetcode题目链接" class="headerlink" title="leetcode题目链接"></a>leetcode题目链接</h2><p><a href="https://leetcode.cn/problems/binary-search/description/">二分查找</a></p><p><a href="https://leetcode.cn/problems/remove-element/description/">移除元素</a></p><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">有序数组的平方</a></p><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">长度最小的子数组</a></p><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/description/">螺旋矩阵 II</a></p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="链表理论基础"><a href="#链表理论基础" class="headerlink" title="链表理论基础"></a>链表理论基础</h2><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域，最后一个节点的指针域指向null。</p><p>链表的入口节点称为链表的头节点也就是head。</p><p><img src="/posts/f4c4f07f/4.png"></p><h3 id="链表的类型"><a href="#链表的类型" class="headerlink" title="链表的类型"></a>链表的类型</h3><p><strong>单链表</strong></p><p>单链表（Singly Linked List）是一种常见的线性数据结构，由一系列节点组成，每个节点包含两部分：数据部分和指针部分。其中，数据部分用于存储数据，指针部分用于指向下一个节点。</p><p>单链表中的节点按照顺序连接，每个节点只有一个指针指向下一个节点，而最后一个节点的指针部分通常指向一个特殊的值（如NULL），表示链表的结束。</p><p><strong>双链表</strong></p><p>单链表中的指针域只能指向节点的下一个节点。</p><p>双链表：每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。</p><p>双链表既可以向前查询也可以向后查询。</p><p><img src="/posts/f4c4f07f/5.png"></p><p><strong>循环链表</strong></p><p>顾名思义，就是链表首尾相连。</p><p>循环链表可以用来解决瑟夫环问题。</p><p><img src="/posts/f4c4f07f/6.png"></p><h3 id="链表的存储方式"><a href="#链表的存储方式" class="headerlink" title="链表的存储方式"></a>链表的存储方式</h3><p>链表是通过指针域的指针链接在内存中各个节点。</p><p>所以链表中的节点在内存中不是连续分布的，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。</p><p><img src="/posts/f4c4f07f/6.png"></p><h3 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h3><p><strong>删除节点</strong></p><p><strong>添加节点</strong></p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><img src="/posts/f4c4f07f/8.png"></p><p>数组在定义的时候，长度是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。</p><p>链表的长度可以是不固定的，并且可以动态增删，适合数量不固定，频繁增删，较少查询的场景。</p><h2 id="leetcode题目链接-1"><a href="#leetcode题目链接-1" class="headerlink" title="leetcode题目链接"></a>leetcode题目链接</h2><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/description/">移除链表元素</a></p><p><a href="https://leetcode.cn/problems/design-linked-list/description/">设计链表</a></p><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/">反转链表</a></p><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">两两交换链表中的节点</a></p><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">删除链表的倒数第N个结点</a></p><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">链表相交</a></p><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">环形链表 II</a></p><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="哈希表理论基础"><a href="#哈希表理论基础" class="headerlink" title="哈希表理论基础"></a>哈希表理论基础</h2><p>哈希表(Hash table)——散列表</p><p>哈希表是根据关键码的值而直接进行访问的数据结构。</p><p>（哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素）</p><p>一般哈希表都是用来快速判断一个元素是否出现集合里。</p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>例如要查询一个名字是否在学校里，哈希函数把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里。</p><h2 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h2><p>拉链法：发生冲突的元素都被存储在链表中</p><p>线性探测法:使用线性探测法，一定要保证tableSize大于dataSize。依靠哈希表中的空位来解决碰撞问题。</p><h2 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="常见的三种哈希结构"></a>常见的三种哈希结构</h2><ul><li>数组</li><li>set（集合）</li><li>map（映射）</li></ul><p><img src="/posts/f4c4f07f/9.png"></p><p>std::unordered_set底层实现为哈希表，std::set 和std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以key值是有序的，但key不可以修改，改动key值会导致整棵树的错乱，所以只能删除和增加。</p><p><img src="/posts/f4c4f07f/10.png"></p><p>std::unordered_map 底层实现为哈希表，std::map 和std::multimap 的底层实现是红黑树。同理，std::map 和std::multimap 的key也是有序的。</p><p>当要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。</p><p>map 是一个key value 的数据结构，map中，对key是有限制，对value没有限制的，因为key的存储方式使用红黑树实现的。</p><p>虽然std::set、std::multiset 的底层实现是红黑树，不是哈希表，std::set、std::multiset 使用红黑树来索引和存储，不过给我们的使用方式，还是哈希法的使用方式，即key和value。所以使用这些数据结构来解决映射问题的方法，依然称之为哈希法。 map也是一样的道理。</p><p><strong>总结</strong></p><p>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。</p><p>但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p><h2 id="leetcode题目链接-2"><a href="#leetcode题目链接-2" class="headerlink" title="leetcode题目链接"></a>leetcode题目链接</h2><p><a href="https://leetcode.cn/problems/valid-anagram/description/">有效的字母异位词</a></p><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/description/">两个数组的交集</a></p><p><a href="https://leetcode.cn/problems/happy-number/description/">快乐数</a></p><p><a href="https://leetcode.cn/problems/two-sum/description/">两数之和</a></p><p><a href="https://leetcode.cn/problems/4sum-ii/description/">四数相加 II</a></p><p><a href="https://leetcode.cn/problems/ransom-note/description/">赎金信</a></p><p>双指针法：</p><!-- [三数之和](https://leetcode.cn/problems/3sum/description/) --><p><a href="https://leetcode.cn/problems/4sum/description/">四数之和</a></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><a href="https://leetcode.cn/problems/reverse-string/description/">反转字符串</a></p><p><a href="https://leetcode.cn/problems/reverse-string-ii/description/">反转字符串 II</a></p><p><a href="https://kamacoder.com/problempage.php?pid=1064">替换数字</a></p><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/">反转字符串里的单词</a></p><p><a href="https://kamacoder.com/problempage.php?pid=1065">右旋字符串</a></p><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">找出字符串中第一个匹配项的下标</a></p><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/description/">重复的子字符串</a></p><h1 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h1><p><a href="https://leetcode.cn/problems/remove-element/description/">移除元素</a></p><p><a href="https://leetcode.cn/problems/reverse-string/description/">反转字符串</a></p><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/">翻转字符串里的单词</a></p><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/">反转链表</a></p><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">删除链表的倒数第 N 个结点</a></p><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">链表相交</a></p><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">环形链表 II</a></p><p><a href="https://leetcode.cn/problems/3sum/description/">三数之和</a></p><p><a href="https://leetcode.cn/problems/4sum/description/">四数之和</a></p><h1 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h1><h2 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h2><h2 id="leetcode题目链接-3"><a href="#leetcode题目链接-3" class="headerlink" title="leetcode题目链接"></a>leetcode题目链接</h2><p><a href=""></a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio工程实践开发(C++)</title>
      <link href="/posts/7b14e812.html"/>
      <url>/posts/7b14e812.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Visual-Studio介绍"><a href="#Visual-Studio介绍" class="headerlink" title="Visual Studio介绍"></a>Visual Studio介绍</h1><h2 id="工具介绍篇"><a href="#工具介绍篇" class="headerlink" title="工具介绍篇"></a>工具介绍篇</h2><h3 id="Visual-Studio-VS-Codeblocks-VS-Visual-Studio-Code"><a href="#Visual-Studio-VS-Codeblocks-VS-Visual-Studio-Code" class="headerlink" title="Visual Studio VS Codeblocks VS Visual Studio Code"></a>Visual Studio VS Codeblocks VS Visual Studio Code</h3><h3 id="Visual-Studio-C-简单工程演示"><a href="#Visual-Studio-C-简单工程演示" class="headerlink" title="Visual Studio C++简单工程演示"></a>Visual Studio C++简单工程演示</h3><h2 id="工具使用篇"><a href="#工具使用篇" class="headerlink" title="工具使用篇"></a>工具使用篇</h2><h3 id="应用程序工程"><a href="#应用程序工程" class="headerlink" title="应用程序工程"></a>应用程序工程</h3><h3 id="lib静态库工程"><a href="#lib静态库工程" class="headerlink" title="lib静态库工程"></a>lib静态库工程</h3><h3 id="dll动态库工程"><a href="#dll动态库工程" class="headerlink" title="dll动态库工程"></a>dll动态库工程</h3><h3 id="Linux跨平台工程"><a href="#Linux跨平台工程" class="headerlink" title="Linux跨平台工程"></a>Linux跨平台工程</h3><h3 id="编译排错篇"><a href="#编译排错篇" class="headerlink" title="编译排错篇"></a>编译排错篇</h3><h3 id="工程选项修改"><a href="#工程选项修改" class="headerlink" title="工程选项修改"></a>工程选项修改</h3><h2 id="工程组织篇"><a href="#工程组织篇" class="headerlink" title="工程组织篇"></a>工程组织篇</h2><h3 id="手动多工程组织"><a href="#手动多工程组织" class="headerlink" title="手动多工程组织"></a>手动多工程组织</h3><h3 id="cmake工程组织"><a href="#cmake工程组织" class="headerlink" title="cmake工程组织"></a>cmake工程组织</h3><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><h2 id="代码调试篇"><a href="#代码调试篇" class="headerlink" title="代码调试篇"></a>代码调试篇</h2><h3 id="常用调试手段"><a href="#常用调试手段" class="headerlink" title="常用调试手段"></a>常用调试手段</h3><h3 id="断点篇"><a href="#断点篇" class="headerlink" title="断点篇"></a>断点篇</h3><h3 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h3><h3 id="性能内存监视"><a href="#性能内存监视" class="headerlink" title="性能内存监视"></a>性能内存监视</h3><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><p><strong>学习和参考的资料来源</strong>：</p><p>  <a href="https://www.bilibili.com/video/BV1S541137P2/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=1c8b0af391894cdb44e3942161a1de4f">Visual Studio工程实践开发(C++)</a></p><p>  <a href="https://www.bilibili.com/video/BV1Xt411g7jT/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=1c8b0af391894cdb44e3942161a1de4f">vs2022(Visual Studio 2022)权威指南&amp;&amp;C语言&amp;&amp;软件工程开发的方向&amp;&amp;技巧要领</a></p></li><li><p>Tanks-1992版权声明：源代码来源为：<a href="https://github.com/krystiankaluzny/Tanks">Tanks</a></p></li><li><p>SDL 官网</p><p>[Simple DirectMedia Layer - SDL version 2.0.14 (stable)] <a href="http://www.libsdl.org/download-2.0.php">http://www.libsdl.org/download-2.0.php</a></p><p>下载：[SDL2-devel-2.0.14-VC.zip]</p></li><li><p>SDL TTF 2.0</p><p><a href="http://www.libsdl.org/projects/SDL_ttf/">http://www.libsdl.org/projects/SDL_ttf/</a></p><p> <a href="http://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-2.0.15-VC.zip">SDL2_ttf-devel-2.0.15-VC.zip</a> (Visual C++ 32&#x2F;64-bit)</p></li><li><p>SDL Image</p><p><a href="http://www.libsdl.org/projects//SDL_image/">http://www.libsdl.org/projects//SDL_image/</a></p><p> <a href="http://www.libsdl.org/projects//SDL_image/release/SDL2_image-devel-2.0.5-VC.zip">SDL2_image-devel-2.0.5-VC.zip</a> (Visual C++ 32&#x2F;64-bit)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Visual Studio </category>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 环境 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机房预约系统-学习记录</title>
      <link href="/posts/acfe04e1.html"/>
      <url>/posts/acfe04e1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="机房预约系统需求分析"><a href="#机房预约系统需求分析" class="headerlink" title="机房预约系统需求分析"></a>机房预约系统需求分析</h1><h2 id="系统简介"><a href="#系统简介" class="headerlink" title="系统简介"></a>系统简介</h2><p>学校现有几个规格不同的机房，由于使用时经常出现”撞车”现象,现开发一套机房预约系统，解决这一问题。</p><h2 id="身份简介"><a href="#身份简介" class="headerlink" title="身份简介"></a>身份简介</h2><p>分别有三种身份使用该程序</p><ul><li><strong>学生代表</strong>：申请使用机房</li><li><strong>教师</strong>：审核学生的预约申请</li><li><strong>管理员</strong>：给学生、教师创建账号</li></ul><h2 id="机房简介"><a href="#机房简介" class="headerlink" title="机房简介"></a>机房简介</h2><p>机房总共有3间</p><ul><li>1号机房   — 最大容量20人</li><li>2号机房   — 最多容量50人</li><li>3号机房   — 最多容量100人</li></ul><h2 id="申请简介"><a href="#申请简介" class="headerlink" title="申请简介"></a>申请简介</h2><ul><li>申请的订单每周由管理员负责清空。</li><li>学生可以预约未来一周内的机房使用，预约的日期为周一至周五，预约时需要选择预约时段（上午、下午）</li><li>教师来审核预约，依据实际情况审核预约通过或者不通过</li></ul><h2 id="系统具体需求"><a href="#系统具体需求" class="headerlink" title="系统具体需求"></a>系统具体需求</h2><ul><li>首先进入登录界面，可选登录身份有：<ul><li>学生代表</li><li>老师</li><li>管理员</li><li>退出</li></ul></li><li>每个身份都需要进行验证后，进入子菜单<ul><li>学生需要输入 ：学号、姓名、登录密码</li><li>老师需要输入：职工号、姓名、登录密码</li><li>管理员需要输入：管理员姓名、登录密码</li></ul></li><li>学生具体功能<ul><li>申请预约    —   预约机房</li><li>查看自身的预约    —  查看自己的预约状态</li><li>查看所有预约   —   查看全部预约信息以及预约状态</li><li>取消预约    —   取消自身的预约，预约成功或审核中的预约均可取消</li><li>注销登录    —   退出登录</li></ul></li><li>教师具体功能<ul><li>查看所有预约   —   查看全部预约信息以及预约状态</li><li>审核预约    —   对学生的预约进行审核</li><li>注销登录    —   退出登录</li></ul></li><li>管理员具体功能<ul><li>添加账号    —   添加学生或教师的账号，需要检测学生编号或教师职工号是否重复</li><li>查看账号    —   可以选择查看学生或教师的全部信息</li><li>查看机房    —   查看所有机房的信息</li><li>清空预约    —   清空所有预约记录</li><li>注销登录    —   退出登录</li></ul></li></ul><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p><img src="/posts/acfe04e1/1.png"></p><h1 id="创建主菜单-搭建接口-退出功能实现"><a href="#创建主菜单-搭建接口-退出功能实现" class="headerlink" title="创建主菜单&amp;&amp;搭建接口&amp;&amp;退出功能实现"></a>创建主菜单&amp;&amp;搭建接口&amp;&amp;退出功能实现</h1><p>在主函数main中添加菜单提示</p><p>接受用户的选择，搭建接口</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;======================  欢迎来到传智播客机房预约系统  =====================&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;请输入您的身份&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t -------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          1.学生代表           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          2.老    师           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          3.管 理 员           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          0.退    出           |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                               |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t -------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入您的选择: &quot;</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; select; <span class="comment">//接受用户选择</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (select) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//学生身份</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">//老师身份</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">//管理员身份</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">//退出系统</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">             cout &lt;&lt; <span class="string">&quot;输入有误，请重新选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/acfe04e1/2.png"></p><h1 id="创建身份类"><a href="#创建身份类" class="headerlink" title="创建身份类"></a>创建身份类</h1><h2 id="身份的基类"><a href="#身份的基类" class="headerlink" title="身份的基类"></a>身份的基类</h2><p>在整个系统中，有三种身份，分别为：学生代表、老师以及管理员</p><p>三种身份有其共性也有其特性，因此我们可以将三种身份抽象出一个身份基类 Identity</p><p>在头文件下创建Identity.h文件</p><p>Identity.h中添加如下代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//身份抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Identity</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">string m_Name; <span class="comment">//用户名</span></span><br><span class="line">string m_Pwd;  <span class="comment">//密码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="学生类"><a href="#学生类" class="headerlink" title="学生类"></a>学生类</h2><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ul><li><p>学生类主要功能是可以通过类中成员函数，实现预约实验室操作</p></li><li><p>学生类中主要功能有：</p><ul><li>显示学生操作的菜单界面</li><li>申请预约</li><li>查看自身预约</li><li>查看所有预约</li><li>取消预约</li></ul><p>​</p></li></ul><h3 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h3><ul><li>在头文件以及源文件下创建 student.h 和 student.cpp文件</li></ul><p>student.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> :<span class="keyword">public</span> Identity &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造(学号、姓名、密码)</span></span><br><span class="line"><span class="built_in">Student</span>(<span class="type">int</span> id, string name, string pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">applyOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//查看我的预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showMyOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showAllOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cancelOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生学号</span></span><br><span class="line"><span class="type">int</span> m_Id;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>student.cpp中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Student::<span class="built_in">Student</span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造(学号、姓名、密码)</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="type">int</span> id, string name, string pwd) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::applyOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看我的预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::showMyOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::showAllOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::cancelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="老师类"><a href="#老师类" class="headerlink" title="老师类"></a>老师类</h2><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><ul><li><p>教师类主要功能是查看学生的预约，并进行审核</p></li><li><p>教师类中主要功能有：</p><ul><li><p>显示教师操作的菜单界面</p></li><li><p>查看所有预约</p></li><li><p>审核预约</p><p>​</p></li></ul></li></ul><h3 id="类的创建-1"><a href="#类的创建-1" class="headerlink" title="类的创建"></a>类的创建</h3><ul><li>在头文件以及源文件下创建 teacher.h 和 teacher.cpp文件</li></ul><p>teacher.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> :<span class="keyword">public</span> Identity &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">Teacher</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 (职工编号，姓名，密码)</span></span><br><span class="line"><span class="built_in">Teacher</span>(<span class="type">int</span> empId, string name, string pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showAllOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">validOrder</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_EmpId; <span class="comment">//教师编号</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>teacher.cpp中添加如下代码:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 (职工编号，姓名，密码)</span></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(<span class="type">int</span> empId, string name, string pwd) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::showAllOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::validOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管理员类"><a href="#管理员类" class="headerlink" title="管理员类"></a>管理员类</h2><h3 id="功能分析-2"><a href="#功能分析-2" class="headerlink" title="功能分析"></a>功能分析</h3><ul><li><p>管理员类主要功能是对学生和老师账户进行管理，查看机房信息以及清空预约记录</p></li><li><p>管理员类中主要功能有：</p><ul><li><p>显示管理员操作的菜单界面</p></li><li><p>添加账号</p></li><li><p>查看账号</p></li><li><p>查看机房信息</p></li><li><p>清空预约记录</p><p>​</p></li></ul></li></ul><h3 id="类的创建-2"><a href="#类的创建-2" class="headerlink" title="类的创建"></a>类的创建</h3><ul><li>在头文件以及源文件下创建 manager.h 和 manager.cpp文件</li></ul><p>manager.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> :<span class="keyword">public</span> Identity &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">Manager</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造  管理员姓名，密码</span></span><br><span class="line"><span class="built_in">Manager</span>(string name, string pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择菜单</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showComputer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cleanFile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>manager.cpp中添加如下代码:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;manager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>(string name, string pwd) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::addPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::cleanFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/acfe04e1/3.png"></p><h1 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h1><h2 id="全局文件添加"><a href="#全局文件添加" class="headerlink" title="全局文件添加"></a>全局文件添加</h2><p>功能描述：</p><ul><li>不同的身份可能会用到不同的文件操作，我们可以将所有的文件名定义到一个全局的文件中</li><li>在头文件中添加 <strong>globalFile.h</strong> 文件</li><li>并添加如下代码：</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADMIN_FILE     <span class="string">&quot;admin.txt&quot;</span></span></span><br><span class="line"><span class="comment">//学生文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_FILE   <span class="string">&quot;student.txt&quot;</span></span></span><br><span class="line"><span class="comment">//教师文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_FILE   <span class="string">&quot;teacher.txt&quot;</span></span></span><br><span class="line"><span class="comment">//机房信息文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COMPUTER_FILE  <span class="string">&quot;computerRoom.txt&quot;</span></span></span><br><span class="line"><span class="comment">//订单文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORDER_FILE     <span class="string">&quot;order.txt&quot;</span></span></span><br></pre></td></tr></table></figure><p>并且在同级目录下，创建这几个文件</p><p><img src="/posts/acfe04e1/4.png"></p><h2 id="登录函数封装"><a href="#登录函数封装" class="headerlink" title="登录函数封装"></a>登录函数封装</h2><p>功能描述：</p><ul><li>根据用户的选择，进入不同的身份登录</li></ul><p>在 预约系统的.cpp 文件中添加全局函数 <code>void LoginIn(string fileName, int type)</code></p><p>参数：</p><ul><li>fileName  — 操作的文件名</li><li>type      —  登录的身份  （1代表学生、2代表老师、3代表管理员）</li></ul><p>LoginIn中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;globalFile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LoginIn</span><span class="params">(string fileName, <span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Identity * person = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(fileName, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件不存在情况</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备接受用户信息</span></span><br><span class="line">    <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">string name;</span><br><span class="line">string pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生登录</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入你的学号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//教师登录</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入你的职工号&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入用户名：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入密码： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//学生登录验证</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//教师登录验证</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">//管理员登录验证</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;验证登录失败!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main函数的不同分支中，填入不同的登录接口</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//学生身份</span></span><br><span class="line"><span class="built_in">LoginIn</span>(STUDENT_FILE, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">//老师身份</span></span><br><span class="line"><span class="built_in">LoginIn</span>(TEACHER_FILE, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">//管理员身份</span></span><br><span class="line"><span class="built_in">LoginIn</span>(ADMIN_FILE, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">//退出系统</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学生登录实现"><a href="#学生登录实现" class="headerlink" title="学生登录实现"></a>学生登录实现</h2><p>在student.txt文件中添加两条学生信息，用于测试</p><p>添加信息:   </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 张三 <span class="number">123</span></span><br><span class="line"><span class="number">2</span> 李四 <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>第一列  代表  <strong>学号</strong></li><li>第二列  代表  <strong>学生姓名</strong></li><li>第三列  代表  <strong>密码</strong></li></ul><p>在Login函数的学生分支中加入如下代码，验证学生身份</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生登录验证</span></span><br><span class="line"><span class="type">int</span> fId;</span><br><span class="line">string fName;</span><br><span class="line">string fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (id == fId &amp;&amp; name == fName &amp;&amp; pwd == fPwd)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;学生验证登录成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">person = <span class="keyword">new</span> <span class="built_in">Student</span>(id, name, pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入学生身份的子菜单</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/acfe04e1/5.png"></p><h2 id="教师登录实现"><a href="#教师登录实现" class="headerlink" title="教师登录实现"></a>教师登录实现</h2><p>在teacher.txt文件中添加一条老师信息，用于测试</p><p>添加信息:   </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 老王 <span class="number">123</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>第一列  代表  <strong>教师职工编号</strong></li><li>第二列  代表  <strong>教师姓名</strong></li><li>第三列  代表  <strong>密码</strong></li></ul><p>在Login函数的教师分支中加入如下代码，验证教师身份</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//教师登录验证</span></span><br><span class="line"><span class="type">int</span> fId;</span><br><span class="line">string fName;</span><br><span class="line">string fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (id == fId &amp;&amp; name == fName &amp;&amp; pwd == fPwd)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;教师验证登录成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">person = <span class="keyword">new</span> <span class="built_in">Teacher</span>(id, name, pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入老师身份的子菜单</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/acfe04e1/6.png"></p><h2 id="管理员登录实现"><a href="#管理员登录实现" class="headerlink" title="管理员登录实现"></a>管理员登录实现</h2><p>在admin.txt文件中添加一条管理员信息</p><p>添加信息:   </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">admin <span class="number">123</span></span><br></pre></td></tr></table></figure><p>其中：<code>admin</code>代表管理员用户名，<code>123</code>代表管理员密码</p><p>在Login函数的管理员分支中加入如下代码，验证管理员身份</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//管理员登录验证</span></span><br><span class="line">string fName;</span><br><span class="line">string fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (name == fName &amp;&amp; pwd == fPwd)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;验证登录成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//登录成功后，按任意键进入管理员界面</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="comment">//创建管理员对象</span></span><br><span class="line">person = <span class="keyword">new</span> <span class="built_in">Manager</span>(name, pwd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入管理员身份的子页面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/acfe04e1/7.png"></p><h1 id="管理员模块"><a href="#管理员模块" class="headerlink" title="管理员模块"></a>管理员模块</h1><h2 id="管理员登录和注销"><a href="#管理员登录和注销" class="headerlink" title="管理员登录和注销"></a>管理员登录和注销</h2><p>在Manager类的构造函数中，初始化管理员信息，代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>(string name, string pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="管理员子菜单"><a href="#管理员子菜单" class="headerlink" title="管理员子菜单"></a>管理员子菜单</h3><ul><li>在机房预约系统.cpp中，当用户登录的是管理员，添加管理员菜单接口</li><li>将不同的分支提供出来<ul><li>添加账号</li><li>查看账号</li><li>查看机房</li><li>清空预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void managerMenu(Identity * &amp;manager)</code>，代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//管理员菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">managerMenu</span><span class="params">(Identity*&amp; manager)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//调用管理员菜单</span></span><br><span class="line">manager-&gt;<span class="built_in">operMenu</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将父类指针转为子类指针，调用子类里其他接口</span></span><br><span class="line">Manager* man = (Manager*)manager;</span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受用户选择</span></span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号</span></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加账号&quot;</span> &lt;&lt; endl;</span><br><span class="line">man-&gt;<span class="built_in">addPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查看账号&quot;</span> &lt;&lt; endl;</span><br><span class="line">man-&gt;<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看机房</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">3</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查看机房&quot;</span> &lt;&lt; endl;</span><br><span class="line">man-&gt;<span class="built_in">showComputer</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空预约</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">4</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空预约&quot;</span> &lt;&lt; endl;</span><br><span class="line">man-&gt;<span class="built_in">cleanFile</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">delete</span> manager; <span class="comment">//销毁掉堆区对象</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;注销成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菜单功能实现"><a href="#菜单功能实现" class="headerlink" title="菜单功能实现"></a>菜单功能实现</h3><ul><li>在实现成员函数<code>void Manager::operMenu()</code> 代码如下：</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎管理员：&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;登录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ---------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          1.添加账号            |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          2.查看账号            |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          3.查看机房            |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          4.清空预约            |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          0.注销登录            |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ---------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择您的操作： &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口对接"><a href="#接口对接" class="headerlink" title="接口对接"></a>接口对接</h3><ul><li>管理员成功登录后，调用管理员子菜单界面</li><li>在管理员登录验证分支中，添加代码：</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入管理员子菜单</span></span><br><span class="line"><span class="built_in">managerMenu</span>(person);</span><br></pre></td></tr></table></figure><h2 id="添加账号"><a href="#添加账号" class="headerlink" title="添加账号"></a>添加账号</h2><p>功能描述：</p><ul><li>给学生或教师添加新的账号</li></ul><p>功能要求：</p><ul><li>添加时学生学号不能重复、教师职工号不能重复</li></ul><h3 id="添加功能实现"><a href="#添加功能实现" class="headerlink" title="添加功能实现"></a>添加功能实现</h3><p>在Manager的<strong>addPerson</strong>成员函数中，实现添加新账号功能，代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加账号  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::addPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入添加账号的类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、添加学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、添加老师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string fileName; <span class="comment">//操作文件名</span></span><br><span class="line">string tip; <span class="comment">//提示id</span></span><br><span class="line">ofstream ofs; <span class="comment">//文件操作对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select; <span class="comment">//接受用户的选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">fileName = STUDENT_FILE; <span class="comment">//添加的是学生</span></span><br><span class="line">tip = <span class="string">&quot;请输入学号： &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fileName = TEACHER_FILE; <span class="comment">//添加的是老师</span></span><br><span class="line">tip = <span class="string">&quot;请输入职工编号：&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用追加的方式，写文件</span></span><br><span class="line">ofs.<span class="built_in">open</span>(fileName, ios::out | ios::app);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id; <span class="comment">//学号 职工号</span></span><br><span class="line">string name; <span class="comment">//姓名</span></span><br><span class="line">string pwd; <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; tip &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入姓名： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入密码： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向文件中添加数据</span></span><br><span class="line">ofs &lt;&lt; id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pwd &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去重操作"><a href="#去重操作" class="headerlink" title="去重操作"></a>去重操作</h2><p>功能描述：添加新账号时，如果是重复的学生编号，或是重复的教师职工编号，提示有误</p><h3 id="读取信息"><a href="#读取信息" class="headerlink" title="读取信息"></a>读取信息</h3><p>要去除重复的账号，首先要先将学生和教师的账号信息获取到程序中，方可检测</p><p>在manager.h中，添加两个容器，用于存放学生和教师的信息</p><p>添加一个新的成员函数  <code>void initVector()</code> 初始化容器</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initVector</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生容器</span></span><br><span class="line">vector&lt;Student&gt; vStu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师容器</span></span><br><span class="line">vector&lt;Teacher&gt; vTea;</span><br></pre></td></tr></table></figure><p>在manager.cpp中，实现成员函数<code>void initVector()</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::initVector</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//清空容器</span></span><br><span class="line">vStu.<span class="built_in">clear</span>();</span><br><span class="line">vTea.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取学生文件中信息</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(STUDENT_FILE, ios::in);</span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件读取失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student s;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; s.m_Id &amp;&amp; ifs &gt;&gt; s.m_Name &amp;&amp; ifs &gt;&gt; s.m_Pwd) &#123;</span><br><span class="line">vStu.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前学生数量为： &quot;</span> &lt;&lt; vStu.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">ifs.<span class="built_in">close</span>(); <span class="comment">//学生初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取老师文件信息</span></span><br><span class="line">ifs.<span class="built_in">open</span>(TEACHER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件读取失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher t;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; t.m_EmpId &amp;&amp; ifs &gt;&gt; t.m_Name &amp;&amp; ifs &gt;&gt; t.m_Pwd) &#123;</span><br><span class="line">vTea.<span class="built_in">push_back</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前教师数量为： &quot;</span> &lt;&lt; vTea.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在有参构造函数中，调用初始化容器函数</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>(string name, string pwd) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initVector</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="去重函数封装"><a href="#去重函数封装" class="headerlink" title="去重函数封装"></a>去重函数封装</h3><p>在manager.h文件中添加成员函数<code> bool checkRepeat(int id, int type);</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检测重复 参数:(传入id，传入类型) 返回值：(true 代表有重复，false代表没有重复)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkRepeat</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> type)</span></span>;</span><br></pre></td></tr></table></figure><p>在manager.cpp文件中实现成员函数  <code> bool checkRepeat(int id, int type);</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检测重复 参数:(传入id，传入类型) 返回值：(true 代表有重复，false代表没有重复)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Manager::checkRepeat</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;Student&gt;::iterator it = vStu.<span class="built_in">begin</span>(); it != vStu.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line"><span class="keyword">if</span> (id == it-&gt;m_Id) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;Teacher&gt;::iterator it = vTea.<span class="built_in">begin</span>(); it != vTea.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line"><span class="keyword">if</span> (id == it-&gt;m_EmpId) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加去重操作"><a href="#添加去重操作" class="headerlink" title="添加去重操作"></a>添加去重操作</h3><p>在添加学生编号或者教师职工号时，检测是否有重复</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加账号  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::addPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入添加账号的类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、添加学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、添加老师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string fileName; <span class="comment">//操作文件名</span></span><br><span class="line">string tip; <span class="comment">//提示id</span></span><br><span class="line">ofstream ofs; <span class="comment">//文件操作对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select; <span class="comment">//接受用户的选项</span></span><br><span class="line"></span><br><span class="line">string errorTip; <span class="comment">//重复错误提示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">fileName = STUDENT_FILE; <span class="comment">//添加的是学生</span></span><br><span class="line">tip = <span class="string">&quot;请输入学号： &quot;</span>;</span><br><span class="line">errorTip = <span class="string">&quot;学号重复，请重新输入&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">fileName = TEACHER_FILE; <span class="comment">//添加的是老师</span></span><br><span class="line">tip = <span class="string">&quot;请输入职工编号：&quot;</span>;</span><br><span class="line">errorTip = <span class="string">&quot;职工号重复，请重新输入&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用追加的方式，写文件</span></span><br><span class="line">ofs.<span class="built_in">open</span>(fileName, ios::out | ios::app);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id; <span class="comment">//学号 职工号</span></span><br><span class="line">string name; <span class="comment">//姓名</span></span><br><span class="line">string pwd; <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; tip &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> ret = <span class="keyword">this</span>-&gt;<span class="built_in">checkRepeat</span>(id, select);</span><br><span class="line"></span><br><span class="line"><span class="comment">//真 有重复</span></span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">cout &lt;&lt; errorTip &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入姓名： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入密码： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向文件中添加数据</span></span><br><span class="line">ofs &lt;&lt; id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pwd &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">////调用初始化容器接口，重新获取文件中的数据</span></span><br><span class="line"><span class="comment">//this-&gt;initVector();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">Student ss;</span><br><span class="line">ss.m_Id = id;</span><br><span class="line">ss.m_Name = name;</span><br><span class="line">ss.m_Pwd = pwd;</span><br><span class="line">vStu.<span class="built_in">push_back</span>(ss);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Teacher tt;</span><br><span class="line">tt.m_EmpId = id;</span><br><span class="line">tt.m_Name = name;</span><br><span class="line">tt.m_Pwd = pwd;</span><br><span class="line">vTea.<span class="built_in">push_back</span>(tt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试<br><img src="/posts/acfe04e1/8.png"></p><h2 id="显示账号"><a href="#显示账号" class="headerlink" title="显示账号"></a>显示账号</h2><p>功能描述：显示学生信息或教师信息</p><h3 id="显示功能实现"><a href="#显示功能实现" class="headerlink" title="显示功能实现"></a>显示功能实现</h3><p>在Manager的<strong>showPerson</strong>成员函数中，实现显示账号功能，代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">(Student&amp; s)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;学号： &quot;</span> &lt;&lt; s.m_Id &lt;&lt; <span class="string">&quot;\t姓名： &quot;</span> &lt;&lt; s.m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; s.m_Pwd &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printTeacher</span><span class="params">(Teacher&amp; t)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;职工号： &quot;</span> &lt;&lt; t.m_EmpId &lt;&lt; <span class="string">&quot;\t姓名： &quot;</span> &lt;&lt; t.m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; t.m_Pwd &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择查看内容：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、查看所有学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、查看所有老师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>; <span class="comment">//接受用户选择</span></span><br><span class="line"></span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有学生信息如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">for_each(vStu.<span class="built_in">begin</span>(), vStu.<span class="built_in">end</span>(), printStudent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有老师信息如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">for_each(vTea.<span class="built_in">begin</span>(), vTea.<span class="built_in">end</span>(), printTeacher);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试<br><img src="/posts/acfe04e1/9.png"></p><h2 id="查看机房"><a href="#查看机房" class="headerlink" title="查看机房"></a>查看机房</h2><h3 id="添加机房信息"><a href="#添加机房信息" class="headerlink" title="添加机房信息"></a>添加机房信息</h3><p>案例需求中，机房一共有三个，其中1号机房容量20台机器，2号50台，3号100台</p><p>我们可以将信息录入到computerRoom.txt中</p><p><img src="/posts/acfe04e1/10.png"></p><h3 id="机房类创建"><a href="#机房类创建" class="headerlink" title="机房类创建"></a>机房类创建</h3><p>在头文件下，创建新的文件computerRoom.h</p><p>并添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//机房类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerRoom</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_ComId; <span class="comment">//机房id号</span></span><br><span class="line"><span class="type">int</span> m_MaxNum; <span class="comment">//机房最大容量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="初始化机房信息"><a href="#初始化机房信息" class="headerlink" title="初始化机房信息"></a>初始化机房信息</h3><p>在Manager管理员类下，添加机房的容器，用于保存机房信息</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//机房容器</span></span><br><span class="line">vector&lt;ComputerRoom&gt; vCom;</span><br></pre></td></tr></table></figure><p>在Manager有参构造函数中，追加代码，初始化机房信息</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取机房信息</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">open</span>(COMPUTER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line">ComputerRoom com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; com.m_ComId &amp;&amp; ifs &gt;&gt; com.m_MaxNum) &#123;</span><br><span class="line">vCom.<span class="built_in">push_back</span>(com);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前机房数量为： &quot;</span> &lt;&lt; vCom.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><h3 id="显示机房信息"><a href="#显示机房信息" class="headerlink" title="显示机房信息"></a>显示机房信息</h3><p>在Manager类的showComputer成员函数中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;机房信息如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;ComputerRoom&gt;::iterator it = vCom.<span class="built_in">begin</span>(); it != vCom.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;机房编号： &quot;</span> &lt;&lt; it-&gt;m_ComId &lt;&lt; <span class="string">&quot; 机房最大容量： &quot;</span> &lt;&lt; it-&gt;m_MaxNum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/acfe04e1/11.png"></p><h2 id="清空预约"><a href="#清空预约" class="headerlink" title="清空预约"></a>清空预约</h2><p>功能描述：</p><p>清空生成的<code>order.txt</code>预约文件</p><h3 id="清空功能实现"><a href="#清空功能实现" class="headerlink" title="清空功能实现"></a>清空功能实现</h3><p>在Manager的cleanFile成员函数中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::cleanFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(ORDER_FILE, ios::trunc)</span></span>;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="学生模块"><a href="#学生模块" class="headerlink" title="学生模块"></a>学生模块</h1><h2 id="学生登录和注销"><a href="#学生登录和注销" class="headerlink" title="学生登录和注销"></a>学生登录和注销</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>在Student类的构造函数中，初始化学生信息</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有参构造(学号、姓名、密码)</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="type">int</span> id, string name, string pwd) &#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="管理员子菜单-1"><a href="#管理员子菜单-1" class="headerlink" title="管理员子菜单"></a>管理员子菜单</h3><ul><li>在机房预约系统.cpp中，当用户登录的是学生，添加学生菜单接口</li><li>将不同的分支提供出来<ul><li>申请预约</li><li>查看我的预约</li><li>查看所有预约</li><li>取消预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void studentMenu(Identity * &amp;manager)</code> 代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">studentMenu</span><span class="params">(Identity* &amp;student)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//学生菜单</span></span><br><span class="line">student-&gt;<span class="built_in">operMenu</span>();</span><br><span class="line"></span><br><span class="line">Student* stu = (Student*)student;</span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line">stu-&gt;<span class="built_in">applyOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看自身预约</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>) &#123;</span><br><span class="line">stu-&gt;<span class="built_in">showMyOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">3</span>) &#123;</span><br><span class="line">stu-&gt;<span class="built_in">showAllOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">4</span>) &#123;</span><br><span class="line">stu-&gt;<span class="built_in">cancelOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">delete</span> student;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;注销成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菜单功能实现-1"><a href="#菜单功能实现-1" class="headerlink" title="菜单功能实现"></a>菜单功能实现</h3><ul><li>在实现成员函数<code>void Student::operMenu()</code> 代码如下：</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎学生代表：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;登录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ----------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          1.申请预约              |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          2.查看我的预约          |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          3.查看所有预约          |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          4.取消预约              |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          0.注销登录              |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                 |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ----------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择您的操作： &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口对接-1"><a href="#接口对接-1" class="headerlink" title="接口对接"></a>接口对接</h3><p>学生成功登录后，调用学生的子菜单界面</p><p>在学生登录分支中，添加代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入学生子菜单</span></span><br><span class="line"><span class="built_in">studentMenu</span>(person);</span><br></pre></td></tr></table></figure><h2 id="申请预约"><a href="#申请预约" class="headerlink" title="申请预约"></a>申请预约</h2><h3 id="获取机房信息"><a href="#获取机房信息" class="headerlink" title="获取机房信息"></a>获取机房信息</h3><p>在申请预约时，学生可以看到机房的信息，因此我们需要让学生获取到机房的信息</p><p>在student.h中添加新的成员函数如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//机房容器</span></span><br><span class="line">vector&lt;ComputerRoom&gt; vCom;</span><br></pre></td></tr></table></figure><p>在学生的有参构造函数中追加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取机房信息</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(COMPUTER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line">ComputerRoom c;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; c.m_ComId &amp;&amp; ifs &gt;&gt; c.m_MaxNum) &#123;</span><br><span class="line">vCom.<span class="built_in">push_back</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><p>至此，vCom容器中保存了所有机房的信息</p><h3 id="预约功能实现"><a href="#预约功能实现" class="headerlink" title="预约功能实现"></a>预约功能实现</h3><p>在student.cpp中实现成员函数 <code>void Student::applyOrder()</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::applyOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;机房开放时间为周一至周五！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入申请预约的时间：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、周一&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、周二&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3、周三&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4、周四&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;5、周五&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> date = <span class="number">0</span>;<span class="comment">//日期</span></span><br><span class="line"><span class="type">int</span> interval = <span class="number">0</span>;<span class="comment">//时间段</span></span><br><span class="line"><span class="type">int</span> room = <span class="number">0</span>;<span class="comment">//房间号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; date;</span><br><span class="line"><span class="keyword">if</span> (date &gt;= <span class="number">1</span> &amp;&amp; date &lt;= <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入申请预约的时间段：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、上午&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、下午&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; interval;</span><br><span class="line"><span class="keyword">if</span> (interval &gt;= <span class="number">1</span> &amp;&amp; interval &lt;= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择机房：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1号机房容量：&quot;</span> &lt;&lt; vCom[<span class="number">0</span>].m_MaxNum &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2号机房容量：&quot;</span> &lt;&lt; vCom[<span class="number">1</span>].m_MaxNum &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3号机房容量：&quot;</span> &lt;&lt; vCom[<span class="number">2</span>].m_MaxNum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; room;</span><br><span class="line"><span class="keyword">if</span> (room &gt;= <span class="number">1</span> &amp;&amp; room &lt;= <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约成功！审核中ing&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(ORDER_FILE, ios::app)</span></span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; date &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; interval &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; room &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/acfe04e1/12.png"></p><h2 id="显示预约"><a href="#显示预约" class="headerlink" title="显示预约"></a>显示预约</h2><h3 id="创建预约类"><a href="#创建预约类" class="headerlink" title="创建预约类"></a>创建预约类</h3><p>功能描述：</p><p>显示预约记录时，需要从文件中获取到所有记录，用来显示，创建预约的类来管理记录以及更新</p><p>在头文件以及源文件下分别创建<strong>orderFile.h</strong> 和 <strong>orderFile.cpp</strong>文件</p><p>orderFile.h中添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderFile</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">OrderFile</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updateOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录的容器  key --- 记录的条数  value --- 具体记录的键值对信息</span></span><br><span class="line">map&lt;<span class="type">int</span>, map&lt;string, string&gt;&gt; m_orderData;</span><br><span class="line"></span><br><span class="line"><span class="comment">//预约记录条数</span></span><br><span class="line"><span class="type">int</span> m_Size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>构造函数</strong>中获取所有信息，并存放在容器中，添加如下代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">OrderFile::<span class="built_in">OrderFile</span>() &#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(ORDER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line">string date;      <span class="comment">//日期</span></span><br><span class="line">string interval;  <span class="comment">//时间段</span></span><br><span class="line">string stuId;     <span class="comment">//学生编号</span></span><br><span class="line">string stuName;   <span class="comment">//学生姓名</span></span><br><span class="line">string roomId;    <span class="comment">//机房编号</span></span><br><span class="line">string status;    <span class="comment">//预约状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>; <span class="comment">//预约记录个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; date &amp;&amp; ifs &gt;&gt; interval &amp;&amp; ifs &gt;&gt; stuId &amp;&amp; ifs &gt;&gt; stuName &amp;&amp; ifs &gt;&gt; roomId &amp;&amp; ifs &gt;&gt; status) &#123;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cout &lt;&lt; date &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; interval &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; stuId &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; stuName &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; roomId &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; status &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">string key;</span><br><span class="line">string value;</span><br><span class="line">map&lt;string, string&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos = date.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = date.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = date.<span class="built_in">substr</span>(pos + <span class="number">1</span>, date.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = interval.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = interval.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = interval.<span class="built_in">substr</span>(pos + <span class="number">1</span>, interval.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = stuId.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = stuId.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = stuId.<span class="built_in">substr</span>(pos + <span class="number">1</span>, stuId.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = stuName.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = stuName.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = stuName.<span class="built_in">substr</span>(pos + <span class="number">1</span>, stuName.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = roomId.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = roomId.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = roomId.<span class="built_in">substr</span>(pos + <span class="number">1</span>, roomId.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = status.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">key = status.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">value = status.<span class="built_in">substr</span>(pos + <span class="number">1</span>, status.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将小map容器放入到大的map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_orderData.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="keyword">this</span>-&gt;m_Size, m));</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="comment">//for (map&lt;int, map&lt;string, string&gt;&gt;::iterator it = m_orderData.begin(); it != m_orderData.end();it++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;key = &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; value = &quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//for (map&lt;string, string&gt;::iterator mit = it-&gt;second.begin(); mit != it-&gt;second.end(); mit++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; mit-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; mit-&gt;second &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新预约记录的成员函数updateOrder代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OrderFile::updateOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//预约记录0条</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(ORDER_FILE, ios::out | ios::trunc)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_Size; i++) &#123;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;date&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;interval&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;status&quot;</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vscode只能用cmake？ 小白不建议用vscode</p><h3 id="显示自身预约"><a href="#显示自身预约" class="headerlink" title="显示自身预约"></a>显示自身预约</h3><p>首先添加几条预约记录</p><p>然后在Student类的<code>void Student::showMyOrder()</code>成员函数中，添加代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看我的预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::showMyOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++) &#123;</span><br><span class="line"><span class="comment">//string利用.c_str()转const char *       利用atoi(const char *)转int</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">atoi</span>(of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>].<span class="built_in">c_str</span>()) == <span class="keyword">this</span>-&gt;m_Id) &#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约日期： 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t时间段：&quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t机房号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">string status = <span class="string">&quot;状态： &quot;</span>;  <span class="comment">// 0 取消的预约   1 审核中   2 已预约 -1 预约失败</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核未通过，预约失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/acfe04e1/13.png"></p><h3 id="显示所有预约"><a href="#显示所有预约" class="headerlink" title="显示所有预约"></a>显示所有预约</h3><p>在Student类的<code>void Student::showAllOrder()</code>成员函数中，添加如下代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::showAllOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++) &#123;</span><br><span class="line">cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约日期： 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t时间段：&quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t学号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t机房号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line">string status = <span class="string">&quot;状态： &quot;</span>;  <span class="comment">// 0 取消的预约   1 审核中   2 已预约 -1 预约失败</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核未通过，预约失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取消预约"><a href="#取消预约" class="headerlink" title="取消预约"></a>取消预约</h2><p>在Student类的<code>void Student::cancelOrder()</code>成员函数中，添加代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::cancelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;审核中或预约成功的记录可以取消，请输入取消的记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;<span class="comment">//存放在最大容器中的下标编号</span></span><br><span class="line"><span class="type">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++) &#123;</span><br><span class="line"><span class="comment">//先判断学号</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">atoi</span>(of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>].<span class="built_in">c_str</span>()) == <span class="keyword">this</span>-&gt;m_Id) &#123;</span><br><span class="line"><span class="comment">//筛选状态 审核中或预约成功</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span> || of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">cout &lt;&lt; index++ &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约日期： 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t时间段：&quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t机房号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line">string status = <span class="string">&quot;状态： &quot;</span>;  <span class="comment">// 0 取消的预约   1 审核中   2 已预约  -1 预约失败</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入取消的记录,0代表返回&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select &gt;= <span class="number">0</span> &amp;&amp; select &lt;= v.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;记录所在位置： &quot; &lt;&lt; v[select - 1] &lt;&lt; endl;</span></span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">of.<span class="built_in">updateOrder</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;已取消预约&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><p><img src="/posts/acfe04e1/14.png"></p><h1 id="教师模块"><a href="#教师模块" class="headerlink" title="教师模块"></a>教师模块</h1><h2 id="教师登录和注销"><a href="#教师登录和注销" class="headerlink" title="教师登录和注销"></a>教师登录和注销</h2><h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h3><p>在Teacher类的构造函数中，初始化教师信息，代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有参构造 (职工编号，姓名，密码)</span></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(<span class="type">int</span> empId, string name, string pwd) &#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpId = empId;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="教师子菜单"><a href="#教师子菜单" class="headerlink" title="教师子菜单"></a>教师子菜单</h3><ul><li>在机房预约系统.cpp中，当用户登录的是教师，添加教师菜单接口</li><li>将不同的分支提供出来<ul><li>查看所有预约</li><li>审核预约</li><li>注销登录</li></ul></li><li>实现注销功能</li></ul><p>添加全局函数 <code>void TeacherMenu(Person * &amp;manager)</code> 代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//教师菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TeacherMenu</span><span class="params">(Identity* &amp;teacher)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//教师菜单界面</span></span><br><span class="line">teacher-&gt;<span class="built_in">operMenu</span>();</span><br><span class="line"></span><br><span class="line">Teacher* tea = (Teacher*)teacher;</span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line">tea-&gt;<span class="built_in">showAllOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line">tea-&gt;<span class="built_in">validOrder</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">delete</span> teacher;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;注销成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菜单功能实现-2"><a href="#菜单功能实现-2" class="headerlink" title="菜单功能实现"></a>菜单功能实现</h3><p>在实现成员函数<code>void Teacher::operMenu()</code> 代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//教师菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::operMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎教师：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;登录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ----------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                  |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          1.查看所有预约          |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                  |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          2.审核预约              |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                  |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|          0.注销登录              |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t|                                  |\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t\t ----------------------------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择您的操作： &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口对接-2"><a href="#接口对接-2" class="headerlink" title="接口对接"></a>接口对接</h3><p>教师成功登录后，调用教师的子菜单界面</p><p>在教师登录分支中，添加代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入教师子菜单</span></span><br><span class="line"><span class="built_in">TeacherMenu</span>(person);</span><br></pre></td></tr></table></figure><h2 id="查看所有预约"><a href="#查看所有预约" class="headerlink" title="查看所有预约"></a>查看所有预约</h2><h3 id="所有预约功能实现"><a href="#所有预约功能实现" class="headerlink" title="所有预约功能实现"></a>所有预约功能实现</h3><p>该功能与学生身份的查看所有预约功能相似，用于显示所有预约记录</p><p>在Teacher.cpp中实现成员函数 <code>void Teacher::showAllOrder()</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::showAllOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++) &#123;</span><br><span class="line">cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约日期： 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t时间段：&quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t学号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t机房号：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">string status = <span class="string">&quot;状态： &quot;</span>;  <span class="comment">// 0 取消的预约   1 审核中   2 已预约   -1 预约失败</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核未通过，预约失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/acfe04e1/15.png"></p><h2 id="审核预约"><a href="#审核预约" class="headerlink" title="审核预约"></a>审核预约</h2><h3 id="审核功能实现"><a href="#审核功能实现" class="headerlink" title="审核功能实现"></a>审核功能实现</h3><p>功能描述：教师审核学生的预约，依据实际情况审核预约</p><p>在Teacher.cpp中实现成员函数 <code>void Teacher::validOrder()</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::validOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;待审核的预约记录如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ++index &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;预约日期： 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t机房：&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">string status = <span class="string">&quot;状态： &quot;</span>;  <span class="comment">// 0取消的预约   1 审核中   2 已预约  -1 预约失败</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入审核的预约记录,0代表返回&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select &gt;= <span class="number">0</span> &amp;&amp; select &lt;= v.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入审核结果&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、不通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>) &#123;</span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;2&quot;</span>;<span class="comment">//通过</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;-1&quot;</span>;<span class="comment">//不通过</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">of.<span class="built_in">updateOrder</span>();<span class="comment">//更新预约记录</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;审核完毕！&quot;</span> &lt;&lt; endl; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="/posts/acfe04e1/16.png"></p><p>完结撒花！</p><p>完结撒花！</p><p>完结撒花！</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练手小项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置c++工作区</title>
      <link href="/posts/9a0efe1e.html"/>
      <url>/posts/9a0efe1e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STL的演讲比赛流程管理系统——学习记录</title>
      <link href="/posts/b2eda4b5.html"/>
      <url>/posts/b2eda4b5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="演讲比赛程序需求"><a href="#演讲比赛程序需求" class="headerlink" title="演讲比赛程序需求"></a>演讲比赛程序需求</h1><h2 id="比赛规则"><a href="#比赛规则" class="headerlink" title="比赛规则"></a>比赛规则</h2><p>学校句型一场演讲比赛，共有12个人参加，比赛共两轮，第一轮为淘汰赛，第二轮为决赛</p><p>每名选手都有对应的编号，如10001~10012</p><p>比赛方式：分组比赛，每组6个人</p><p>第一轮分为两个小组，整体按照选手编号进行抽签后顺序演讲</p><p>十个评委分别给每名选手打分，去除最高分和最低分，求的平均分为本轮选手的成绩</p><p>第二轮为决赛，前三名胜出</p><p>每轮比赛过后需要显示晋级选手的信息</p><h2 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h2><ul><li><p>开始演讲比赛：完成整届比赛的流程，每个比赛阶段需要给用户一个提示，用户按任意键后继续下一个阶段</p></li><li><p>查看往届记录：查看之前比赛前三名结果，每次比赛都会记录到文件中，文件用.csv后缀名保存</p></li><li><p>清空比赛记录：将文件中数据清空</p></li><li><p>退出比赛程序：可以退出当前程序</p></li></ul><h1 id="创建管理类"><a href="#创建管理类" class="headerlink" title="创建管理类"></a>创建管理类</h1><p>功能描述：</p><ul><li><p>提供菜单界面与用户交互</p></li><li><p>对演讲比赛流程进行控制</p></li><li><p>与文件的读写交互</p></li></ul><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>在头文件和源文件的文件夹下分别创建speechManager.h和speechManager.cpp文件</p><h1 id="菜单功能"><a href="#菜单功能" class="headerlink" title="菜单功能"></a>菜单功能</h1><p>功能描述：与用户的沟通界面</p><h2 id="添加成员函数"><a href="#添加成员函数" class="headerlink" title="添加成员函数"></a>添加成员函数</h2><p>在管理类speechManager.h中添加成员函数 void show_Menu();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::show_Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;********************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;**欢迎参加演讲比赛**&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.开始演讲比赛&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.查看往届记录&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3.清空比赛记录&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0.退出比赛程序&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;********************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试菜单功能：</p><p><img src="/posts/b2eda4b5/1.png"></p><h1 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h1><p>功能描述：实现退出程序</p><h2 id="提供功能接口"><a href="#提供功能接口" class="headerlink" title="提供功能接口"></a>提供功能接口</h2><p>在main函数中提供分支选择，提供每个功能接口</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建管理类对象</span></span><br><span class="line">SpeechManager sm;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice = <span class="number">0</span>; <span class="comment">//用来存储用户的选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">sm.<span class="built_in">show_Menu</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//开始比赛</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//查看记录</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//清空记录</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出系统</span></span><br><span class="line">sm.<span class="built_in">exitSystem</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现退出功能"><a href="#实现退出功能" class="headerlink" title="实现退出功能"></a>实现退出功能</h2><p>在speechManager.h中提供退出系统的成员函数void exitSystem();</p><p>在speechManager.cpp中提供具体的功能实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//退出系统</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::exitSystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/2.png"></p><h1 id="演讲比赛功能"><a href="#演讲比赛功能" class="headerlink" title="演讲比赛功能"></a>演讲比赛功能</h1><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><p>比赛流程分析：</p><p>抽签-》开始演讲比赛-》显示第一轮比赛结果-》</p><p>抽签-》开始演讲比赛-》显示前三名结果-》保存分数</p><h2 id="创建选手类"><a href="#创建选手类" class="headerlink" title="创建选手类"></a>创建选手类</h2><p>选手类中的属性包含：选手姓名、分数</p><p>头文件中创建speaker.h文件，并添加代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//选手类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Speaker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_Name;<span class="comment">//姓名</span></span><br><span class="line"><span class="type">double</span> m_Score[<span class="number">2</span>];<span class="comment">//分数，最多有两轮得分</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><h3 id="成员属性添加"><a href="#成员属性添加" class="headerlink" title="成员属性添加"></a>成员属性添加</h3><p>在speechManager.h中添加属性</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成员属性</span></span><br><span class="line"><span class="comment">//保存第一轮比赛选手编号容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一轮晋级选手编号容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//胜出前三名选手编号容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vVictory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放编号以及对应具体选手容器</span></span><br><span class="line">map&lt;<span class="type">int</span>, Speaker&gt;m_Speaker;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放比赛轮数</span></span><br><span class="line"><span class="type">int</span> m_Index;</span><br></pre></td></tr></table></figure><h3 id="初始化属性"><a href="#初始化属性" class="headerlink" title="初始化属性"></a>初始化属性</h3><p>在speechManager.h中提供开始比赛的成员函数void initSpeech()；</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initSpeech</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现void initSpeech()；</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::initSpeech</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//容器都置空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;v2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;vVictory.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化比赛轮数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpeechManager构造函数中调用void initSpeech()；</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">SpeechManager::<span class="built_in">SpeechManager</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建选手"><a href="#创建选手" class="headerlink" title="创建选手"></a>创建选手</h3><p>在speechManager.h中提供开始比赛的成员函数void createSpeaker();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建12名选手</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createSpeaker</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现void createSpeaker();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建12名选手</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::createSpeaker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string nameSeed = <span class="string">&quot;ABCDEFGHIJL&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nameSeed.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">string name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">name = name + nameSeed[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建具体选手</span></span><br><span class="line">Speaker sp;</span><br><span class="line">sp.m_Name = name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">sp.m_Score[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选手编号，并且放入到v1容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.<span class="built_in">push_back</span>(i + <span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//选手编号以及对应选手，放入到map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">insert</span>( <span class="built_in">make_pair</span>(i + <span class="number">10001</span>, sp));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpeechManager类的构造函数中调用void createSpeaker();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">SpeechManager::<span class="built_in">SpeechManager</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建12名选手</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">createSpeaker</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试在main函数中，可以在创建完管理对象后，使用下列代码测试12名选手初始状态</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建管理类对象</span></span><br><span class="line">SpeechManager sm;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试12名选手创建</span></span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, Speaker&gt;::iterator it = sm.m_Speaker.<span class="built_in">begin</span>(); it != sm.m_Speaker.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;选手编号：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;second.m_Name &lt;&lt; <span class="string">&quot;分数：&quot;</span> &lt;&lt; it-&gt;second.m_Score[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/3.png"></p><h3 id="开始比赛成员函数"><a href="#开始比赛成员函数" class="headerlink" title="开始比赛成员函数"></a>开始比赛成员函数</h3><p>在speechManager.h中提供开始比赛的成员函数void startSpeech();</p><p>该函数功能是控制比赛的流程</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">startSpeech</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中将startSpeech的空实现先写入</p><p>先将整个比赛的流程写到函数中</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::startSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示晋级结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示最终结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽签"><a href="#抽签" class="headerlink" title="抽签"></a>抽签</h3><p><strong>功能描述：</strong></p><p>正式比赛前，所有选手的比赛顺序需要打乱，我们只需要将存放选手编号的容器打乱次序</p><p>在speechManager.h中提供抽签的成员函数void speechDraw();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speechDraw</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现void speechDraw();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::speechDraw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第 &lt;&lt; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot; &gt;&gt; 轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;抽签后的演讲顺序如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//第一轮比赛</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v1.<span class="built_in">begin</span>(); it != v1.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//第二轮比赛</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v2.<span class="built_in">begin</span>(); it != v2.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在startSpeech比赛流程控制函数中，调用抽签函数</p><p>在main函数中，分支1选项中，调用开始比赛的接口</p><p>测试结果：</p><p><img src="/posts/b2eda4b5/4.png"></p><h3 id="开始比赛"><a href="#开始比赛" class="headerlink" title="开始比赛"></a>开始比赛</h3><p>在speechManager.h中提供比赛的成员函数void speechContest();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比赛</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speechContest</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数void speechContest();</p><p><strong>补充知识</strong></p><p>在C++中，deque（双端队列）是一种序列容器，类似于 vector，但是它允许在头尾两端进行高效的插入和删除操作。deque 是 “double-ended queue” 的缩写。</p><p>deque 和 vector 的主要区别在于，在 deque 中，元素存储在一个或多个连续的块中，而不是单个连续的数组。这使得 deque 更适合在头尾进行插入和删除操作，因为这些操作在 deque 中的开销更小。</p><p>deque 的特点包括：</p><ol><li><p>高效的插入和删除操作：在 deque 的头尾插入和删除元素的时间复杂度为 O(1)。</p></li><li><p>随机访问：deque 支持通过索引随机访问元素，时间复杂度为 O(1)。</p></li><li><p>动态增长：deque 可以动态地增长以容纳更多的元素，因此没有固定的大小限制。</p></li><li><p>内存分配：deque 使用多个块来存储元素，这意味着在插入和删除操作时，不需要移动所有元素，因此在特定情况下可能比 vector 更高效。</p></li></ol><p>在使用 deque 时，你可以像使用数组一样通过索引访问元素，也可以使用 <code>push_front()</code>、<code>push_back()</code>、<code>pop_front()</code>、<code>pop_back()</code> 等成员函数在头尾插入和删除元素。</p><p>使用 deque 需要包含头文件 <code>&lt;deque&gt;</code>。deque 是标准模板库（STL）中的一部分，因此可以在标准 C++ 中直接使用。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比赛</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::speechContest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛正式开始-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备临时容器，存放小组成绩</span></span><br><span class="line">multimap&lt;<span class="type">double</span>, <span class="type">int</span>, greater&lt;<span class="type">double</span>&gt;&gt; groupSorce;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;<span class="comment">//记录人员个数，6人一组</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v_Src; <span class="comment">//比赛选手容器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line">v_Src = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v_Src = v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历所有选手进行比赛</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v_Src.<span class="built_in">begin</span>(); it != v_Src.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//评委打分</span></span><br><span class="line">deque&lt;<span class="type">double</span>&gt;d;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="type">double</span> score = (<span class="built_in">rand</span>() % <span class="number">401</span> + <span class="number">600</span>) / <span class="number">10.f</span>; <span class="comment">// 600 ~ 1000</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score &lt;&lt; &quot;\t&quot;;</span></span><br><span class="line">d.<span class="built_in">push_back</span>(score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">double</span>&gt;()); <span class="comment">//降序排序</span></span><br><span class="line"></span><br><span class="line">d.<span class="built_in">pop_back</span>();<span class="comment">// 去除最低分</span></span><br><span class="line">d.<span class="built_in">pop_front</span>();<span class="comment">// 去除最高分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这行代码利用STL算法`accumulate`来计算双端队列`d`中所有元素的总和，并将结果赋给`sum`变量。</span></span><br><span class="line"><span class="comment">具体来说，`accumulate`函数的第一个参数是容器的起始迭代器（`d.begin()`），</span></span><br><span class="line"><span class="comment">第二个参数是容器的结束迭代器（`d.end()`），第三个参数是初始值（这里是0.0f）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在这里，初始值是`0.0f`，表示总和的数据类型为`double`。</span></span><br><span class="line"><span class="comment">因为第三个参数的类型和容器中元素的类型一致，所以会发生隐式类型转换，将整数0转换为浮点数0.0。</span></span><br><span class="line"><span class="comment">`accumulate`函数会从容器的第一个元素开始，依次累加每个元素，直到容器的最后一个元素。</span></span><br><span class="line"><span class="comment">最终的结果会存储在`sum`变量中*/</span></span><br><span class="line"><span class="type">double</span> sum = <span class="built_in">accumulate</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="number">0.0f</span>);<span class="comment">//总分</span></span><br><span class="line"><span class="type">double</span> avg = sum / (<span class="type">double</span>)d.<span class="built_in">size</span>();<span class="comment">//平均分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印平均分</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;编号：&quot; &lt;&lt; *it &lt;&lt; &quot;\t姓名：&quot; &lt;&lt; this-&gt;m_Speaker[*it].m_Name &lt;&lt; &quot;\t获取平均分：&quot; &lt;&lt; avg;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将平均分放入map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] = avg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将打分数据放入临时小组容器中</span></span><br><span class="line">groupSorce.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(avg, *it));<span class="comment">//key是得分，value是具体选手编号</span></span><br><span class="line"><span class="comment">//每6人取出前三名</span></span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">6</span> == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; num / <span class="number">6</span> &lt;&lt; <span class="string">&quot;小组比赛名次：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;<span class="type">double</span>, <span class="type">int</span>, greater&lt;<span class="type">double</span>&gt;&gt;::iterator it = groupSorce.<span class="built_in">begin</span>(); it != groupSorce.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Name &lt;&lt; <span class="string">&quot;\t成绩：&quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取走前三名</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;<span class="type">double</span>, <span class="type">int</span>, greater&lt;<span class="type">double</span>&gt;&gt;::iterator it = groupSorce.<span class="built_in">begin</span>(); it != groupSorce.<span class="built_in">end</span>() &amp;&amp; count &lt; <span class="number">3</span>; it++, count++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line">v2.<span class="built_in">push_back</span>((*it).second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">vVictory.<span class="built_in">push_back</span>((*it).second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">groupSorce.<span class="built_in">clear</span>();<span class="comment">//小组容器清空</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛完毕--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/b2eda4b5/5.png"></p><h3 id="显示比赛分数"><a href="#显示比赛分数" class="headerlink" title="显示比赛分数"></a>显示比赛分数</h3><p>在speechManager.h中提供比赛的成员函数 void showScore();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示比赛结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showScore</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void showScore();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::showScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮晋级选手信息如下------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>) &#123;</span><br><span class="line">v = v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v = vVictory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;选手编号：&quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Name &lt;&lt; <span class="string">&quot;\t得分：&quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">show_Menu</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二轮比赛"><a href="#第二轮比赛" class="headerlink" title="第二轮比赛"></a>第二轮比赛</h3><p>第二轮比赛流程同第一轮，知识比赛轮数+1，其余流程不变</p><p>在startSpeech比赛流程控制函数中，加入第二轮的流程</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::startSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示晋级结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮开始比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示最终结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src="/posts/b2eda4b5/6.png"></p><h2 id="保存分数"><a href="#保存分数" class="headerlink" title="保存分数"></a>保存分数</h2><p><strong>功能描述：</strong></p><p>将每次演讲比赛的得分记录到文件中</p><p><strong>功能实现：</strong></p><p>在speechManager.h中添加保存记录的成员函数 void saveRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">saveRecord</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void saveRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存记录</span></span><br><span class="line"><span class="comment">//保存记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::saveRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">&quot;speech.csv&quot;</span>, ios::out | ios::app);<span class="comment">//用追加的方式写文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将每个选手数据写入到文件中</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = vVictory.<span class="built_in">begin</span>(); it != vVictory.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">ofs &lt;&lt; *it &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ofs &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;记录已经保存&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有记录了，文件不为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在startSpeech比赛流程控制函数中，最后调用保存记录分数函数</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始比赛，比赛整个流程控制函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::startSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示晋级结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮开始比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechDraw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">speechContest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.显示最终结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">showScore</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">saveRecord</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置比赛</span></span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选手</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">createSpeaker</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取往届记录</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">loadRecord</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------本届比赛完毕----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/7.png"></p><h1 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h1><h2 id="读取记录分数"><a href="#读取记录分数" class="headerlink" title="读取记录分数"></a>读取记录分数</h2><p>在speechManager.h中添加保存记录的成员函数 void loadRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loadRecord</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>添加判断文件是否为空的标志 bool fileIsEmpty;</p><p>添加往届记录的容器 <code>map&lt;int, vector&lt;string&gt;&gt; m_Record;</code></p><p>其中m_Record中的key代表第几届，value记录具体的信息</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断文件是否为空</span></span><br><span class="line"><span class="type">bool</span> fileIsEmpty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放往届记录的容器</span></span><br><span class="line">map&lt;<span class="type">int</span>, vector&lt;string&gt;&gt;m_Record;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::initSpeech</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//容器都置空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;v2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;vVictory.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化比赛轮数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化记录容器</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Record.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void loadRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::loadRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;speech.csv&quot;</span>, ios::in)</span></span>;<span class="comment">//读文件</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件不存在</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;文件不存在&quot; &lt;&lt; endl;</span></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件清空情况</span></span><br><span class="line"><span class="comment">/*char ch;</span></span><br><span class="line"><span class="comment">ifs &gt;&gt; ch;*/</span></span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="built_in">eof</span>()) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;文件为空&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件不为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//ifs.putback(ch);//将上面读取的单个字符放回来</span></span><br><span class="line"></span><br><span class="line">string data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; data) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; data &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">vector&lt;string&gt;v;<span class="comment">//存放6个string字符串</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos = <span class="number">-1</span>;<span class="comment">//查到逗号的位置变量</span></span><br><span class="line"><span class="type">int</span> start = <span class="number">0</span>;<span class="comment">//起始位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">pos = data.<span class="built_in">find</span>(<span class="string">&quot;,&quot;</span>, start);</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">string temp = data.<span class="built_in">substr</span>(start, pos - start);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; temp &lt;&lt; endl;</span></span><br><span class="line">v.<span class="built_in">push_back</span>(temp);</span><br><span class="line"></span><br><span class="line">start = pos + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Record.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(index, v));</span><br><span class="line">index++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//for (map&lt;int, vector&lt;string&gt;&gt;::iterator it = m_Record.begin(); it != m_Record.end(); it++) &#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; it-&gt;first &lt;&lt; &quot;冠军编号：&quot; &lt;&lt; it-&gt;second[0] &lt;&lt; &quot;\t分数：&quot; &lt;&lt; it-&gt;second[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看记录功能"><a href="#查看记录功能" class="headerlink" title="查看记录功能"></a>查看记录功能</h2><p>在speechManager.h中添加保存记录的成员函数 void showRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示往届得分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showRecord</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void showRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示往届得分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::showRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;fileIsEmpty) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在，或记录为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Record.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;届\t&quot;</span> &lt;&lt;</span><br><span class="line"><span class="string">&quot;冠军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\t得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line"><span class="string">&quot;亚军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">2</span>] &lt;&lt; <span class="string">&quot;\t得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">3</span>] &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line"><span class="string">&quot;季军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">4</span>] &lt;&lt; <span class="string">&quot;\t得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">5</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/b2eda4b5/8.png"></p><h1 id="清空记录"><a href="#清空记录" class="headerlink" title="清空记录"></a>清空记录</h1><p>在speechManager.h中添加清空记录的成员函数 void clearRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearRecrd</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在speechManager.cpp中实现成员函数 void clearRecord();</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空记录</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpeechManager::clearRecrd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;确认清空？&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.确认&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.返回&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 打开模式 ios::trunc 如果存在删除文件并重新创建</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;speech.csv&quot;</span>, ios::trunc)</span></span>;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">initSpeech</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选手</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">createSpeaker</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取往届记录</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">loadRecord</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;speechManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//随机数种子</span></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建管理类对象</span></span><br><span class="line">SpeechManager sm;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试12名选手创建</span></span><br><span class="line"><span class="comment">/*for (map&lt;int, Speaker&gt;::iterator it = sm.m_Speaker.begin(); it != sm.m_Speaker.end(); it++) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;选手编号：&quot; &lt;&lt; it-&gt;first &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;second.m_Name &lt;&lt; &quot;分数：&quot; &lt;&lt; it-&gt;second.m_Score[0] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice = <span class="number">0</span>; <span class="comment">//用来存储用户的选项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">sm.<span class="built_in">show_Menu</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//开始比赛</span></span><br><span class="line">sm.<span class="built_in">startSpeech</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//查看记录</span></span><br><span class="line">sm.<span class="built_in">showRecord</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//清空记录</span></span><br><span class="line">sm.<span class="built_in">clearRecrd</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出系统</span></span><br><span class="line">sm.<span class="built_in">exitSystem</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- <iframe height=300 width=500 src="9.mp4"> -->]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练手小项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp基础</title>
      <link href="/posts/c8ad3605.html"/>
      <url>/posts/c8ad3605.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><p>在C++中，new 是用于动态分配内存并创建对象的关键字。当使用 new 创建对象时，对象被分配在堆内存中，而不是栈内存中。</p><p>使用 new 的主要原因包括：</p><ul><li><p>动态内存分配： new 允许在程序运行时动态地分配内存空间，而不需要在编译时确定对象的大小。这对于需要灵活管理内存的情况非常有用，例如当对象的大小在运行时才能确定时，或者需要在程序的不同部分共享对象时。</p></li><li><p>对象的生命周期： 使用 new 创建的对象存储在堆内存中，其生命周期由程序员显式管理。这意味着对象在程序员释放内存之前不会被销毁，因此可以在程序的任何地方访问对象。相比之下，栈上的对象的生命周期是由其作用域决定的，一旦超出作用域，对象就会被销毁。</p></li><li><p>返回指针： new 返回一个指向新分配对象的指针，这允许在需要时以指针的形式传递对象，并在需要时释放对象的内存。这在函数返回对象时特别有用，因为函数返回值的大小可能是动态的，或者需要在函数外部持续存在。</p></li></ul><p>尽管使用 new 具有灵活性和控制权，但也需要小心管理动态分配的内存，以防止内存泄漏和悬空指针等问题。因此，在使用 new 分配内存时，通常需要配合使用 delete 来释放内存，以避免内存泄漏。</p><h1 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h1><p>在C++中，this 指针是一个特殊的指针，它指向当前对象。</p><p>this 指针通常在类的成员函数中使用，用于访问当前对象的成员变量和成员函数。</p><p>this 指针主要有以下几个用途：</p><ol><li>区分局部变量和成员变量： 当成员函数的参数名和成员变量名相同时，可以使用 this 指针来明确指示要访问的是成员变量而不是局部变量。例如：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x; <span class="comment">// 使用this指针访问成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>在成员函数中返回对象本身： 当成员函数需要返回当前对象本身时，可以使用 return *this; 。这种技术常用于实现链式调用。例如：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MyClass obj;</span><br><span class="line">obj.<span class="built_in">setValue</span>(<span class="number">10</span>).<span class="built_in">print</span>(); <span class="comment">// setValue函数返回*this，可以直接调用print函数</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在构造函数和析构函数中访问当前对象： 在构造函数和析构函数中，可以使用 this 指针来访问当前对象。这在需要在构造函数和析构函数中对当前对象进行一些额外操作时很有用。</li></ol><h1 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h1><p>在C++中，纯虚函数是一个在基类中声明但没有实现的虚函数。</p><p>纯虚函数的作用主要体现在以下几个方面：</p><ul><li><p>接口定义： 纯虚函数可以用来定义接口，即定义一个接口类，而不提供具体的实现。派生类必须实现这些纯虚函数，从而确保派生类都提供了相同的接口，但具体的实现可以根据派生类的需求来实现。</p></li><li><p>多态性： 纯虚函数可以使得基类指针或引用在运行时指向派生类对象，并调用派生类中相应的实现。这样可以实现多态性，提高了代码的灵活性和可扩展性。</p></li><li><p>抽象类： 包含纯虚函数的类被称为抽象类，它们无法直接创建对象，只能作为基类来派生出其他类。抽象类的存在主要是为了提供一种接口，由派生类来实现具体的行为。</p></li><li><p>框架设计： 在框架设计中，可以使用纯虚函数来定义一些必须由客户程序实现的操作，从而定义了一个框架的结构，并允许客户程序根据自己的需求来定制具体的行为。</p></li></ul><p>总之，纯虚函数的作用在于提供了一种机制，使得类可以定义接口、实现多态性、构建抽象类以及设计框架等。</p><h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><p>函数指针是指向函数的指针变量。</p><p>在C++中，函数也是一种数据类型，因此可以像其他数据类型一样，通过指针来引用和传递函数。函数指针可以存储函数的地址，并且可以通过调用该指针来间接调用函数。</p><p>函数指针的声明方式与普通指针类似，但是要在指针名前面加上函数的返回类型和参数列表，以表示该指针指向的函数的类型。函数指针的语法通常如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">返回类型 (*指针变量名)(参数列表);</span><br></pre></td></tr></table></figure><p>例如，假设有一个函数 <code>void printMessage(const char* message)</code>，那么可以声明一个指向该函数的指针如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> (*ptr)(<span class="type">const</span> <span class="type">char</span>*);</span><br></pre></td></tr></table></figure><p>函数指针的主要用途包括回调函数、动态选择调用的函数等。通过函数指针，可以实现更加灵活和多样化的函数调用方式，提高了程序的可扩展性和可维护性。</p><h1 id="cpp匿名对象"><a href="#cpp匿名对象" class="headerlink" title="cpp匿名对象"></a>cpp匿名对象</h1><p>C++中的匿名对象是指在不使用变量名的情况下创建的临时对象。</p><p>它们通常用于作为函数的参数传递或作为表达式的一部分。</p><p>匿名对象没有变量名，因此不能在其他地方引用，一旦超出了当前作用域，匿名对象就会被销毁。</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Printing from MyClass&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建匿名对象，并调用成员函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>().<span class="built_in">print</span>(); <span class="comment">// 这里的 MyClass() 就是一个匿名对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>MyClass()</code> 创建了一个匿名对象，然后调用了它的 <code>print()</code> 成员函数。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 注意 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
